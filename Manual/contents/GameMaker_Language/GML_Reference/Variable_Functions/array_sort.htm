<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>数组_排序</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function array_sort" />
  <meta name="rh-index-keywords" content="array_sort" />
  <meta name="search-keywords" content="array_sort" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span>数组_排序</span></h1>
  <p>通过这个函数，你可以按升序或降序对一个数组进行排序，或者使用一个自定义函数来定义排序顺序。该函数要求你提供要排序的数组，然后是以下任何一项。</p>
  <ul class="colour">
    <li>常数 <span class="inline">true</span> 或 <span class="inline">false</span> 表示<span>升序 (<span class="inline">true</span>) 或降序 (<span class="inline">false</span>) 的排序顺序</span>。</li>
    <li>一个自定义函数来定义排序顺序</li>
  </ul>
  <p>这个函数将修改所提供的原始数组的内容。要创建一个排序的副本，首先使用 <span class="inline"><a href="array_copy.htm">array_copy()</a></span> 来复制数组，然后将其传入该函数。</p>
  <h3>使用自定义函数</h3>
  <p>如果你使用一个自定义函数进行排序，它必须接受2个参数，分别接收当前元素和下一个元素的值。该函数应该返回以下任何一个值来影响排序顺序（其中<span class="inline">elm1</span> 是当前元素， <span class="inline">elm2</span> 是下一个元素）。</p>
  <ul class="colour">
    <li><span class="inline">0</span>:如果 <span class="inline">elm1</span> 和 <span class="inline">elm2</span> 是相等的</li>
    <li><span class="inline">&lt;= -1</span> (负整数)：如果 ，则在 <span class="inline">elm1</span> <span class="inline">elm2</span></li>
    <li><span class="inline">&gt;= 1</span> (正整数)：如果 ，则在 <span class="inline">elm1</span> <span class="inline">elm2</span></li>
  </ul>
  <p class="note"><span class="note">注意</span>你的自定义函数所返回的值必须是一个整数。小于1的浮点值将被读为0，所以你必须使用 <a href="../Maths_And_Numbers/Number_Functions/sign.htm"><span class="inline">sign()</span></a>或 <a href="../Maths_And_Numbers/Number_Functions/round.htm"><span class="inline">round()</span></a>如果你的函数要处理浮点值的话。</p>
  <p>如果数组包含一组<span class="notranslate">strings</span> ，那么在使用默认的升/降排序类型时，<span class="notranslate">strings</span> 将根据英文字母进行排序。所有其他数据类型将根据其数值进行排序，具体数值取决于数据类型本身（例如，一个<span class="notranslate">buffers</span> 的数组将根据其内存地址的数值进行排序）。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">array_sort(variable, sorttype_or_function);</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>类型</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="notranslate">variable</span></td>
        <td><span data-keyref="Type_Array"><a href="../../../../GameMaker_Language/GML_Overview/Arrays.htm" target="_blank">阵列</a></span></td>
        <td><span class="notranslate">The variable that holds the array.</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span>sorttype_or_function<span> </span></td>
        <td><span data-keyref="Type_Bool"><a href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">布尔型</a></span>或 <span data-keyref="Type_Function_Script"><a href="../../../../GameMaker_Language/GML_Overview/Script_Functions.htm" target="_blank">脚本功能</a></span>/<span data-keyref="Type_Method"><a href="../../../../GameMaker_Language/GML_Overview/Method_Variables.htm" target="_blank">方式</a></span></td>
        <td><span class="notranslate">The sort type (<span><span class="inline">true</span> 用于升序，或 用于降序）或一个用于排序的函数参考。 <span class="inline">false</span> </td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var _a = [10, 9, 8, 7, 6, 5];<br />
    <br />
    array_sort(_a, function(elm1, elm2)<br />
    {<br />
        return elm1 - elm2;<br />
    });
  </p>
  <p>上面的代码使用了一个自定义的排序函数，将数组按升序排序。该排序函数将两个数组元素作为 <span class="inline">elm1</span> 和 <span class="inline">elm2</span> ，并对它们进行减法运算。如果 <span class="inline">elm1</span> 大于 <span class="inline">elm2</span> ，减法的结果是一个正数，它将 <span class="inline">elm1</span> 推到 <span class="inline">elm2</span> 之后，因此将它们放在升序中。</p>
  <p>下面是一个扩展的例子。</p>
  <p class="code">var _xx, _yy, _a;<br />
    <br />
    for (var i = 0; i &lt; 10; i++)<br />
    {<br />
        _xx = irandom(room_width);<br />
        _yy = irandom(room_height);<br />
        _a[i] = instance_create_layer(_xx, _yy, layer, obj_Bullet);<br />
    }<br />
    <br />
    show_debug_message(_a);<br />
    <br />
    var _f = function(inst1, inst2)<br />
    {<br />
        return inst1.x - inst2.x;<br />
    }<br />
    <br />
    array_sort(_a, _f);<br />
    show_debug_message(_a);
  </p>
  <p>上述代码将创建一个由10个实例组成的数组，放置在<span class="notranslate">room</span> 的随机位置。调试信息将显示如下内容。</p>
  <p class="code">[ 100003,100004,100005,100006,100007,100008,100009,100010,100011,100012 ]</p>
  <p>然后代码创建了一个方法，用于 <span class="inline">array_sort()</span> ，返回<span class="notranslate">room</span> 中每个实例的X位置之间的差异。然后使用该方法运行<span class="inline">array_sort()</span> ，按X从低到高对实例进行排序。然后，数组的输出将看起来像这样。</p>
  <p class="code">[ 100011,100004,100009,100006,100012,100008,100010,100005,100007,100003 ]</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Variable_Functions.htm">可变的功能</a></div>
        <div style="float:right">下一步。 <a href="array_length.htm"><span class="notranslate">array_length</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
array_sort
-->
  <!-- TAGS
array_sort
-->
</body>
</html>