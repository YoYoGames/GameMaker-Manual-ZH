<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>方法</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function method" />
  <meta name="rh-index-keywords" content="method" />
  <meta name="search-keywords" content="method" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>方法</h1>
  <p>通过这个函数，你可以将一个现有的函数（或方法）绑定到给定的实例或<span class="notranslate">struct</span> ，创建一个新的<a href="../../GML_Overview/Method_Variables.htm">方法变量</a>，以后可以使用。</p>
  <p>你提供要使用的实例ID（一个在<span class="notranslate">room</span> ，而不是<span class="notranslate">object</span> 索引中活动的实例）或一个<span class="notranslate">struct</span> 引用，以及你想绑定的函数ID（或方法引用）。该函数将返回一个新的<a class="glossterm" data-glossterm="方法" href="#">方法</a>，可以从它被分配到的变量中调用（见下面的代码示例）。</p>
  <p>返回的方法将被 &quot;绑定 &quot;到给定的实例或<span class="notranslate">struct</span> ，这意味着它将始终在该实例/结构的范围内执行。</p>
  <p>你可以绑定内置函数以及用户定义的函数/方法，你还可以提供 <span class="inline">undefined</span> 作为实例/结构参数，这意味着当前的 <a href="../../GML_Overview/Instance_Keywords.htm"><span class="inline">self</span></a>范围将被用于绑定。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">method(struct_ref_or_instance_id, func);</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>类型</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="notranslate">struct_ref_or_instance_id</span></td>
        <td><span data-keyref="Type_Struct">结构</span>或<span data-keyref="Type_ID_Instance">实例ID</span></td>
        <td><span class="notranslate">The unique reference or ID value of the struct or instance to use (can be <span class="inline">self</span> 或 ) <span class="inline">undefined</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">func</span></td>
        <td><span data-keyref="Type_Function_Script">脚本功能</span>或<span data-keyref="Type_Method">方法</span></td>
        <td><span class="notranslate">The ID of the function (or method reference) to use</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_Method">Method</span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var _inst = instance_position(mouse_x, mouse_y, obj_Enemy);<br />
    if instance_exists(_inst)<br />
    {<br />
        enemy_func = method(_inst, enemy_ai);<br />
    }</p>
  <p>上面的代码将检查在鼠标的位置是否存在一个敌人的实例。如果存在，那么<span class="inline2">enemy_ai</span>方法将被绑定到敌人实例上，并作为一个新的方法变量返回 <span class="inline">&quot;enemy_func&quot;</span> 。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Variable_Functions.htm">可变的功能</a></div>
        <div style="float:right">下一步。 <a href="method_get_self.htm"><span class="notranslate">method_get_self</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
method
-->
  <!-- TAGS
method
-->
</body>
</html>