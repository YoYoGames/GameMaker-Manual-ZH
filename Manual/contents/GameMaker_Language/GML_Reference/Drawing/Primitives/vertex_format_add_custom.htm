<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>顶点格式_添加_自定义</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference for vertex_format_add_custom" />
  <meta name="rh-index-keywords" content="vertex_format_add_custom,vertex_type_float1,vertex_type_float2,vertex_type_float3,vertex_type_float4,vertex_type_colour,vertex_type_ubyte4,vertex_usage_position,vertex_usage_colour,vertex_usage_normal,vertex_usage_textcoord,vertex_usage_blendweight,vertex_usage_blendindices,vertex_usage_depth,vertex_usage_tangent,vertex_usage_binormal,vertex_usage_fog,vertex_usage_sample" />
  <meta name="search-keywords" content="vertex_format_add_custom,vertex_type_float1,vertex_type_float2,vertex_type_float3,vertex_type_float4,vertex_type_colour,vertex_type_ubyte4,vertex_usage_position,vertex_usage_colour,vertex_usage_normal,vertex_usage_textcoord,vertex_usage_blendweight,vertex_usage_blendindices,vertex_usage_depth,vertex_usage_tangent,vertex_usage_binormal,vertex_usage_fog,vertex_usage_sample" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>顶点格式_添加_自定义</h1>
  <p>这个函数允许你为特定的<span class="notranslate">vertex</span> 格式属性使用一个自定义的数据类型，作为正在创建的新<span class="notranslate">vertex</span> 格式的一部分。可使用的值由你选择的数据类型常数定义，列在下面。</p>
  <table>
    <colgroup>
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th colspan="2"><span data-keyref="Type_Constant_Draw_Vertex_Data_Type"><a data-rhwidget="HyperlinkPopover" href="../../../../../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm">顶点数据类型常数</a></span></th>
      </tr>
      <tr>
        <th>恒定</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_type_float1</span></td>
        <td>一个单一的浮点值</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_type_float2</span></td>
        <td>两个浮点值</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_type_float3</span></td>
        <td>三个浮点值</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_type_float4</span></td>
        <td>四个浮点值</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_type_colour</span></td>
        <td>四个成分值（r、g、b、a）。</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_type_ubyte4</span></td>
        <td>四个成分的无符号字节值（从0到255）。</td>
      </tr>
    </tbody>
  </table>
  <p><br>
    这些常量的用途也需要被定义，以便在创建的<span class="notranslate">shader</span> ，这些值可以被正确地 &quot;绑定&quot;。这是必要的，因为DX和OpenGL有不同的要求，所以如果你没有正确地绑定它们，它们就不会在<span class="notranslate">shader</span> 。你可以选择的可用的使用常量列在下面，你使用的常量将取决于正在创建的<span class="notranslate">shader</span> 的具体内容。</p>
  <table>
    <colgroup>
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th colspan="2"><span data-keyref="Type_Constant_Draw_Vertex_Usage"><a data-rhwidget="HyperlinkPopover" href="../../../../../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm">顶点使用类型常数</a></span></th>
      </tr>
      <tr>
        <th>恒定</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_usage_position</span></td>
        <td>位置值（x，y，z）。</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_usage_colour</span></td>
        <td>颜色值（R、G、B、A）。</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_usage_normal</span></td>
        <td>顶点法线值（Nx, ny, nz）。</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_usage_textcoord</span></td>
        <td>紫外坐标(u, v)</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_usage_blendweight</span></td>
        <td>输入矩阵的混合重量（例如用于骨骼动画）。</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_usage_blendindices</span></td>
        <td>要使用的矩阵的索引（例如用于骨骼动画）。</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_usage_depth</span></td>
        <td>顶点深度<span class="notranslate">buffer</span> 值</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_usage_tangent</span></td>
        <td>切线值</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_usage_binormal</span></td>
        <td>二态值</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_usage_fog</span></td>
        <td>雾值</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">vertex_usage_sample</span></td>
        <td>采样器索引</td>
      </tr>
    </tbody>
  </table>
  <p><br>
    在使用这样的自定义格式时，有一些重要的事情需要注意。</p>
  <ul class="colour">
    <li>当使用GLSL<span class="notranslate">shaders</span> 时， <span class="inline">vertex_format_add_custom()</span> 函数只支持 <span class="inline">vertex_usage_position</span>, <span class="inline">vertex_usage_colour</span>, <span class="inline">vertex_usage_normal</span> 和 <span class="inline">vertex_usage_textcoord</span> 。这些将分别映射到<span class="notranslate">shader</span> 的属性 <span class="inline">in_Position</span>, <span class="inline">in_Colour[0 - ...]</span>, <span class="inline">in_Normal</span> （任何不是这三个属性之一的东西--例如：<span class="notranslate">texture</span> 坐标--可以映射到你定义的任何属性）。</li>
    <li>一般来说，你应该尽可能使用 <span class="inline">vertex_usage_textcoord</span> ，因为像 <span class="inline">vertex_usage_blendweight</span> 和 <span class="inline">vertex_usage_tangent</span> 这样的类型在大多数<span class="notranslate">shader</span> 语言中接近废弃，而且可能无法正确转换。相反，使用 <span class="inline">vec</span>, <span class="inline">vec2</span>, <span class="inline">vec3</span> 或 <span class="inline">vec4</span> 类型 <span class="inline">vertex_usage_textcoord</span> ，一切都应该正常工作。</li>
    <li>GLSL ES<i>不</i>支持整数属性，所以传入 <span class="inline">ivec4</span>'s是不行的（这种类型通常在传入 <span class="inline">vertex_usage_blendindices</span> 时使用）。你需要做的是传入<span class="notranslate">texture</span> 坐标，然后在<span class="notranslate">shader</span> ，像这样把它们转换成 <span class="inline">ivec4</span> 。</li>
  </ul>
  <p> </p>
  <p class="code">attribute vec3 in_Position;<br />
    attribute vec4 in_BlendIndices;<br />
    attribute vec4 in_BlendWeights;<br />
    <br />
    varying vec4 v_vColour;<br />
    varying mat4 v_mat;<br />
    <br />
    void main()<br />
    {<br />
        gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4( in_Position.xyz, 1.0);<br />
        v_vColour = in_BlendWeights;<br />
         ivec4 t = ivec4(in_BlendIndices);<br />
         v_mat = gm_Matrices[ t.x ];<br />
    }
  </p>
  <ul class="colour">
    <li>混合权重通常存储在一个数组中，然后使用混合指数进行访问，但你可以看到这里不是把 <span class="inline">in_BlendIndices</span> 定义为一个 <span class="inline">ivec4</span> 属性，而是一个 <span class="inline">vec4</span> ，然后在代码中被投到一个 <span class="inline">ivec4</span> 。然后，这被用来为使用 <span class="inline">gm_Matrix</span> 创建的数组建立索引（你只能使用一个 <span class="inline">INT</span> 的值来访问一个数组--而不是一个浮点数）。</li>
    <br />
     
  </ul>
  <h4>语法。</h4>
  <p class="code">vertex_format_add_custom(type, usage);</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>类型</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="notranslate">type</span></td>
        <td><span data-keyref="Type_Constant_Draw_Vertex_Data_Type"><a data-rhwidget="HyperlinkPopover" href="../../../../../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm">顶点数据类型常数</a></span></td>
        <td><span class="notranslate">The data type that this custom vertex data will hold (see the <b><i>type constants</i></b> listed above).</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">usage</span></td>
        <td><span data-keyref="Type_Constant_Draw_Vertex_Usage"><a data-rhwidget="HyperlinkPopover" href="../../../../../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_custom.htm">顶点使用类型常数</a></span></td>
        <td><span class="notranslate">The use that the data will get(see the <b><i>usage constants</i></b> listed above).</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_Void"><a data-rhwidget="HyperlinkPopover" href="../../../../../LINKGOESHERE">N/A</a></span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_textcoord();<br />
    vertex_format_add_custom(vertex_type_float3, vertex_usage_position);<br />
    my_format = vertex_format_end();</p>
  <p>上面的代码将创建一个新的<span class="notranslate">vertex</span> 格式，只有<span class="notranslate">texture</span> 和3个自定义浮点值的位置。然后，它将格式ID存储在变量 &quot;my_format &quot;中。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Primitives_And_Vertex_Formats.htm">原理和<span class="notranslate">Vertex</span> 形式</a></div>
        <div style="float:right">下一步。 <a href="vertex_format_end.htm"><span class="notranslate">vertex_format_end</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
vertex_format_add_custom
vertex_type_float1
vertex_type_float2
vertex_type_float3
vertex_type_float4
vertex_type_colour
vertex_type_ubyte4
vertex_usage_position
vertex_usage_colour
vertex_usage_normal
vertex_usage_textcoord
vertex_usage_blendweight
vertex_usage_blendindices
vertex_usage_depth
vertex_usage_tangent
vertex_usage_binormal
vertex_usage_fog
vertex_usage_sample
-->
  <!-- TAGS
vertex_format_add_custom
-->
</body>
</html>