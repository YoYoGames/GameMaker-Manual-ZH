<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>视频_画图</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../../assets/css/default.css" />
  <meta name="template" content="../../../../assets/masterpages/Manual_Keyword_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Reference page for video_draw" />
  <meta name="rh-index-keywords" content="video_draw" />
  <meta name="search-keywords" content="video_draw, draw video, render video" />
  <meta name="condition-tags" content="" />
</head>
<body>
  <h1>视频_画图</h1>
  <p>这个函数将<a href="video_open.htm">打开的视频</a>的当前帧绘制到一个曲面（或两个曲面）上。它将曲面作为其返回数组的一部分返回，可以<a href="../Surfaces/draw_surface.htm">手动绘制</a>。</p>
  <p>该函数还返回有关视频状态的数据，下文将对此进行阐述。</p>
  <p>确保只在调用 <span class="inline"><a href="video_open.htm">video_open()</a></span> ，但在调用 <span class="inline"><a href="video_close.htm">video_close()</a></span> 之前调用，否则它不会做任何事情（因为不会有视频加载）。</p>
  <h2>返回数据</h2>
  <p>该函数将返回一个数组，其中的第一个元素（<span class="inline2">[0]</span>）将是一个实值。这个值告诉人们视频的状态，并且将是。</p>
  <ul class="colour">
    <li><strong>0</strong>，如果视频播放没有任何问题</li>
    <li><strong>-1</strong>，如果有一个错误</li>
    <li>在某些平台上，<strong>-2</strong>，如果视频播放完毕（这时可以通过调用<span class="inline"><a href="video_close.htm">video_close()</a></span> ，将其从内存中删除）
      <ul>
        <li>建议使用<a data-xref="{text}" href="Videos.htm#h">异步回调</a>来代替，以了解视频何时结束</li>
      </ul>
    </li>
  </ul>
  <p>当这个状态值为<strong>0</strong>时，数组将包含更多的数据，这将取决于视频的格式。你可以通过调用<span class="inline"><a href="video_get_format.htm">video_get_format()</a></span> 来了解视频格式。</p>
  <h2>RGBA视频</h2>
  <p><span>对于RGBA视频，位置<span class="inline2">[1]</span>将包含绘制视频帧的表面。你可以得到这个表面并手动<a href="../Surfaces/draw_surface.htm">绘制它</a>。</span></p>
  <h2>YUV视频</h2>
  <p><span>一些平台（特别是控制台）使用YUV颜色格式的视频，它利用了两个表面。在这种情况下，数组会有<span class="inline2">[1]</span>和<span class="inline2">[2]</span>两个面的位置。</span></p>
  <ul class="colour">
    <li><span>[<span class="inline2">1]</span>是黑与白的主要视频面</span></li>
    <li><span><span class="inline2">[2]</span>是包含所有颜色数据的色度面。</span></li>
  </ul>
  <p>然后，这两个表面都使用YUV<span class="notranslate">shader</span> 进行组合，然后用于<span class="notranslate">texture</span> 一个自定义的四边形，将视频绘制到屏幕上。</p>
  <p>阅读<a data-xref="{title}" href="YUV_Videos.htm">YUV视频</a>，了解使用<span class="notranslate">shader</span> 绘制这两个表面的步骤。</p>
  <p>关于特定控制台的具体实施细节，请参考<a href="https://help.yoyogames.com/hc/en-us/">YoYo Games Helpdesk</a>上的文件。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">video_draw();</p>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_Array"><a data-rhwidget="HyperlinkPopover" href="../../../../../GameMaker_Language/GML_Overview/Arrays.htm">Array</a></span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var _data = video_draw();<br />
    var _status = _data[0];<br />
    <br />
    if (_status == 0)<br />
    {<br />
        var _surface = _data[1];<br />
    <br />
        draw_surface(_surface, x, y);<br />
    }
  </p>
  <p>上面的代码调用 <span class="inline">video_draw()</span> ，并检查返回的状态是否为0，意味着视频正在播放。在这种情况下，它得到表面ID，并在实例的位置上画出它。这只对RGBA视频有效。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>返回。<a data-xref="{title}" href="Videos.htm">视频播放</a></div>
        <div>下一步。<a data-xref="{title}" href="YUV_Videos.htm">YUV视频</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
video_draw
-->
  <!-- TAGS
video_draw
-->
</body>
</html>