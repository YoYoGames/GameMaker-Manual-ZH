<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>gpu_set_blendmode_ext_sepalpha</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference for the function gpu_set_blendmode_ext_sepalpha" />
  <meta name="rh-index-keywords" content="gpu_set_blendmode_ext_sepalpha,bm_zero,bm_one,bm_src_colour,bm_inv_src_colour,bm_src_alpha,bm_inv_src_alpha,bm_dest_alpha,bm_inv_dest_alpha,bm_dest_colour,bm_inv_dest_colour,bm_src_alpha_sat,bm_src_color,bm_inv_src_color,bm_dest_color,bm_inv_dest_colour" />
  <meta name="search-keywords" content="gpu_set_blendmode_ext_sepalpha,bm_zero,bm_one,bm_src_colour,bm_inv_src_colour,bm_src_alpha,bm_inv_src_alpha,bm_dest_alpha,bm_inv_dest_alpha,bm_dest_colour,bm_inv_dest_colour,bm_src_alpha_sat,bm_src_color,bm_inv_src_color,bm_dest_color,bm_inv_dest_colour" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>gpu_set_blendmode_ext_sepalpha</h1>
  <p>当<span data-keyref="GameMaker Name">GameMaker</span>要绘制一个像素时，有一个源颜色（我们要绘制的像素的颜色）和一个目标颜色（我们要绘制的像素中已经存在的颜色），所以在确定像素的新颜色时，源和目标颜色是根据所选择的混合模式计算的。颜色的每个分量都被存储为0到1之间的浮点值，新颜色的计算方法是将源颜色的每个分量乘以某个系数，将目标颜色的每个分量乘以某个其他系数，然后将结果逐个分量相加。</p>
  <p>这个函数允许你设置不同的组件部分，这些部分应该被因子化以创建一个自定义混合模式，为RGB组件和Alpha组件选择不同的混合模式因子的不同部分。所以 &quot;src &quot;和 &quot;dest &quot;参数将使用前3个混合模式值（RGB），&quot;alphasrc &quot;和 &quot;alphadest &quot;参数将采取混合模式系数的最后一部分。例如，如果你把RGB源设置为 <span class="inline">bm_zero</span> ，那么将使用（0，0，0）。如果你将Alpha源设置为bm_one，那么将使用(1)，给出最终的源混合模式为(0, 0, 0, 1)。</p>
  <p>下图显示了每种混合模式的RGBA值，其中（Rs, Gs, Bs, As）被认为是源值，（Rd, Gd, Bd, Ad）是目的值。在这个函数中使用时，可使用的11个常数可以是源值，也可以是目的值（或两者）。</p>
  <table>
    <tbody>
      <tr>
        <th>恒定</th>
        <th>混合系数（红、绿、蓝、Alpha）。</th>
      </tr>
      <tr>
        <td><span class="notranslate">bm_zero</span></td>
        <td>(0, 0, 0, 0)</td>
      </tr>
      <tr>
        <td><span class="notranslate">bm_one</span></td>
        <td>(1, 1, 1, 1)</td>
      </tr>
      <tr>
        <td><span class="notranslate">bm_src_colour</span></td>
        <td>(Rs, Gs, Bs, As)</td>
      </tr>
      <tr>
        <td><span class="notranslate">bm_inv_src_colour</span></td>
        <td>(1-Rs, 1-Gs, 1-Bs, 1-As)</td>
      </tr>
      <tr>
        <td><span class="notranslate">bm_src_alpha</span></td>
        <td>(如、如、如、如)</td>
      </tr>
      <tr>
        <td><span class="notranslate">bm_inv_src_alpha</span></td>
        <td>(1-As, 1-As, 1-As, 1-As)</td>
      </tr>
      <tr>
        <td><span class="notranslate">bm_dest_alpha</span></td>
        <td>(广告、广告、广告、广告)</td>
      </tr>
      <tr>
        <td><span class="notranslate">bm_inv_dest_alpha</span></td>
        <td>(1-Ad, 1-Ad, 1-Ad, 1-Ad)</td>
      </tr>
      <tr>
        <td><span class="notranslate">bm_dest_colour</span></td>
        <td>(Rd, Gd, Bd, Ad)</td>
      </tr>
      <tr>
        <td><span class="notranslate">bm_inv_dest_colour</span></td>
        <td>(1-Rd, 1-Gd, 1-Bd, 1-Ad)</td>
      </tr>
      <tr>
        <td><span class="notranslate">bm_src_alpha_sat</span></td>
        <td>(f, f, f, 1) 其中f = min(As, 1-Ad)</td>
      </tr>
    </tbody>
  </table>
  <p class="note"><b>重要的是!</b>没有启用WebGL的HTML5将<b>无法</b>正确显示使用以下模式。</p>
  <ul class="colour" style="padding-left: 120px">
    <li><span class="inline">bm_src_colour</span></li>
    <li><span class="inline">bm_inv_src_colour</span></li>
    <li><span class="inline">bm_dest_colour</span></li>
    <li><span class="inline">bm_inv_dest_colour</span></li>
    <li><span class="inline">bm_src_alpha_sat</span></li>
  </ul>
  <p> </p>
  <p>请注意，你可以为这个函数提供四个单独的参数，也可以提供一个参数数组（如由函数 <a href="gpu_get_blendmode_ext_sepalpha.htm"><span class="inline">gpu_get_blendmode_ext_sepalpha()</span></a>所返回的参数）。如果提供的是一个数组，它应该有以下四个元素。</p>
  <ul class="colour">
    <li>[0] = 源混合模式减去α成分（默认为 <span class="inline">bm_src_alpha</span> （As，As，As））。</li>
    <li>[1] = 目的地混合模式减去α成分（默认为 <span class="inline">bm_inv_src_alpha</span> （1-As, 1-As, 1-As））。</li>
    <li>[2] = 源阿尔法分量（默认为 <span class="inline">bm_src_alpha</span> （As））。</li>
    <li>[3] = 目的地α成分（默认为 <span class="inline">bm_inv_src_alpha</span> （1-As））。</li>
  </ul>
  <p>为了帮助你从混合模式中获得最大的收益，并帮助理解它们是如何工作的，以及它们是如何影响绘制在屏幕上的最终图像的，我们建议你阅读以下指南。</p>
  <ul class="colour">
    <li><a href="../../../../Additional_Information/Guide_To_Using_Blendmodes.htm">Blendmodes使用指南</a></li>
  </ul>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">gpu_set_blendmode(src, dest, alphasrc, alphadest);</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>类型</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="notranslate">src</span></td>
        <td><span data-keyref="Type_Constant_Draw_Blend_Mode_Factor">混合模式系数常数</span></td>
        <td><span class="notranslate">Source blend mode factor for RGB (see constants above).</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">dest</span></td>
        <td><span data-keyref="Type_Constant_Draw_Blend_Mode_Factor">混合模式系数常数</span></td>
        <td><span class="notranslate">Destination blend mode factor for RGB (see constants above)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">alphasrc</span></td>
        <td><span data-keyref="Type_Constant_Draw_Blend_Mode_Factor">混合模式系数常数</span></td>
        <td><span class="notranslate">Source blend mode factor Alpha (see constants above).</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">alphadest</span></td>
        <td><span data-keyref="Type_Constant_Draw_Blend_Mode_Factor">混合模式系数常数</span></td>
        <td><span class="notranslate">Destination blend mode factor Alpha (see constants above)</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var bm = gpu_get_blendmode_ext_sepalpha();<br />
    bm[0] = bm_src_alpha;<br />
    bm[1] = bm_inv_src_alpha;<br />
    gpu_set_blendmode_ext_sepalpha(bm);</p>
  <p>上面的代码创建了一个本地数组，并获得了当前的扩展混合模式与单独的alpha值。然后对这个数组进行操作并返回，以设置混合模式。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">背面。<a href="GPU_Control.htm">GPU控制</a></div>
        <div style="float:right">下一步。 <a href="gpu_set_colourwriteenable.htm"><span class="notranslate">gpu_set_colourwriteenable</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
gpu_set_blendmode_ext_sepalpha
bm_zero
bm_one
bm_src_colour
bm_inv_src_colour
bm_src_alpha
bm_inv_src_alpha
bm_dest_alpha
bm_inv_dest_alpha
bm_dest_colour
bm_inv_dest_colour
bm_src_alpha_sat
-->
  <!-- TAGS
gpu_set_blendmode_ext_sepalpha
-->
</body>
</html>