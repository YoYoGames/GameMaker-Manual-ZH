<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>表面_深度_停用</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference for surface_depth_disable" />
  <meta name="rh-index-keywords" content="surface_depth_disable" />
  <meta name="search-keywords" content="surface_depth_disable" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>表面_深度_停用</h1>
  <p>这个功能使<i>所有</i>在禁用后创建的曲面的自动深度<span class="notranslate">buffer</span> 。通常情况下，所有的表面都有深度<span class="notranslate">buffers</span> ，所以如果你对它们绘制3D<span class="notranslate">objects</span> ，那么它就会按深度正确排序，以保持对表面的渲染和对背面的渲染之间的功能一致。
    为了保持对表面的渲染和对背面的渲染之间的功能对等<span class="notranslate">buffer</span> ，然而分配深度<span class="notranslate">buffers</span> ，基本上会使表面所需的内存量增加一倍，这可能是一个过度和不必要的开销。
    特别是当你的游戏是非常密集的内存时，而对于2D游戏来说，它们通常是不需要的。</p>
  <p>要使用这个函数，你要<i>在</i>创建曲面<i>之前</i>调用它，然后你可以在之后再启用它（如果需要）。所有在禁用深度<span class="notranslate">buffer</span> 的情况下创建的曲面在被绘制时将不再使用深度<span class="notranslate">buffer</span> ，这导致
    绘制的东西具有相同的深度。下面的图片说明了这个实际情况。</p>
  <p><img>在上图中，我们正在用3D的<span class="notranslate">vertex</span> <span class="notranslate">buffer</span> ，画一个长方形和一个三角形。红色三角形的
    红色三角形的坐标位于绿色矩形的后面，但绘制三角形的代码是<i>在</i>矩形的代码<i>之后</i>调用的，当启用深度<span class="notranslate">buffer</span> ，三角形仍然被绘制在矩形的后面
    因为三维深度得到了尊重。然而，当我们禁用表面的深度<span class="notranslate">buffer</span> ，只有代码的顺序被尊重，所以三角形被画在了矩形上。</p>
  <p class="note"><b>注意</b>：为了在使用曲面时正确保留三维的深度，不仅要启用深度<span class="notranslate">buffer</span> ，还要启用z-writing和z-testing。参见函数 <a href="../GPU_Control/gpu_get_ztestenable.htm"><span class="inline"><span style="font-size:14px;">gpu_set_ztestenable()</span></a>    和 <a href="../GPU_Control/gpu_get_zwriteenable.htm"><span class="inline"><span style="font-size:14px;">gpu_set_zwriteenable()</span></a>获取更多信息。</p>
  <p class="note"><b>注意</b>：如果你的游戏是100%的2D，或者你知道你不需要表面深度<span class="notranslate">buffer</span> ，那么只需在游戏开始时调用这个函数一次，禁用<span class="notranslate">buffer</span> ，应该就可以了。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">surface_depth_disable(disable);</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th><th>类型</th>
        <th>描述</th>
     </tr>
      <tr>
        <td><span class="notranslate">disable</span></td><td><span data-keyref="Type_Bool"></span></td>
        <td><span class="notranslate">If set to <span class="inline">true</span> 创建的表面将禁用深度缓冲区。</td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_Void"></span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var _depth_setting = surface_get_depth_disable();<br/> surface_depth_disable(false);
    <br/> surface_with_depth = surface_create(room_width, room_height);<br/> surface_depth_disable(true);
    <br/> surface_without_depth = surface_create(room_width, room_height);<br/> surface_depth_disable(_depth_setting);
  </p>
  <p>上面的代码将当前的深度<span class="notranslate">buffer</span> ，然后创建两个表面，一个启用了深度缓冲，一个没有，然后再恢复原来的设置。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">背面。<a href="Surfaces.htm">表面</a></div>
        <div style="float:right">下一步。 <a href="surface_get_height.htm"><span class="notranslate">surface_get_height</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
surface_depth_disable
-->
  <!-- TAGS
surface_depth_disable
-->
</body>
</html>