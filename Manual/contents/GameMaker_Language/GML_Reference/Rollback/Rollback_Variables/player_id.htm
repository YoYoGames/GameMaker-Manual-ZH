<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>玩家_id</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../../assets/css/default.css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="template" content="../../../../assets/masterpages/Manual_Keyword_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="condition-tags" content="Export:Beta" />
  <meta name="rh-index-keywords" content="player_id" />
  <meta name="search-keywords" content="player_id" />
</head>
<body>
  <h1>玩家_id</h1>
  <p>当你使用 <a href="../Rollback_Functions/rollback_define_player.htm"><span class="inline">rollback_define_player()</span></a>来定义一个球员<span class="notranslate">object</span> ，系统会自动为每个球员创建一个该<span class="notranslate">object</span> 的实例。该<span class="notranslate">object</span> 的每个实例都会得到 <span class="inline">player_id</span> 变量，该变量存储该球员的ID。</p>
  <p>这个ID从0开始，最初是主机本身。任何1以上的玩家都是加入游戏的 &quot;同伴&quot;。</p>
  <p>如果你不使用 <span class="inline">rollback_define_player()</span> ，那么这个变量将不会为任何<span class="notranslate">objects</span> 。在这种情况下，玩家实例和他们的ID必须被手动管理，正如在<a data-xref="{text}" href="../Rollback_System.htm#h1">定义玩家对象</a>中所解释的。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">player_id;</p>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_Real"><a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">Real</a></span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">// Create event<br />
    if (player_id == 0)<br />
    {<br />
        x = 300;<br />
    }<br />
    else if (player_id == 1)<br />
    {<br />
        x = 500;<br />
    }</p>
  <p>上面的代码根据播放器实例的ID来改变它的X位置。</p>
  <p>你也可以用这个ID作为数组索引，例如，存储所有球员的分数。</p>
  <p class="code">// Step event<br />
    var _coin = instance_place(x, y, obj_coin);<br />
    if (_coin != noone)<br />
    {<br />
        obj_game.scores[player_id]++;<br />
        instance_destroy(_coin);<br />
    }<br />
    <br />
    // Draw event<br />
    var _my_score = obj_game.scores[player_id];<br />
    draw_text(x, y, _my_score);
  </p>
  <p>上面的Step事件代码在<span class="inline2">obj_game</span>中的一个数组中的玩家与硬币相撞时，增加了玩家的分数。然后，该硬币实例被销毁。</p>
  <p>上面的Draw事件代码从同一个数组中检索玩家的分数，并画出其值。</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>回来。<a data-xref="{title}" href="Rollback_Variables.htm">回滚变量</a></div>
        <div>下一页:<a data-xref="{title}" href="player_local.htm">player_local</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
player_id
-->
  <!-- TAGS
player_id
-->
</body>
</html>