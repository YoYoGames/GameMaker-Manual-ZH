<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>回滚限制条件</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="template" content="../../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="condition-tags" content="Export:Beta" />
</head>
<body>
  <h1>回滚限制条件</h1>
  <p>回滚系统有一些你应该注意的限制。破坏任何这些约束条件都会导致<a data-xref="{text}" href="Rollback_System.htm#h">Sync Test</a>抛出一个错误，让你知道哪里出了问题。</p>
  <h2>客房</h2>
  <p>只要所有玩家都连接在一起，你就可以在多人游戏进行时改变<span class="notranslate">rooms</span> 。</p>
  <p>改变<span class="notranslate">room</span> ，将导致游戏再次运行其同步过程。</p>
  <p>当一个<span class="notranslate">objects</span> ，被管理的<span class="notranslate">room</span> 的数据将<strong>不会 </strong>自动被携带过来。你可以通过使用全局变量、持久化的<span class="notranslate">object</span> ，或将本地播放器的信息保存到文件中，来手动携带它。</p>
  <p>使用这些选项，你可以在一个<span class="notranslate">room</span> 结束前保存玩家的信息，并在新的<span class="notranslate">room</span> 中创建玩家实例时将其应用回来。</p>
  <h2>活动顺序</h2>
  <p>当一个多人游戏开始时，以下事件将按照给定的顺序运行。</p>
  <ul class="colour">
    <li><a data-xref="{text}" href="../../../The_Asset_Editors/Object_Properties/Other_Events.htm#p">房间开始</a></li>
    <li>为<a href="Rollback_Functions/rollback_define_player.htm">定义的球员</a><strong>创建</strong>事件</li>
    <li><a data-xref="{text}" href="Rollback_Events.htm#h">回滚开始</a>
      <ul>
        <li><span class="inline2">rollback_event_param.first_start</span>将为<span class="inline2">true</span>。</li>
      </ul>
    </li>
  </ul>
  <p>当你在多人游戏中改变<span class="notranslate">room</span> ，以下事件将按照给定的顺序运行。</p>
  <ul class="colour">
    <li><a data-xref="{text}" href="../../../The_Asset_Editors/Object_Properties/Other_Events.htm#p1">房间尽头</a></li>
    <li>为<a href="Rollback_Functions/rollback_define_player.htm">确定的球员 </a><strong>清理</strong>活动 </li>
    <li><a data-xref="{text}" href="../../../The_Asset_Editors/Object_Properties/Other_Events.htm#p">房间开始</a></li>
    <li>为<a href="Rollback_Functions/rollback_define_player.htm">定义的球员</a><strong>创建</strong>事件</li>
    <li><a data-xref="{text}" href="Rollback_Events.htm#h">回滚开始</a>
      <ul>
        <li><span class="inline2">rollback_event_param.first_start</span>将为<span class="inline2">假</span>。</li>
      </ul>
    </li>
  </ul>
  <h2>销毁事件</h2>
  <p>一个实例的<strong>Destroy</strong>事件通常在它被销毁后立即运行，例如，在调用<span class="inline"><a href="../Asset_Management/Instances/instance_destroy.htm">instance_destroy()</a></span> 。然而，在一个多人游戏中，该事件可能不会立即运行。</p>
  <p>一个 <span class="inline">instance_destroy()</span> 的调用很容易被错误的预测所运行，这意味着当收到负责任的玩家的正确数据时，实例的销毁很快就会被回滚。</p>
  <p>由于这个原因，一个实例的Destroy事件只有在确认它应该被销毁的时候才会被调用。这意味着在玩家屏幕上的实例被销毁时，它的 "销毁 "事件被调用时可能会有一点滞后。</p>
  <p>如果你想在实例被销毁的同一帧中，在客户端的屏幕上发生一些事情，建议创建一个自定义的函数，并与 <span class="inline">instance_destroy()</span> 一起调用。</p>
  <p>这也适用于在一个被销毁的实例上运行的<strong>Clean Up</strong>事件。</p>
  <h2>国家管理</h2>
  <p>Rollback Multiplayer在客户端之间管理你的游戏的 &quot;状态&quot;，其中包括被管理的实例和它们的变量。在回滚系统预测错误的情况下，你的游戏的这种管理部分能够被回滚。</p>
  <p>当你创建或销毁一个托管实例，或修改一个托管实例中的任何属性/变量时，你正在更新你的游戏状态。这个状态<strong>不会</strong>被发送给其他玩家，因为只有<a href="Rollback_Functions/rollback_define_input.htm">输入</a>才是所有客户端共享的。</p>
  <p>在管理你的游戏状态方面有一些限制，你应该遵循，以确保玩家之间的适当同步。</p>
  <h3 id="h1">回滚开始前的状态</h3>
  <p>你必须确保每个玩家以相同的游戏状态开始。这意味着，<a href="Rollback_Events.htm">当回滚开始</a>事件触发时，也就是游戏真正开始时，关于你的游戏和它的管理实例的一切都必须对所有玩家相同。</p>
  <p>你可以在这之前为你管理的实例运行任何创建或设置代码，只要它是以完全相同的方式为所有客户完成的。要知道游戏是否已经开始，可以使用<span class="inline"><a data-xref="{title}" href="Rollback_Variables/rollback_game_running.htm">rollback_game_running</a></span> 。</p>
  <p>你可以利用你的开始/加入调用和<a href="Rollback_Events.htm">回滚开始</a>事件之间的时间，为等待的玩家显示一个加载屏幕。</p>
  <p>在<a href="Rollback_Functions/rollback_leave_game.htm">离开游戏</a>时，玩家会返回到相同的状态，这意味着使用<span class="inline"><a data-xref="{title}" href="Rollback_Variables/rollback_game_running.htm">rollback_game_running</a></span> 是必要的，以确保任何游戏逻辑只在游戏连接时运行。</p>
  <h3>全球国家</h3>
  <p>你不能让全局变量影响你的游戏状态，因为它们在玩家之间是不同步的。所有需要的变量都应该在管理的<span class="notranslate">objects</span> 。</p>
  <h3>绘制事件状态</h3>
  <p>你不能改变Draw事件中的状态，它的目的必须保持只根据以前事件中设置的状态来绘制图形。在Draw事件中，所有被管理的<span class="notranslate">objects</span> ，所以你不能改变其中的任何变量，也不能创建或销毁被管理的<span class="notranslate">objects</span> 的实例。</p>
  <h3 id="h">时间变量</h3>
  <p>不要使用 <span class="inline"><a href="../Maths_And_Numbers/Date_And_Time/current_time.htm">current_time</a></span> 或 <span class="inline"><a href="../Maths_And_Numbers/Date_And_Time/get_timer.htm">get_timer()</a></span> 等变量/函数来影响游戏逻辑。我们提供了一个名为<span class="inline"><a data-xref="{title}" href="Rollback_Variables/rollback_current_frame.htm">rollback_current_frame</a></span> 的管理变量，可以用它来代替。它返回自多人游戏开始以来已经过去的帧数。</p>
  <p><a href="../Asset_Management/Instances/Instance_Variables/alarm.htm">报警事件</a>在管理的<span class="notranslate">objects</span> 中使用是安全的。</p>
  <p>还要确保你不使用<span class="inline"><a href="../Maths_And_Numbers/Date_And_Time/delta_time.htm">delta_time</a></span> ，因为它高度依赖运行游戏的系统，并且不能在玩家之间同步。</p>
  <h3>实例引用</h3>
  <p>存储在托管实例中的实例 ID 必须指向一个托管实例。</p>
  <p>如果一个被管理的实例有一个对非被管理的实例的引用，它将导致客户端状态之间的不一致，因为对该非被管理的实例的改变不能被管理和回滚。</p>
  <p>例如，如果你管理的<span class="inline2">obj_workstation</span>实例有一个对<span class="inline2">obj_anvil</span>实例的引用，<span class="inline2">obj_anvil</span>必须是一个管理的<span class="notranslate">object</span> 。</p>
  <h3>丢失的实例引用</h3>
  <p>一个被管理的实例中的变量，包含对另一个被管理的实例的引用，如果被引用的实例被销毁，它将被设置为<span class="inline2">未定义</span>。</p>
  <p>这意味着，如果一个<strong>持久化</strong>管理实例中的变量包含<strong>对非持久化</strong>管理实例的引用，当<span class="notranslate">room</span> ，该变量将被设置为<span class="inline2">未定义</span>，因为非持久化实例将停止存在。</p>
  <h2>随机数</h2>
  <p>随机数生成（RNG）状态在玩家之间进行管理，所以使用随机函数（如 <span class="inline">random()</span>, <span class="inline">choose()</span>, 等）进行游戏逻辑是完全安全的。回滚系统将确保每个玩家在游戏的同一时刻得到相同的随机数。</p>
  <p>抽奖事件使用一个单独的RNG状态。这意味着在抽奖事件中调用的随机函数不会影响其他事件的常规RNG状态，而且不同的玩家之间可能不一样。</p>
  <h3>种子</h3>
  <p>你不能使用 <span class="inline"><a href="../Maths_And_Numbers/Number_Functions/randomise.htm">randomise()</a></span> 或 <a href="../Maths_And_Numbers/Number_Functions/random_set_seed.htm"><span class="inline">random_set_seed()</span></a>来改变RNG的种子，因为它是由Rollback系统管理的。</p>
  <p>管理的RNG状态只在调用<a data-xref="{text}" href="Rollback_Events.htm#h">Rollback Start</a>时开始，也就是多人游戏开始时。你可以在那之前改变种子，这不会对过了开始点有任何影响。</p>
  <h2>进一步阅读</h2>
  <p>阅读以下几页，了解有关回滚系统的更多信息。</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="Rollback_Events.htm">回滚事件</a></li>
    <li><a data-xref="{title}" href="Creating_Multiplayer.htm">创建一个多人游戏</a></li>
    <li><a data-xref="{title}" href="Rollback_System.htm">回滚系统</a></li>
    <li><a data-xref="{title}" href="Defining_Inputs.htm">定义输入</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>回来。<a data-xref="{title}" href="Rollback_Multiplayer.htm">回滚多人游戏</a></div>
        <div>下一步。<a data-xref="{title}" href="Rollback_Events.htm">回滚事件</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
</body>
</html>