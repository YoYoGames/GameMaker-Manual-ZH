<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>定义输入</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="template" content="../../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="condition-tags" content="Export:Beta" />
</head>
<body>
  <h1>定义输入</h1>
  <p>输入是由Rollback系统管理的，因此它可以在玩家之间适当地同步。一个播放器的输入可以用 <span class="inline"><a href="Rollback_Functions/rollback_get_input.htm">rollback_get_input()</a></span> ，它返回一个包含该播放器的输入的<span class="notranslate">struct</span> 。</p>
  <h2>默认输入</h2>
  <p>默认情况下，你将在输入结构中得到以下键。</p>
  <p class="code"><strong>left</strong>, <strong>right</strong>, <strong>up</strong>, <strong>down</strong>, <strong>Z</strong>, <strong>X</strong>, <strong>C</strong>, <strong>space</strong></p>
  <p>方向性输入被映射到方向键上。</p>
  <h2>输入变体</h2>
  <p>每一个定义的键盘输入都是用 <span class="inline"><a href="../Game_Input/Keyboard_Input/keyboard_check.htm">keyboard_check()</a></span> ，它可以得到按键是否被按住。对于鼠标输入，它使用 <span class="inline"><a href="../Game_Input/Mouse_Input/mouse_check_button.htm">mouse_check_button()</a></span> 。</p>
  <p>对于每个定义的输入（默认或自定义），你也会得到使用 <span class="inline"><a href="../Game_Input/Keyboard_Input/keyboard_check_pressed.htm">keyboard_check_pressed()</a></span> 和 <span class="inline"><a href="../Game_Input/Keyboard_Input/keyboard_check_released.htm">keyboard_check_released()</a></span> （以及鼠标输入的对应函数）的变体。它们分别以后缀<strong>&quot;_pressed</strong>&quot;和<strong>&quot;_released</strong>&quot;添加。</p>
  <p>例如，对于 <span class="inline">space</span> 的输入，你也会得到 <span class="inline">space_pressed</span> 和 <span class="inline">space_released</span> 。</p>
  <h2 id="h">自定义控制</h2>
  <h3>界定</h3>
  <p>要定义你自己的输入，创建一个<span class="notranslate">struct</span> ，其中包含要使用的输入键和分配的常数，然后将其传入 <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_input()</a></span> 。这将覆盖本页面顶部提到的默认控件。</p>
  <p>你在左边定义你的输入名称（如<span class="inline2">fire</span>），并在右边分配一个输入（如<span class="inline2">mb_left</span>）。</p>
  <p class="code">// Before starting rollback game<br />
    rollback_define_input({<br />
        fire: mb_left,<br />
        interact: vk_space,<br />
        left: ord(&quot;A&quot;),<br />
        right: ord(&quot;D&quot;)<br />
    });</p>
  <p>现在调用<span class="inline"><a href="Rollback_Functions/rollback_get_input.htm">rollback_get_input()</a></span> ，只会返回这里定义的输入<span class="inline2">（开火</span>、<span class="inline2">互动</span>等），以及每个输入的<span class="inline2">*_pressed</span>和<span class="inline2">*_released</span>变体。</p>
  <p>对于<span class="notranslate">GML</span> Visual，使用<a data-xref="{title}" href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Define_Input.htm">定义输入（回滚）</a>。</p>
  <h3>常数</h3>
  <p>您可以为结构中的输入指定以下任何一种输入值。</p>
  <table>
    <colgroup>
      <col />
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th>输入类型</th>
        <th>价值</th>
        <th>描述</th>
      </tr>
      <tr>
        <td colspan="1" rowspan="2"><strong>键盘</strong></td>
        <td><span class="inline">vk_*</span> 常数</td>
        <td>使用这些常数来定义键盘按键。<a href="../Game_Input/Keyboard_Input/Keyboard_Input.htm">这里给出了</a>此类常量的列表。</td>
      </tr>
      <tr>
        <td><span class="inline">ord(&quot;&quot;)</span></td>
        <td>定义一个字母键，将其包裹在 <a href="../Strings/ord.htm"><span class="inline">ord()</span></a>.</td>
      </tr>
      <tr>
        <td><strong>游戏手柄</strong></td>
        <td><span class="inline">gp_*</span> 常数</td>
        <td>使用这些常数来定义游戏板输入（按钮和轴）。<a href="../Game_Input/GamePad_Input/Gamepad_Input.htm">这里给出了</a>一个此类常量的列表。</td>
      </tr>
      <tr>
        <td colspan="1" rowspan="7"><strong>鼠标</strong></td>
        <td><span class="inline">mb_*</span> 常数</td>
        <td>使用这些常数来定义鼠标按钮。<a href="../Game_Input/Mouse_Input/Mouse_Input.htm">这里给出了</a>一个此类常量的列表。<br>
          <br>
         <span class="note">注意</span>： <span class="inline">mb_any</span> 和 <span class="inline">mb_none</span> 不能被使用。
        </td>
      </tr>
      <tr>
        <td><span class="inline">m_axisx</span></td>
        <td>鼠标在<span class="notranslate">room</span> （使用<span class="inline"><a href="../Game_Input/Mouse_Input/mouse_x.htm">mouse_x</a></span> ）的X位置。</td>
      </tr>
      <tr>
        <td><span class="inline">m_axisy</span></td>
        <td>鼠标在<span class="notranslate">room</span> （使用<span class="inline"><a href="../Game_Input/Device_Input/device_mouse_y.htm">mouse_y</a></span> ）的Y位置。</td>
      </tr>
      <tr>
        <td><span class="inline">m_axisx_gui</span></td>
        <td>鼠标在GUI层上的X位置（用 <a href="../Game_Input/Device_Input/device_mouse_x_to_gui.htm"><span class="inline">device_mouse_x_to_gui()</span></a>).</td>
      </tr>
      <tr>
        <td><span class="inline">m_axisy_gui</span></td>
        <td>鼠标在GUI层上的Y位置（用 <a href="../Game_Input/Device_Input/device_mouse_y_to_gui.htm"><span class="inline">device_mouse_y_to_gui()</span></a>).</td>
      </tr>
      <tr>
        <td><span class="inline">m_scroll_up</span></td>
        <td><span class="inline">1</span> 如果鼠标滚轮正在向上滚动，否则 <span class="inline">0</span> </td>
      </tr>
      <tr>
        <td><span class="inline">m_scroll_down</span></td>
        <td><span class="inline">1</span> 如果鼠标滚轮正在向下滚动，否则 <span class="inline">0</span> </td>
      </tr>
    </tbody>
  </table>
  <h3>多重控制</h3>
  <p>你可以通过在一个数组中列出输入常数，为每个输入指定多个控件。</p>
  <p class="code">rollback_define_input({<br />
        fire:     [mb_left, ord(&quot;X&quot;)],<br />
        interact: [vk_space, ord(&quot;C&quot;)],<br />
        left:     [ord(&quot;A&quot;), vk_left],<br />
        right:    [ord(&quot;D&quot;), vk_right]<br />
    });</p>
  <p>在这个例子中，<span class="inline2">火灾</span>将由<span class="inline2">mb_left</span>和<span class="inline2">X</span>键触发，<span class="inline2">交互</span>将由<span class="inline2">vk_space</span>和<span class="inline2">C</span>键触发，以此类推。</p>
  <p class="code">var _input = rollback_get_input();<br />
    if (_input.fire)<br />
    {<br />
        // Runs when LMB or X is pressed<br />
    }</p>
  <p class="note"><span class="note">注意</span>你不能将同一个输入常数绑定到多个输入上，例如，一个特定的输入值（例如，<span class="inline2">mb_left</span>或<span class="inline2">ord(&quot;A&quot;)</span>）在整个输入中只能使用<strong>一次</strong> <span class="notranslate">struct</span> 。</p>
  <h2 id="h1">模拟输入</h2>
  <p>在本地测试时，你可能想为远程玩家定义临时输入，这样你就可以离线测试多人游戏性。</p>
  <p>你可以通过使用以下方法实现这一目标：为一个播放器定义模拟输入。 <a href="Rollback_Functions/rollback_define_mock_input.htm"><span class="inline">rollback_define_mock_input()</span></a>.例如，在调用上面的代码片段为所有球员定义 <span class="inline">fire</span>, <span class="inline">interact</span>, <span class="inline">left</span> 和 <span class="inline">right</span> 输入后，你可以专门为第二个球员定义一套单独的输入，你可以在同步测试中使用。</p>
  <p class="code">rollback_define_mock_input(1, {<br />
        fire: vk_control,<br />
        interact: vk_shift,<br />
        left: ord(&quot;J&quot;),<br />
        right: ord(&quot;L&quot;)<br />
    });</p>
  <p>这为玩家1（第二个玩家）定义了模拟输入，保持相同的输入名称，但分配不同的输入。这样，两个人就可以在同一台电脑上进行本地游戏。</p>
  <h2>进一步阅读</h2>
  <p>阅读以下几页，了解有关回滚系统的更多信息。</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="Rollback_Constraints.htm">回滚限制条件</a></li>
    <li><a data-xref="{title}" href="Rollback_Events.htm">回滚事件</a></li>
    <li><a href="Creating_Multiplayer.htm">创建一个多人游戏</a></li>
    <li><a data-xref="{title}" href="Rollback_System.htm">回滚系统</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>回头。<a data-xref="{title}" href="Rollback_Multiplayer.htm">回滚多人游戏</a></div>
        <div>下一步。<a data-xref="{title}" href="Rollback_Constraints.htm">回滚限制条件</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
</body>
</html>