<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>创建一个多人游戏</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Follow this tutorial to make your first multiplayer game" />
  <meta name="template" content="../../../assets/masterpages/Manual_Page.htt" />
  <meta name="condition-tags" content="Export:Beta" />
</head>
<body>
  <h1>创建一个多人游戏</h1>
  <p class="note">本页将带您了解创建第一个多人游戏的详细步骤。<br>
    <br>
    有关回滚系统的信息，请阅读<a data-xref="{title}" href="Rollback_System.htm">回滚系统</a>。<br>
    <br>
    有关所有回滚功能的细节，请阅读<a data-xref="{title}" href="Rollback_Functions/Rollback_Functions.htm">回滚功能</a>。
  </p>
  <h2>项目设置</h2>
  <p>开始一个新项目，并为你的播放器创建一个<span class="notranslate">sprite</span> <span class="notranslate">object</span> 。你可以导入一张图片或直接创建一个填充的正方形。</p>
  <p>创建两个对象。</p>
  <ul class="colour">
    <li><strong>obj_game</strong>。这将管理你的多人游戏。</li>
    <li><strong>obj_player</strong>。这将是你实际的玩家<span class="notranslate">object</span> 。每个连接的玩家将有他们自己的实例，<span class="notranslate">object</span> ，他们可以控制。<br>
      <br>
      将你的播放器<span class="notranslate">sprite</span> 赋给播放器<span class="notranslate">object</span> 。
    </li>
  </ul>
  <p><img class="center_shadow" height="220" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/rollback_assets.png" width="196" /></p>
  <p>继续前进，将<strong>obj_game</strong>放入<span class="notranslate">room</span> 。<strong>不要</strong>放置<strong>obj_player</strong>，因为它将被自动创建。</p>
  <h2>开始游戏</h2>
  <p>为<strong>obj_game</strong>添加Create事件，并在其中写入以下代码。</p>
  <p class="note"><span class="note">注意</span>如果你使用<span class="notranslate">GML</span> Visual，请使用相应的<a href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Rollback_Actions.htm">回滚动作</a>。</p>
  <p class="code">rollback_define_player(obj_player);<br />
    <br />
    var _joined = rollback_join_game();<br />
    <br />
    if (!_joined)<br />
    {<br />
        rollback_create_game(2);<br />
    }
  </p>
  <p>它首先定义了要使用的玩家<span class="notranslate">object</span> ，并尝试用以下方式加入游戏 <a href="Rollback_Functions/rollback_join_game.htm"><span class="inline">rollback_join_game()</span></a>.如果系统发现有游戏可以加入，该函数返回 <span class="inline">true</span> （意味着你在正确的URL上）。</p>
  <p>如果游戏不能被加入，则返回 <span class="inline">false</span> 。当返回值为 <span class="inline">false</span> ，我们就调用 <a href="Rollback_Functions/rollback_create_game.htm"><span class="inline">rollback_create_game()</span></a>来主持我们自己的游戏。在那里我们指定游戏应该允许最多2个玩家。</p>
  <p class="note"><span class="note">注意</span>目前，你只能为最多4名玩家创建游戏。</p>
  <p>上面的代码将在<span class="notranslate">room</span> 的左上角创建两个<strong>obj_player</strong>的实例，但它们还不能被控制。</p>
  <p><img class="center_shadow" height="335" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/rollback_player_spawned.png" width="447" /></p>
  <h2>移动球员</h2>
  <p>输入由Rollback系统管理，并在玩家之间自动同步。</p>
  <p>在你的播放器<span class="notranslate">object</span> ，调用 <span class="inline"><a href="Rollback_Functions/rollback_get_input.htm">rollback_get_input()</a></span> ，得到一个包含所有默认输入的<span class="notranslate">struct</span> ，其内容如下。</p>
  <p class="note"><span class="inline"><strong>left</strong>, <strong>right</strong>, <strong>up</strong>, <strong>down</strong>, <strong>Z</strong>, <strong>X</strong>, <strong>C</strong>, <strong>space</strong></span><br>
    <br>
    <em>这些表明钥匙是否被持有。</em> <span class="inline">*<strong>_pressed</strong></span> <em>和 </em><span class="inline">*<strong>_released</strong></span> <em>的变体也被提供。</em>
  </p>
  <p>要定义你自己的输入，请看<a data-xref="{title}" href="Defining_Inputs.htm">定义输入</a>。</p>
  <p>现在在播放器的创建和步骤事件中设置以下代码。</p>
  <p class="code">// Create Event<br />
    move_speed = 5;<br />
    <br />
    // Step Event<br />
    var _input = rollback_get_input();<br />
    <br />
    if (_input.left) x -= move_speed;<br />
    if (_input.right) x += move_speed;<br />
    if (_input.up) y -= move_speed;<br />
    if (_input.down) y += move_speed;
  </p>
  <p>这就用玩家的速度设置了一个变量，在Step事件中，获得输入<span class="notranslate">struct</span> 。</p>
  <p>基于所持的每个方向键，它在相应的轴上移动实例，例如，按左键减少X，按上键减少Y，以此类推。</p>
  <h2>玩家位置</h2>
  <p>在我们测试之前，让我们确保玩家在特定的位置被创建，而不是在<span class="notranslate">room</span> 的左上角生成。</p>
  <p>在创建事件中，你的球员<span class="notranslate">object</span> ，这样写。</p>
  <p class="code">if (player_id == 0)<br />
    {<br />
        x = 300;<br />
    }<br />
    else if (player_id == 1)<br />
    {<br />
        x = room_width - 300;<br />
    }<br />
    <br />
    y = room_height / 2;
  </p>
  <p><span class="inline"><a data-xref="{title}" href="Rollback_Variables/player_id.htm">player_id</a></span> 是一个内置的实例变量，存储播放器实例的ID。</p>
  <p>由于我们的游戏有两个玩家，我们的第一个玩家将拥有ID<strong>0</strong>，第二个玩家将拥有ID<strong>1</strong>。</p>
  <p>在此基础上，我们要改变球员的初始X位置。两者的Y位置是一样的。</p>
  <p>现在运行游戏，你会看到两个球员，你可以控制第一个球员。</p>
  <p><video class="center" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/rollback_two_players_synctest.mp4" width="856" height="420" controls="" align="center"></video></p>
  <p>第二个玩家自己在无规律地移动，这是回滚系统的一个特点。它每一帧自动为所有定义的输入提供随机值，作为对你的游戏的基本测试形式。</p>
  <p>你可以通过调用以下命令来禁用自动随机移动 <a href="Rollback_Functions/rollback_use_random_input.htm"><span class="inline">rollback_use_random_input(false)</span></a>或为其他玩家<a href="Defining_Inputs.htm#h1">设置自己的 &quot;模拟 &quot;输入</a>。</p>
  <h2>在线连接</h2>
  <p>你的基本的多人游戏例子已经完成了，它已经准备好被带到互联网上了。</p>
  <p>默认情况下，系统在<strong>同步测试</strong>模式下启动，这是你离线测试游戏的方式。要启用在线功能， <span class="inline"><a href="Rollback_Functions/rollback_create_game.htm">rollback_create_game()</a></span> 的第二个参数需要设置为 <span class="inline">false</span> （禁用同步测试）。</p>
  <p>还需要设置一个默认区域，这是第三个参数。见。<a data-xref="{text}" href="Rollback_Functions/rollback_create_game.htm#h">获取区域名称</a></p>
  <p class="code">// obj_game: Create event<br />
    rollback_define_player(obj_player);<br />
    <br />
    var _joined = rollback_join_game();<br />
    <br />
    if (!_joined)<br />
    {<br />
        rollback_create_game(2, false, &quot;Europe&quot;); // &lt;- disable Sync Test, set default region<br />
    }
  </p>
  <p>在你的Opera GX浏览器中，登录<a href="https://gx.games">GX.games。</a></p>
  <p>通过<strong>Opera GX</strong>目标运行游戏。当回滚系统开始时，它会创建一个新的 &quot;房间&quot;：不是<span class="notranslate">GameMaker</span> <span class="notranslate">room</span> <span class="notranslate">asset</span> ，而是一个<strong>虚拟房间</strong>，玩家将在其中一起游戏。</p>
  <h2>邀请玩家</h2>
  <p>当你的游戏开始时，你不会立即看到玩家的实例。相反，系统会等待所有玩家加入后再开始游戏。</p>
  <p class="note"><span class="tip">提示</span>你可以在玩家加入之前就开始游戏，调用 <a href="Rollback_Functions/rollback_start_game.htm"><span class="inline">rollback_start_game()</span></a>.如果你调用 <a href="Rollback_Functions/rollback_use_manual_start.htm"><span class="inline">rollback_use_manual_start()</span></a>则游戏将等待你手动启动，即使所有玩家都已加入。</p>
  <p>在等待过程中，你会看到你的游戏下面有一个<strong>&quot;复制分享网址</strong>&quot;按钮。如果你没有看到这个按钮，请向下滚动。</p>
  <p><img>这将复制一个链接到你的游戏，你可以将其粘贴到另一个浏览器窗口，作为第二个玩家加入。</p>
  <p>你需要让两个浏览器窗口同时可见，否则窗口被隐藏的玩家会超时，你的游戏也会结束。</p>
  <p>一旦两个游戏实例连接并同步，你将能够通过其浏览器窗口控制每个玩家。</p>
  <p><img>你可以通过拖动和调整大小并排打开两个窗口。</p>
  <p>在测试过程中，你会在游戏的左上角看到调试信息，给你提供关于游戏状态的信息。你可以通过调用 <span class="inline"><a href="Rollback_Functions/rollback_display_events.htm">rollback_display_events(false)</a></span> 来禁用它。</p>
  <h2 id="h">离开一个房间</h2>
  <p>呼叫 <a href="Rollback_Functions/rollback_leave_game.htm"><span class="inline">rollback_leave_game()</span></a>让玩家离开<span class="notranslate">room</span> 。请阅读<a href="Rollback_Functions/rollback_leave_game.htm">功能页面</a>，了解其使用的详细情况。</p>
  <h2>游戏逻辑</h2>
  <p>当所有玩家都加入后，回滚系统会自动创建玩家实例，只要你使用的是 <a href="Rollback_Functions/rollback_define_player.htm"><span class="inline">rollback_define_player()</span></a>.</p>
  <p>然而，它仍然允许你在游戏开始前运行任何其他代码，这意味着你必须注意只有在所有玩家都加入后才启动你的核心游戏逻辑。</p>
  <p>例如，如果你使用警报器生成敌人的实例，那么只有在<a data-xref="{text}" href="Rollback_Events.htm#h">回滚开始</a>事件触发后才启动该警报。</p>
  <h2>重大事件</h2>
  <p>你游戏中的重大事件，如一个玩家获胜并结束关卡，应该在所有玩家都同步的情况下进行。否则，一个错误的预测可能会错误地使一个玩家获胜，当它最终回滚时就会显得很奇怪。</p>
  <p>请参阅 <span class="inline"><a href="Rollback_Functions/rollback_sync_on_frame.htm">rollback_sync_on_frame()</a></span> 上的例子，以正确做到这一点。</p>
  <h2>进一步阅读</h2>
  <p>你的第一场多人游戏现在完成了!</p>
  <p>阅读以下几页，了解回滚系统的所有情况。</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="Rollback_System.htm">回滚系统</a></li>
    <li><a data-xref="{title}" href="Defining_Inputs.htm">定义输入</a></li>
    <li><a data-xref="{title}" href="Rollback_Constraints.htm">回滚限制条件</a></li>
    <li><a data-xref="{title}" href="Rollback_Events.htm">回滚事件</a></li>
    <li><a data-xref="{title}" href="Rollback_Preferences.htm">玩家偏好</a></li>
  </ul>
  <p>你可以用以下方法将聊天添加到你的游戏中 <a href="Rollback_Functions/rollback_chat.htm"><span class="inline">rollback_chat()</span></a>.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>回头。<a data-xref="{title}" href="Rollback_Multiplayer.htm">回滚多人游戏</a></div>
        <div>下一步。<a data-xref="{title}" href="Rollback_System.htm">回滚系统</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
</body>
</html>