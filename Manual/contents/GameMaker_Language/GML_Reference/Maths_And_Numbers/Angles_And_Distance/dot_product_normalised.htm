<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>点_产品_正常化</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for dot_product_normalised" />
  <meta name="rh-index-keywords" content="dot_product_normalised,dot_product_normalized" />
  <meta name="search-keywords" content="dot_product_normalised,dot_product_normalized" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>点_产品_正常化</h1>
  <p>点积是一个表达两个向量之间角度关系的数值，通过将两个向量相乘，然后将结果相加而得到。点积 &quot;这一名称来自于中间的点&quot;-&quot;
    衍生出来的（另一个名称 &quot;标量积 &quot;强调了结果的标量性质，而不是矢量性质），通常用来表示这种操作。</p>
  <p>实际的数学公式可以这样写。</p>
  <p><img>因此，在二维空间中，向量 <span class="inline">a[x1,y1]</span> 和 <span class="inline">b[x2,2]</span> 的点积是 <span class="inline">x1x2 + y1y2</span> ，这意味着<span data-keyref="GameMaker Name">GameMaker</span>中的点积计算方法是。</p>
  <p class="code">a · b = (x1*x2)+(y1*y2);</p>
  <p><i>归一化</i>点积是怎么回事？归一化点积已经被修正，使返回值在-1和1的范围内（更详细的信息见<a href="../../../../Additional_Information/Vectors.htm">矢量</a>一节），这在许多情况下是非常有用的，特别是在处理照明和其他三维功能时。</p>
  <p> </p>
  <h4><b>语法。</b></h4>
  <p class="code">dot_product_normalised(x1, y1, x2, y2)</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th><th>类型</th>
        <th>描述</th>
     </tr>
      <tr>
        <td><span class="notranslate">x1</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The x coordinate of the first vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">y1</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The y coordinate of the first vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">x2</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The x coordinate of the second vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">y2</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The y coordinate of the second vector.</span></td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_Real"></span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var x1, y1, x2, y2;<br/> x1 = lengthdir_x(1, image_angle);<br/> y1 = lengthdir_y(1, image_angle);<br/> x2 = o_Player.x - x;<br/> y2 = o_Player.y - y;<br/> if dot_product_normalised(x1, y1, x2, y2) &gt; 0 seen=true else seen=false;</p>
  <p>上面的代码用实例图像的角度创建了一个向量，然后得到玩家的向量<span class="notranslate">object</span> &quot;o_Player &quot;到自己身上。最后，它计算这两个向量的点积，如果它大于0，就把变量
    &quot;see &quot;为真，如果等于或小于0，则将其设置为 &quot;false&quot;。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Angles_And_Distance.htm">角度和距离</a></div>
        <div style="float:right">下一步。 <a href="dot_product_3d_normalised.htm"><span class="notranslate">dot_product_3d_normalised</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
dot_product_normalised
dot_product_normalized
-->
  <!-- TAGS
dot_product_normalised
-->
</body>
</html>