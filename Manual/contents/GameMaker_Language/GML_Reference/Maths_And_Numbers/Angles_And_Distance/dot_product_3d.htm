<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>点_产品_三维</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for dot_product_3d" />
  <meta name="rh-index-keywords" content="dot_product_3d" />
  <meta name="search-keywords" content="dot_product_3d" />
  <meta name="is_pure" content="true" />
</head>

<body>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>点_产品_三维</h1>
  <p>点积是一个表达两个向量之间角度关系的数值，通过将两个向量相乘，然后将结果相加而得到。点积 &quot;这一名称来自于中间的点&quot;-&quot;
    衍生出来的（另一个名称 &quot;标量积 &quot;强调了结果的标量性质，而不是矢量性质），通常用来表示这种操作。</p>
  <p>实际的数学公式可以这样写。</p>
  <p><img alt="Dot Product formula" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Maths/dot_product_image.png"/></p>
  <p>在2D中，向量 <span class="inline">a[x1,y1]</span> 和 <span class="inline">b[x2,y2]</span> 的点积是 <span class="inline">x1x2 + y1y2</span> ，所以在3D中，向量 <span class="inline">a[x1,y1,z1]</span> 和 <span class="inline">b[x1,y1,z1]</span> 的点积是 <span class="inline">x1x2 + y1y2 + z1z2</span> 。因此，<span data-keyref="GameMaker Name">GameMaker</span>中的dot_product_3d的计算方法是：。</p>
  <p class="code">a · b = (x1*x2) + (y1*y2) + (z1*z2);</p>
  <p>关于点积的奇怪之处在于它与输入向量形成的角度的关系，可以表示为：。</p>
  <p class="code">a · b = (length of a) * (length of b) * cos(angle)</p>
  <p>也就是说，两个向量的点积将等于这些向量之间的角度的余弦，乘以它们各自的长度。这里有一个图像来说明。</p>
  <p><img alt="Dot Product ilustration" class="center" height="143" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Maths/dot_product_image_2.png" width="406"/></p>
  <p class="note"><strong>注意</strong>：关于向量的更多信息，请看<a href="../../../../Additional_Information/Vectors.htm">这里</a>。</p>
  <p>现在我们可以从任何两个向量的点积结果中说明一些事情。</p>
  <ul class="colour">
    <li>如果a和b是垂直的（彼此成90度），点积的结果将是零，因为 <span class="inline">cos(ang)</span> 。</li>
    <li>如果a和b之间的角度小于90度，点积将是正的（大于零），因为 <span class="inline">cos(ang)</span> ，将是正的。</li>
    <li>如果a和b之间的角度大于90度，点积将是负的（小于零），因为 <span class="inline">cos(ang)</span> ，将是负的。</li>
  </ul>
  <p>那么，这对我们这些做游戏的人来说意味着什么呢？好吧，这种数学关系可以用在很多情况下，但最好的方法是建立一个实际的场景，自己看看发生了什么。最简单的方法之一
    一个最简单的方法是为敌人生成一个简单的 &quot;高度 &quot;检查，比如说，在一个平台游戏中，如果玩家在敌人的<i>法线</i>矢量和三维地面形成的平面之上，敌人就会 &quot;看到 &quot;玩家。</p>
  <p><img>基本上，我们从敌人那里得到垂直于地面的法线矢量，然后我们得到玩家与敌人的矢量。
    得到玩家与敌人的向量。然后我们将得到这些矢量的点积，如果结果是正的，玩家就在敌人地板平面的 &quot;上方&quot;，如果是负的，他就在下方。实际的代码是这样的
    在下面的例子中提供。</p>
  <p> </p>
  <h4><b>语法。</b></h4>
  <p class="code">dot_product_3d(x1, y1, z1, x2, y2, z2)</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th><th>类型</th>
        <th>描述</th>
     </tr>
      <tr>
        <td><span class="notranslate">x1</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The x coordinate of the first vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">y1</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The y coordinate of the first vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">z1</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The z coordinate of the first vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">x2</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The x coordinate of the second vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">y2</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The y coordinate of the second vector.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">z2</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The z coordinate of the second vector.</span></td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_Real"></span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var x1, y1, x2, y2;<br/> x1 = 0;<br/> y1 = 1;<br/> z1 = 0;<br/> x2 = o_Player.x - x;<br/> y2 = o_Player.y - y;<br/> z2 = o_Player.z - z; if dot_product_3d(x1, y1, z1, x2, y2, z2) &gt; 0 above=true else above=false;</p>
  <p>上面的代码沿着实例的y（向上）轴创建了一个法线向量，然后得到玩家的向量<span class="notranslate">object</span> &quot;o_Player &quot;到自己身上。最后，它计算这两个向量的点积，如果它大于tan 0，就把变量
    &quot;以上 &quot;为真，如果小于或等于0，则将其设置为 &quot;假&quot;。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Angles_And_Distance.htm">角度和距离</a></div>
        <div style="float:right">下一步。 <a href="dot_product_normalised.htm"><span class="notranslate">dot_product_normalised</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
dot_product_3d
-->
  <!-- TAGS
dot_product_3d
-->

</body></html>