<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>debug_get_callstack</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for debug_get_callstack" />
  <meta name="rh-index-keywords" content="debug_get_callstack" />
  <meta name="search-keywords" content="debug_get_callstack" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>debug_get_callstack</h1>
  <p>这个函数生成一个<span class="notranslate">strings</span> 的数组作为 &quot;callstack&quot;，其中当前的<span class="notranslate">script</span> 被列在第一位，然后是为了执行当前<span class="notranslate">scripts</span> 而运行的所有其他<span class="notranslate">script</span> 。确切的<span class="notranslate">string</span> 格式将根据所选择的目标平台而变化，但它大多有脚本/事件名称，然后是冒号：和行号，类似于这样。</p>
  <p class="code"><span class="inline">&quot;gml_Script_script2:1&quot;<br />
      &quot;gml_Script_script1:32&quot;<br />
      &quot;gml_Script_script0:64&quot;<br />
      &quot;gml_Object_object0_Create_0:1&quot;</span></p>
  <p>该函数允许传入一个可选的参数，即返回的callstack的最大深度。这个值是返回的数组中从当前<span class="notranslate">scripts</span> 开始包含的<span class="notranslate">script</span> 。如果没有指定这个参数，那么将返回完整的callstack。</p>
  <p>请注意，在列出调用栈后，返回的数组在其最后一个位置总是包含0，<span class="notranslate">scripts</span> 。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">debug_get_callstack([maxdepth])</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>类型</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="notranslate">[maxdepth]</span></td>
        <td><span data-keyref="Type_Real">真实的</span></td>
        <td><span class="notranslate"><span class="optional">OPTIONAL</span> 返回调用栈的最大深度</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_Array">Array</span></p>
  <p> </p>
  <h4><b>例子。</b></h4>
  <p class="code">if debug_mode<br />
    {<br />
        if keyboard_check(vk_escape)<br />
        {<br />
            var _a = debug_get_callstack(4);<br />
            for (var i = 0; i &lt; array_length_id(_a); ++i;)<br />
            {<br />
                show_debug_message(_a[i]);<br />
            }<br />
        }<br />
    }</p>
  <p>上面的代码检查是否启用了调试模式，如果是，则检查是否有按键被按住。在这种情况下，它会将当前的调用栈输出到控制台，最大深度为4。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Debugging.htm">调试</a></div>
        <div style="float:right">下一步。 <a href="exception_unhandled_handler.htm"><span class="notranslate">exception_unhandled_handler</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
debug_get_callstack
-->
  <!-- TAGS
debug_get_callstack
-->
</body>
</html>