<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>序列事件、时刻和广播信息</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different functions and variables associated with Sequence Events, Moments and Broadcast Messages" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Sequence Events,Sequence Momements,Sequence Messages,broadcast messages,event_create,event_destroy,event_clean_up,event_step,event_step_begin,event_step_end,event_async_system,event_broadcast_message" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>事件、时刻和广播信息</h1>
  <p>除了<a href="Sequences.htm">这里</a>为<span class="notranslate">sequence</span> <span class="notranslate">struct</span> 列出的所有属性外，你还有可能在<span class="notranslate">sequence</span> 中添加特殊的 &quot;行动 &quot;属性。有三种不同类型的 &quot;行动 &quot;属性可以被添加到<span class="notranslate">sequence</span> <span class="notranslate">object</span> ，即<b>事件</b>。<b>瞬间</b>和<b>广播信息</b>--每一种都在下面的章节中有更详细的解释。</p>
  <h2>序列事件</h2>
  <p>序列<span class="notranslate">objects</span> ，可以添加<b>事件</b>，这些事件类似于<span class="notranslate">object</span> <span class="notranslate">assets</span> 所用的事件。你分配给<span class="notranslate">sequence</span> <span class="notranslate">object</span> 的事件将以特定的顺序发生，可以是在<span class="notranslate">sequence</span> 生命周期的某个定义时刻发生一次，也可以是在<span class="notranslate">sequence</span> 运行的每一帧。在本节中，我们将讨论如何使用代码来处理这些事件，但也可以使用<a href="../../../../The_Asset_Editors/Sequences.htm">序列编辑器</a>来添加它们。请注意，这里列出的事件顺序不受<a class="glossterm" data-glossterm="弹头" href="#">播放头</a>方向的影响，即使<span class="notranslate">sequence</span> 向后播放，这些事件仍将按照下面的顺序运行。</p>
  <p>可用的事件有：。<b></b></p>
  <ul class="colour">
    <li><b>创建</b>：当在一个图层上创建一个<span class="notranslate">sequence</span> 实例时，就会触发这个。</li>
    <li><b>Destroy</b>：当一个图层上的<span class="notranslate">sequence</span> 实例被销毁时，这将被触发。</li>
    <li><b>清理</b>：当一个<span class="notranslate">sequence</span> 实例被垃圾回收时，就会触发这个。</li>
    <li><b>步骤</b>：就在通常的<span class="notranslate">object</span> 步骤事件之前被触发。<b>重要的是!</b>如果<span class="notranslate">sequence</span> 暂停了，那么这个事件将不会被触发，直到<span class="notranslate">sequence</span> 再次开始播放后的下一个步骤。</li>
    <li><b>开始步骤</b>：就在<span class="notranslate">object</span> begin-step事件之前被触发。<b>重要的是!</b>如果<span class="notranslate">sequence</span> 暂停了，那么这个事件将不会被触发，直到<span class="notranslate">sequence</span> 再次开始播放后的下一个步骤。</li>
    <li><b>结束步骤</b>：就在<span class="notranslate">object</span> 结束步骤事件之前被触发。<b>重要的是!</b>如果<span class="notranslate">sequence</span> 暂停了，那么这个事件将不会被触发，直到<span class="notranslate">sequence</span> 再次开始播放后的下一个步骤。</li>
    <li><b>异步系统</b>：与任何<span class="notranslate">object</span> <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/System.htm">异步系统事件</a>处理程序一样被触发。<em><b>重要的是!</b>如果<span class="notranslate">sequence</span> 暂停了，那么这个事件将不会被触发。</em></li>
    <li><b>广播信息</b>：在<span class="notranslate">sequence</span> 更新期间触发，因为遇到了广播信息<span class="notranslate">keyframe</span> 。</li>
  </ul>
  <p>所有的事件都需要与定义在<span class="notranslate">script</span> 中的函数相关联，所以要设置一个事件，必须将<a href="../../../GML_Overview/Method_Variables.htm">方法变量</a>分配给一个具有正确名称的属性，告诉<span class="notranslate">sequence</span> ，哪个事件应该调用这个函数。这方面的语法如下。</p>
  <p class="code">&lt;sequence_struct&gt;.&lt;event_property&gt; = method(&lt;sequence_struct&gt;, &lt;function_name&gt;);</p>
  <p><span class="notranslate">sequence</span> <span class="notranslate">struct</span> ，不同事件的属性如下。<span class="inline"></span></p>
  <ul class="colour">
    <li><span class="inline">event_create</span><span class="inline"></span></li>
    <li><span class="inline">event_destroy</span><span class="inline"></span></li>
    <li><span class="inline">event_clean_up</span><span class="inline"></span></li>
    <li><span class="inline">event_step</span><span class="inline"></span></li>
    <li><span class="inline">event_step_begin</span><span class="inline"></span></li>
    <li><span class="inline">event_step_end</span></li>
    <li><span class="inline">event_async_system</span><span class="inline"></span></li>
    <li><span class="inline">event_broadcast_message</span></li>
  </ul>
  <p>举个使用的例子，假设我们想让<span class="notranslate">sequence</span> ，当检测到鼠标左键点击时，反转方向。我们首先需要创建一个带有我们想要调用的函数的<span class="notranslate">script</span> ，像这样。</p>
  <p class="code">/// @function seq_reverse();<br />
    <br />
    function seq_reverse()<br />
    {<br />
        if mouse_check_button_pressed(mb_left)<br />
        {<br />
            if self.headDirection == seqdir_right<br />
            {<br />
                self.headDirection = seqdir_left;<br />
            }<br />
            else self.headDirection = seqdir_right;<br />
        }<br />
    }
  </p>
  <p>在这个函数中，我们所做的就是监听鼠标的按压，然后扭转该方法所绑定的<span class="notranslate">sequence</span> 的播放方向。你会注意到，目前你不能向与这些属性相关的函数传递任何参数，而且在所有情况下，函数范围内的 <a href="../../../GML_Overview/Instance_Keywords.htm"><span class="inline">self</span></a>变量被指定为<span class="notranslate">sequence</span> 实例。</p>
  <p class="note"><b>注意</b>：值得注意的是，在上面的<span class="notranslate">script</span> ， <span class="inline">self</span> 标识符可以被省略，只是用来明确显示本例中使用的方法变量的范围。</p>
  <p>要将其分配给一个<span class="notranslate">sequence</span> ，你将做这样的事情。</p>
  <p class="code">var _seq = sequence_get(Sequence1);<br />
    _seq.event_step = method(_seq, seq_reverse);</p>
  <p><span class="notranslate">sequence</span>现在我们已经给<span class="notranslate">sequence</span> <i>对象</i>分配了一个步骤事件，其功能是检测鼠标被按下时，然后在<span class="notranslate">room</span> <i>实例</i>创建后改变其播放头的方向。</p>
  <h2><label for="2">瞬间</label></h2>
  <p><span class="notranslate">sequence</span> <b>瞬间</b>是一个独特的代码动作，当<span class="notranslate">sequence</span> 播放时，在一个或多个指定的帧上启动。这些代码时刻--就像事件一样（上面解释过）--只是预定义的<a href="../../../GML_Overview/Method_Variables.htm">方法变量</a>，在指定的帧上被触发。例如，假设你想让<span class="notranslate">sequence</span> ，在动画的某个特定帧上创建一个 &quot;子弹 &quot;实例--首先你需要创建用于这个动作的函数，像这样。</p>
  <p class="code">/// @function seq_shoot();<br />
    <br />
    seq_shoot = function()<br />
    {<br />
        instance_create_layer(sequence.xorigin, sequence.yorigin, &quot;Instances&quot;, obj_Bullet);<br />
    }
  </p>
  <p>然后你会把它添加到<span class="notranslate">sequence</span> <span class="notranslate">struct</span> 的 <span class="inline">momentKeyframes</span> 属性中的一个框架。这本质上是一个 &quot;特殊 &quot;的轨道，只用于此目的，所以只能接受与你希望<span class="notranslate">keyframe</span> 的时刻动作相关的<span class="notranslate">sequence</span> 数据。创建这个轨道的方式与创建其他轨道的方式基本相同，即创建<span class="notranslate">keyframe</span> <span class="notranslate">structs</span> ，然后用<span class="notranslate">keyframe</span> ，其中通道0是你可以使用的唯一通道，轨道类型是 <span class="inline">seqtracktype_moment</span> 。下面是一个如何创建的例子，使用我们上面定义的函数，在给定的时刻（帧）发射。</p>
  <p class="code">var _seq = sequence_get(my_Seq);<br />
    var _k = array_create(3);<br />
    _k[0] = sequence_keyframe_new(seqtracktype_moment);<br />
    _k[0].frame = 60;<br />
    _k[1] = sequence_keyframe_new(seqtracktype_moment);<br />
    _k[1].frame = 120;<br />
    _k[2] = sequence_keyframe_new(seqtracktype_moment);<br />
    _k[2].frame = 180;<br />
    var _d = array_create(1);<br />
    _d[0] = sequence_keyframedata_new(seqtracktype_moment);<br />
    _d[0].channel = 0;<br />
    _d[0].event = method(_d[0], seq_shoot);<br />
    _k[0].channels = _d;<br />
    _k[1].channels = _d;<br />
    _k[2].channels = _d;<br />
    _seq.momentKeyframes = _k;</p>
  <p>上面的代码将简单地设置 &quot;时刻 &quot;轨道的第60、120和180帧来调用方法 <span class="inline">seq_shoot</span> 。你会注意到，目前你无法向用于每个时刻的函数传递任何参数，在所有情况下，函数范围内的 <span class="inline">self</span> 变量被分配为<span class="notranslate">sequence</span> 实例（你一般不需要使用 <span class="inline">self</span> ，但在某些特殊情况下，它可能是有用的）。</p>
  <h2><label for="3">广播信息</label></h2>
  <p>可以使序列产生<b>广播信息</b>，这些简单的<span class="notranslate">strings</span> ，沿着动画<span class="notranslate">timeline</span> ，添加到特定的帧中，当达到<span class="notranslate">timeline</span> 中的那个点时，那么<span class="notranslate">string</span> ，将广播给所有监听它的<span class="notranslate">object</span> 实例。你可以用<a href="../../../../The_Asset_Editors/Sequences.htm">序列编辑器</a>在<span class="notranslate">IDE</span> ，但也可以用代码创建和编辑这些信息。</p>
  <p>要在一个<span class="notranslate">sequence</span> ，使用<span class="notranslate">GML</span> ，创建一个广播信息，你需要把它们添加到 <span class="inline">messageEventKeyframes</span> 属性的一个框架中，<span class="notranslate">sequence</span> <span class="notranslate">struct</span> 。这基本上是一个 &quot;特殊 &quot;的轨道，只用于此目的，所以只能接受与你希望<span class="notranslate">keyframe</span> 的广播信息相关的<span class="notranslate">sequence</span> 数据。创建这个轨道的方式与创建其他轨道的方式基本相同，即创建<span class="notranslate">keyframe</span> <span class="notranslate">structs</span> ，然后用<span class="notranslate">keyframe</span> 数据填充，其中通道0是唯一可以使用的通道，轨道类型是 <span class="inline">seqtracktype_message</span> 。下面是一个如何创建的例子。</p>
  <p class="code">var _seq = sequence_get(my_Seq);<br />
    var _k = array_create(2);<br />
    _k[0] = sequence_keyframe_new(seqtracktype_message);<br />
    _k[0].frame = 60;<br />
    _k[1] = sequence_keyframe_new(seqtracktype_message);<br />
    _k[1].frame = 120;<br />
    var _m1 = array_create(2);<br />
    _m1[0] = &quot;Hello&quot;;<br />
    _m1[1] = &quot;World&quot;;<br />
    var _m2 = array_create(1);<br />
    _m2[0] = &quot;This is a Broadcast Message&quot;;<br />
    var _d1 = array_create(1);<br />
    _d1[0] = sequence_keyframedata_new(seqtracktype_message);<br />
    _d1[0].channel = 0;<br />
    _d1[0].events = _m1;<br />
    var _d2 = array_create(1);<br />
    _d2[0] = sequence_keyframedata_new(seqtracktype_message);<br />
    _d2[0].channel = 0;<br />
    _d2[0].events = _m2;<br />
    _k[0].channels = _d1;<br />
    _k[1].channels = _d2;<br />
    _seq.messageEventKeyframes = _k;</p>
  <p>你会注意到，消息文本是以数组的形式传递给<span class="notranslate">keyframe</span> 数据通道的。这是因为你可以在同一帧上广播多个消息，并让不同的<span class="notranslate">object</span> 实例监听它们，并根据它们实际期待的消息作出不同的反应。</p>
  <p>一旦广播信息被<span class="notranslate">sequence</span> ，你可以使用<span class="notranslate">object</span> 实例中的<i>其他</i>&gt;<i>广播信息</i>事件来解析它，<a href="../../../../The_Asset_Editors/Sequence_Properties/Broadcast_Messages.htm">这里</a>有详细的解释。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Sequences.htm">序列</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Sequence Events
Sequence Moments
Sequence Broadcast Messages
broadcast Messages
event_create
event_destroy
event_clean_up
event_step
event_step_begin
event_step_end
event_async_system
event_broadcast_message
-->
  <!-- TAGS
sequence_events_moments_broadcasts
-->
</body>
</html>