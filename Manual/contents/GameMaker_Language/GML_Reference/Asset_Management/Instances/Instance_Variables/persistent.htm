<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>持久性</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the variable persistent" />
  <meta name="rh-index-keywords" content="persistent" />
  <meta name="search-keywords" content="persistent" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>持久性</h1>
  <p>这个变量可以被读取，以了解该实例是否被标记为 <span class="inline">persistent</span> ，也可以用来将该实例的持久性设置为 <span class="inline">true</span> （持久性）或 <span class="inline">false</span> （非持久性）。一个持久化的实例是一个将从<span class="notranslate">room</span> &quot;延续 &quot;到<span class="notranslate">room</span> ，这意味着（例如）它只需要在游戏开始时创建一次，它将出现在所有进一步的<span class="notranslate">rooms</span> 。对持久化要小心，因为很容易失去对持久化实例的跟踪，这可能会导致在游戏开发的后期出现问题。</p>
  <p>当你在<span class="notranslate">room</span> 中创建一个启用了持久性的实例时，这个变量将被设置为 <span class="inline">true</span> ，并且它将被分配一个层或一个深度（取决于你用哪个函数来创建<span class="notranslate">object</span> 的实例）。当<span class="notranslate">room</span> 被改变时，如果下面的<span class="notranslate">room</span> <i>没有</i>一个与所分配的层具有相同名称或深度的层，那么将为跨<span class="notranslate">rooms</span> 的实例创建一个新的层，该实例正在持久化。如果你在创建实例时给了一个命名的图层，那么新的图层也将与原来的图层命名相同，而如果你给实例分配了一个深度，那么新的图层将被命名为 &quot;<span class="inline">_layer_XXX</span>&quot;，其中 &quot;XXX &quot;是一个十六进制值，用来给图层一个唯一的名字。这些图层将从<span class="notranslate">room</span> ，在<span class="notranslate">Room</span> 结束时被删除。关于图层和持久化实例需要注意的另一件事是，如果你在创建时给实例分配了一个命名的图层，而在接下来的<span class="notranslate">rooms</span> ，有另一个具有相同名称的图层，那么持久化的实例将被分配到具有相同名称的图层，<i>而不管图层的深度</i>如何。最后，如果一个持久化的实例移动到一个<span class="notranslate">room</span> ，该层的深度与实例创建时的深度相同，那么它将<i>不会</i>被分配到该层，而是在相同的深度创建一个新的层（按照前面解释的命名规则）。</p>
  <p>一个持久的<span class="notranslate">object</span> ，仍然会有它的<b>游戏开始</b>、<b>游戏结束</b>、<b>房间开始</b>和<b>房间结束</b>事件被触发，但是如果你重新启动游戏（例如，用 <span class="inline">game_restart()</span> 功能），所有持久的<span class="notranslate">objects</span> 将被删除，只有在游戏再次创建时才存在。还要注意的是，如果你停用了一个持久性的<span class="notranslate">object</span> ，它将不再从一个<span class="notranslate">room</span> 传递到另一个<span class="notranslate">Room</span> ，除非在 结束事件被触发之前重新激活。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">persistent;</p>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_Bool"></span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">if !persistent<br />
    {<br />
        persistent = true;<br />
    }</p>
  <p>上面的代码将检查实例是否持久化被标记为 <span class="inline">false</span> ，如果实例不是持久化，则持久化<span class="notranslate">flag</span> 被设置为 <span class="inline">true</span> 。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back:<a href="Instance_Variables.htm">实例变量</a></div>
        <div style="float:right">下一步。 <a href="depth.htm"><span class="notranslate">depth</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
persistent
-->
  <!-- TAGS
persistent
-->
</body>
</html>