<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>警报</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the variable alarm" />
  <meta name="rh-index-keywords" content="alarm" />
  <meta name="search-keywords" content="alarm" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>警报</h1>
  <p>这个一维<a href="../../../../GML_Overview/Arrays.htm">数组</a>被用来获取该实例可能有的任何警报的当前值，也可以用来设置这些警报。<span class="notranslate">object</span> ，每个实例中都有12个警报，每个警报都有自己的 <a href="../../../../../The_Asset_Editors/Object_Properties/Object_Events.htm"><span class="notranslate">event</span></a>当这个变量达到0时就会运行。</p>
  <p>警报在每一步的开始时进行倒计时，在Begin Step事件<strong>之后</strong>但<strong>在</strong>main Step事件<strong>之前</strong>，在为该帧渲染任何东西之前。这意味着，如果你在Begin Step事件中把报警设置为<span class="inline2">1</span>，它的事件将在同一帧中运行（因为报警将在Begin Step完成后被倒计时为0），但如果你在Step事件中把报警设置为<span class="inline2">1</span>，它将在下一帧中运行。</p>
  <p>需要注意的是，当警报达到0的时候并没有结束（尽管事件已经被触发），因为下一步它将下降到-1，所以如果你因为任何原因需要停止一个警报，你应该把它的数组值设置为-1<i>而不是</i>0。报警时间是以<i>游戏步骤</i>计算的，数值为30就是30步，60就是60步，等等。</p>
  <p class="note"><span class="note">注意</span>一个没有动作或代码的警报不会运行。然而，即使只有注释和没有代码，警报也会倒计时。</p>
  <p>你可以直接设置报警数组（也可以通过使用数组直接检索当前的报警值），但是在某些情况下这不是最合适的方法，所以你也可以使用函数 <span class="inline"><a href="../alarm_set.htm">alarm_set()</a></span> 来设置一个报警，使用函数 <a href="../alarm_get.htm"><span class="inline">alarm_get()</span></a>来获取警报的值。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">alarm[val];</p>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_Real"></span> (-1 if the alarm isn&#39;t running)</p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">if canshoot<br />
    {<br />
        if keyboard_check_pressed(vk_space)<br />
        {<br />
            canshoot = false;<br />
            alarm[0] = room_speed;<br />
            instance_create_layer(x, y, &quot;Bullets&quot;, obj_Bullet);<br />
        }<br />
    }</p>
  <p>上面的代码检查一个变量，然后如果是真的，就检查一个按键，如果是真的，最后就把这个变量设置成假的，设置一个警报（在这里它将被再次设置成真的），并创建一个实例。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back:<a href="Instance_Variables.htm">实例变量</a></div>
        <div style="float:right">下一步。 <a href="direction.htm"><span class="notranslate">direction</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
alarm
-->
  <!-- TAGS
alarm
-->
</body>
</html>