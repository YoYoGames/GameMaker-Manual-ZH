<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>实例_改变</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the function instance_change" />
  <meta name="rh-index-keywords" content="instance_change" />
  <meta name="search-keywords" content="instance_change" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>实例_改变</h1>
  <p>你可以使用这个函数将一个<span class="notranslate">object</span> ，变成另一个不同的<span class="notranslate">object</span> ，并在这样做的同时决定是否执行初始实例的Destroy和Clean Up事件以及新实例的Create事件。这样，你可以让（例如）一个炸弹变成一个爆炸--在这种情况下，&quot;perf &quot;参数可能为真，因为你希望炸弹执行其销毁事件和清理事件，以及爆炸执行其创建事件--或者你可以让你的玩家角色变成另一个角色--在这种情况下，&quot;perf &quot;参数可能为假，因为你不希望实例执行其创建和销毁/清理事件。</p>
  <p>值得注意的是，改变实例意味着在下一步之前，你不应该对该实例执行进一步的操作，特别是试图访问变量等......因为这将导致一个错误。基本上，你改变了这个实例，但是在当前步骤结束之前，它实际上是不可用的，所以直接访问它所包含的任何变量（例如，调用 <span class="inline">obj_Changed.x</span> ）是不可行的。</p>
  <p class="note"><b>WARNING!</b>当改变一个启用了物理功能的实例时，物理属性<b>将不会被</b>转移到被改变的新实例中。因此，你应该有代码将当前实例的物理状态 &quot;转移 &quot;到新的实例上，或者在其创建事件中定义新实例的物理属性，或者在<span class="notranslate">object</span> 编辑器中。由于这个原因，我们建议你不要在启用物理的实例中使用这个函数，而应该使用 <span style="font-size:1px;"><span class="inline">instance_destroy()</span></span>和<span><span style="font-size:1px;"><span class="inline">instance_create_layer()</span></span></span>。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">instance_change(obj, perf);</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>类型</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="notranslate">obj</span></td>
        <td><span data-keyref="Type_Asset_Object">对象资产</span></td>
        <td><span class="notranslate">The new object the calling object will change into.</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">perf</span></td>
        <td><span data-keyref="Type_Bool">布尔型</span></td>
        <td><span class="notranslate">Whether to perform that new object&#39;s Create and Destroy events (true) or not (false).</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">if keyboard_check(vk_enter)<br />
    {<br />
        instance_change(obj_Player_Swimming, false);<br />
        exit;<br />
    }</p>
  <p>上面的代码将把调用的实例变为 &quot;obj_Player_Swimming &quot;的实例，当用户按下 &quot;Enter &quot;键时，既不执行原实例的销毁事件，也不执行新实例的创建事件，完成后退出代码块。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回:<a href="Instances.htm">实例</a></div>
        <div style="float:right">下一步。 <a href="instance_copy.htm"><span class="notranslate">instance_copy</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
instance_change
-->
  <!-- TAGS
instance_change
-->
</body>
</html>