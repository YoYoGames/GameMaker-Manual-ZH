<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>音频发射器</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different functions and variables associated with Audio Emitters" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Audio Emitters" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">音频发射器</span></h1>
  <p>提供音频发射器是为了增加<span data-keyref="GameMaker Name">GameMaker</span>音频引擎的灵活性，它们允许你将实时效果添加到你的音频<span class="notranslate">assets</span> ，如音高和多普勒变化，以及在3D音频空间中定位你的声音并给予它们真实的运动效果。所有这些功能都受<i>听众</i>在音频环境中的位置影响，因此需要你使用所提供的功能来改变听众的位置、速度和方向（见 -<a href="../Audio_Listeners/Audio_Listeners.htm">音频听众</a>）。</p>
  <h2>使用音频发射器和监听器</h2>
  <p>通过结合音频发射器和监听器，你可以创造一个丰富、生动的环境。设置这一点可能有点复杂，所以在这一部分我们将看看你需要做的事情，以设置一个带有发射器和默认监听器的完整系统。</p>
  <h3>设置落差模型</h3>
  <p>在使用音频发射器时，首先要做的是（以及使用（0，0）不同位置的声音播放）。 <a href="../audio_play_sound_at.htm"><span class="notranslate">audio_play_sound_at</span></a>在不同的位置<span data-keyref="Position_Origin">（0, 0, 0）</span>播放的声音），首先要做的是使用 <span class="inline"><a href="../audio_falloff_set_model.htm">audio_falloff_set_model()</a></span> ，设置一个衰减模型。衰减模型决定了正在播放的声音的音量如何随着听众与发射器的距离而变化。</p>
  <p>严格来说，并不要求你设置这个，但如果你不调用这个函数，使用的模型将是默认的<span class="inline">audio_fa<span class="inline"></span>lloff_none。这意味着增益被设置为1，因此声音的音量不随听众到发射器的距离而变化。</p>
  <p class="note"><span data-conref="../../../../../assets/snippets/Tag_note.hts"> </span> 如果你想确保声音在超过最大距离后不再被听到，你应该设置一个以 结尾的衰减模式。 <span class="inline">_scaled</span></p>
  <h3>更新听众</h3>
  <p>默认的音频监听器位于位置<span data-keyref="Position_Origin">（0，0，0）</span>。 <a href="../audio_play_sound.htm"><span class="notranslate">audio_play_sound</span></a>在听众的位置上播放声音。所以默认情况下，这样播放的声音会通过左右两个扬声器都能听到。</p>
  <p>从听众与声音或发射器的相对位置改变的那一刻起（通过改变听众或发射器的位置），这将不再是事实。</p>
  <p>它不仅有一个<strong>位置</strong>，也有一个<strong>方向</strong>，可以用以下方式改变 <a href="../Audio_Listeners/audio_listener_orientation.htm"><span class="notranslate">audio_listener_orientation</span></a>.然而，在默认情况下，这个方向是颠倒的!默认方向是将向上的矢量设置为<span data-keyref="Unit_Vector_Y">（0, 1, 0）</span>，但由于<span data-keyref="GameMaker Name">GameMaker</span>的Y轴指向下方，这意味着监听器是倒立在<span class="notranslate">room</span> 。</p>
  <p>你期望在左边的扬声器中听到的一切，实际上都会在右边的扬声器中听到，反之亦然（见关于 <a href="../Audio_Listeners/audio_listener_orientation.htm"><span class="notranslate">audio_listener_orientation</span></a>的图片）。因此，一旦你开始移动发射器和听众，请确保将听众的方向设置为如下。 </p>
  <p class="code">audio_listener_orientation(0, 0, 1, 0, -1, 0);</p>
  <p>上面这行代码将设置默认监听器的方向，使其看<strong>向屏幕</strong>并<strong>朝上</strong>。因此，这对应于听众站在或坐在电脑前看屏幕。</p>
  <p>当你创建一个自上而下的游戏时，让听众的方向跟随玩家（或任何其他 &quot;听众&quot;）所面对的方向会更有趣。这可以通过以下一行代码来实现。 </p>
  <p class="code">audio_listener_orientation(0, 0, 1, lengthdir_x(1, direction), lengthdir_y(1, direction), 0);</p>
  <p>在这行代码中，你不是有一个完全不改变的向上的向量（y = -1一直），而是根据玩家的方向来改变它。最简单的方法是使用 <a href="../../../Maths_And_Numbers/Angles_And_Distance/lengthdir_x.htm"><span class="notranslate">lengthdir_x</span></a>和 <a href="../../../Maths_And_Numbers/Angles_And_Distance/lengthdir_y.htm"><span class="notranslate">lengthdir_y</span></a>函数。观察向量可以保持不变，因为倾听者仍然在看着屏幕。</p>
  <h3>播放声音</h3>
  <p>在设置了falloff模型并确保听众的位置和方向被正确地更新后，你可以开始在3D音频空间中使用以下方法播放声音 <a href="../audio_play_sound_at.htm"><span class="notranslate">audio_play_sound_at</span></a>: </p>
  <p class="code">sound_instance = audio_play_sound_at(snd_Explosion, x, y, 0, 100, 300, 1, true, 1);</p>
  <p>上面这行代码<strong>在</strong>位置（x, y, 0）播放声音 &quot;snd_Explosion<strong>&quot;</strong>，衰减参考距离为100，衰减最大距离为300，衰减系数为1。</p>
  <p>注意，你可以改变声音的某些属性，因为它可以通过上面的<span class="inline2">sound_instance</span>变量访问。不过，这些只是声音本身的属性，如增益、偏移和音高。没有办法改变声音的位置或速度，这些声音是用 <a href="../audio_play_sound_at.htm"><span class="notranslate">audio_play_sound_at</span></a>.</p>
  <p>总而言之。 <a href="../audio_play_sound_at.htm"><span class="notranslate">audio_play_sound_at</span></a>是一个在3D音频空间中播放简单声音的好方法，但它是有限的。它不允许你在声音播放时改变位置、速度或衰减参数。位置和衰减参数<i>被</i>传递到函数中，但事后不能改变。</p>
  <p>如果你想对声音的播放方式有更多的控制，可以使用一个音频发射器。</p>
  <h3>添加一个发射器</h3>
  <p>音频发射器的添加是使用 <a href="audio_emitter_create.htm"><span class="notranslate">audio_emitter_create</span></a>.它们被放置在<span data-keyref="Position_Origin">（0，0，0）</span>，速度为0，并有默认的衰减设置。</p>
  <p class="code">emitter = audio_emitter_create();</p>
  <h3>更新一个发射器</h3>
  <p>一个音频发射器 &quot;发射 &quot;出声音。它可以被比作现实世界中的扬声器。</p>
  <p>相比之下 <a href="../audio_play_sound_at.htm"><span class="notranslate">audio_play_sound_at</span></a>相比，一个发射器的位置、速度、监听者掩码和衰减参数可以在你开始在其上播放声音后改变。 <a href="audio_play_sound_on.htm"><span class="notranslate">audio_play_sound_on</span></a>.</p>
  <p>发射器的位置可以用以下方法更新 <a href="audio_emitter_position.htm"><span class="notranslate">audio_emitter_position</span></a>.这可以被设置为一个实例的位置。 </p>
  <p class="code">audio_emitter_position(emitter, x, y, 0);</p>
  <p>发射器的速度是通过以下方式更新的 <a href="audio_emitter_velocity.htm"><span class="notranslate">audio_emitter_velocity</span></a>.设置速度的最简单方法是通过将其设置为 <a href="../../Instances/Instance_Variables/hspeed.htm"><span class="notranslate">hspeed</span></a>和 <a href="../../Instances/Instance_Variables/vspeed.htm"><span class="notranslate">vspeed</span></a>的一个实例，像这样。 </p>
  <p class="code">audio_emitter_velocity(emitter, hspeed, vspeed, 0);</p>
  <p class="note"><span data-conref="../../../../../assets/snippets/Tag_note.hts"> </span> 音频发射器的<i>速度</i>以<i>每步像素</i>表示。<span><span></span></span></p>
  <h3>由<span data-keyref="GameMaker Name">GameMaker</span>创建的音频发射器</h3>
  <p>当使用<a href="../../Sequences/Sequences.htm">序列</a>时，<span data-keyref="GameMaker Name">GameMaker</span>为<span> <span class="notranslate">sequence</span></span>中的每个音轨<span><span class="inline2">（seqtracktype_audio</span> </span>）添加创建音频发射器<span>。 </span>这些发射器的ID可以在<a href="../../Sequences/Sequence_Structs/The_Sequence_Instance_Struct.htm">Sequence Instance的</a> <span class="inline2">activeTracks[i].emitterIndex</span>属性中找到。</p>
  <p><span data-keyref="GameMaker Name">GameMaker</span>会自动更新这种发射器的位置。它不会更新音轨发射器的速度，但这是你可以自己通过调用 <a href="audio_emitter_velocity.htm"><span class="notranslate">audio_emitter_velocity</span></a>在一个<a href="../../Sequences/Sequence_Events_Moments_Broadcast.htm">序列步骤事件</a>中，你可以自己做。</p>
  <h3>在发射器上播放声音</h3>
  <p>可以用以下方式<strong>在</strong>发射器<strong>上</strong>播放声音 <a href="audio_play_sound_on.htm"><span class="notranslate">audio_play_sound_on</span></a>: </p>
  <p class="code">sound_instance = audio_play_sound_on(snd_Explosion, x, y, 0, 100, 300, 1, true, 1);<br />
    <span></span>
  </p>
  <h3>追踪播放声音的实例</h3>
  <p>每当你调用其中一个 <a href="../audio_play_sound.htm"><span class="notranslate">audio_play_sound</span></a>, <a href="../audio_play_sound_at.htm"><span class="notranslate">audio_play_sound_at</span></a>或 <a href="audio_play_sound_on.htm"><span class="notranslate">audio_play_sound_on</span></a>就会创建一个新的声音<strong>实例</strong>。</p>
  <p>正在播放的声音实例可能由于各种原因而听不到，例如它的位置离听众太远。但它总是存在的。</p>
  <p>如果你想改变声音实例的属性，你应该把返回值分配给一个变量，像这样。 </p>
  <p class="code">sound_instance = audio_play_sound_at(snd_Explosion, x, y, 0, 100, 300, 1, true, 1);</p>
  <p>在某一时刻，你可能有相当多的声音实例在播放。在这种情况下，你可以把它们存储在一个数组中，如下所示。 </p>
  <p class="code">var _x = random(room_width);<br />
    var _y = random(room_height);<br />
    var _new_sound_instance = audio_play_sound_at(snd_Bird, _x, _y, 0, 200, 400, true, 10);<br />
    array_push(bird_sounds, _new_sound_instance);</p>
  <p>每次执行上述代码时，新创建的声音实例的ID被添加到<span class="inline2">bird_sounds</span>数组中。</p>
  <p>这样，你就可以跟踪所有正在播放的声音实例（上例中的 <span class="inline">snd_Bird</span> ）。</p>
  <p class="note"><span data-conref="../../../../../assets/snippets/Tag_important.hts"> </span> 正在 &quot;播放 &quot;的声音并不一定意味着听众会听到。已经停止播放的声音，离听众太远的声音，或者增益设置太低的声音（或者用增益设置太低的发射器播放的声音），都不会被听到。</p>
  <h3>额外的听众</h3>
  <p>如果你想使用额外的监听器，你应该首先检查系统是否支持多个监听器，使用 <a href="../Audio_Listeners/audio_get_listener_count.htm"><span class="notranslate">audio_get_listener_count</span></a>.</p>
  <p>如果有一个以上的监听器。 <a href="../Audio_Listeners/audio_get_listener_info.htm"><span class="notranslate">audio_get_listener_info</span></a>可以用来获取每个监听器的名称、监听器掩码和索引。</p>
  <p>如果你知道听众索引，你可以使用以 <span class="inline">audio_listener_set_</span> 开始的函数来改变它的设置（位置、速度和方向），而不是 <span class="inline">audio_listener_</span> 。</p>
  <h2>职能</h2>
  <p>有以下函数来处理音频发射器。</p>
  <ul class="colour">
    <li><a href="audio_emitter_create.htm"><span class="notranslate">audio_emitter_create</span></a></li>
    <li><a href="audio_emitter_exists.htm"><span class="notranslate">audio_emitter_exists</span></a></li>
    <li><a href="audio_emitter_position.htm"><span class="notranslate">audio_emitter_position</span></a></li>
    <li><a href="audio_emitter_velocity.htm"><span class="notranslate">audio_emitter_velocity</span></a></li>
    <li><a href="audio_emitter_falloff.htm"><span class="notranslate">audio_emitter_falloff</span></a></li>
    <li><a href="audio_emitter_gain.htm"><span class="notranslate">audio_emitter_gain</span></a></li>
    <li><a href="audio_emitter_pitch.htm"><span class="notranslate">audio_emitter_pitch</span></a></li>
    <li><a href="audio_emitter_set_listener_mask.htm"><span class="notranslate">audio_emitter_set_listener_mask</span></a></li>
    <li><a href="audio_emitter_free.htm"><span class="notranslate">audio_emitter_free</span></a></li>
    <li><a href="audio_play_sound_on.htm"><span class="notranslate">audio_play_sound_on</span></a></li>
    <li><a href="audio_emitter_get_gain.htm"><span class="notranslate">audio_emitter_get_gain</span></a></li>
    <li><a href="audio_emitter_get_pitch.htm"><span class="notranslate">audio_emitter_get_pitch</span></a></li>
    <li><a href="audio_emitter_get_x.htm"><span class="notranslate">audio_emitter_get_x</span></a></li>
    <li><a href="audio_emitter_get_y.htm"><span class="notranslate">audio_emitter_get_y</span></a></li>
    <li><a href="audio_emitter_get_z.htm"><span class="notranslate">audio_emitter_get_z</span></a></li>
    <li><a href="audio_emitter_get_vx.htm"><span class="notranslate">audio_emitter_get_vx</span></a></li>
    <li><a href="audio_emitter_get_vy.htm"><span class="notranslate">audio_emitter_get_vy</span></a></li>
    <li><a href="audio_emitter_get_vz.htm"><span class="notranslate">audio_emitter_get_vz</span></a></li>
    <li><a href="audio_emitter_get_listener_mask.htm"><span class="notranslate">audio_emitter_get_listener_mask</span></a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="../Audio.htm">音频</a></div>
        <div style="float:right">下一步。<a href="../Audio_Listeners/Audio_Listeners.htm">音频收听者</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Audio Emitters
-->
  <!-- TAGS
audio_emitter_functions
-->
</body>
</html>