<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>着色器</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different functions and variables associated with Shaders" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Shaders,_YY_GLSLES_,_YY_GLSL_,_YY_HLSL11_,_YY_PSSL_" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>着色器</h1>
  <p>着色器是一个令人难以置信的强大工具，用于操纵图形卡向屏幕<a class="glossterm" data-glossterm="呈现的" href="#">渲染</a>的内容和方式。由于这些微小的程序实际上是在显卡上运行的，这意味着它们的处理速度非常快，为更多的游戏逻辑释放了宝贵的CPU周期。</p>
  <p>要创建一个<span class="notranslate">shader</span> ，你需要使用着色器<a href="../../../../The_Asset_Editors/Shaders.htm">编辑器</a>编写<b>顶点</b>着色器和<b>片段</b>着色器（也称为<b>像素着色器</b>），即使（例如）你只想改变正在绘制的实例的<span class="notranslate">vertex</span> 位置，或者你只想改变像素的颜色值，你仍然需要<b>两个</b>程序才能使一个完整的<span class="notranslate">shader</span> 工作。</p>
  <p class="note"><span class="note">注意</span>着色器<b>不</b>允许你改变传递给它们的任何变量的值，因此在所有提到它们的文档中，这些变量将被称为<b>着色器常量</b>。</p>
  <p>关于可用的 GLSL ES 函数和变量的完整概述，你可以用来对<span class="notranslate">shaders</span> 本身进行编程，请参考<a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/es_cm_spec_2.0.pdf" target="_blank">OpenGL ES 着色语言（GLSL ES）参考页</a>。下面的链接也很有用，它包含了一些 OpenGL ES API 的快速参考卡（注意，只有显示的最后两张卡适用于<span data-keyref="GameMaker Name">GameMaker</span>）。<a href="https://www.khronos.org/opengles/sdk/docs/reference_cards/OpenGL-ES-2_0-Reference-card.pdf">OpenGL ES 参考卡</a>。</p>
  <p>在你的项目中使用<span class="notranslate">shader</span> 是非常简单的，只需要几行代码就可以从中获得最基本的使用。</p>
  <p class="code">shader_set(myShader);<br />
    draw_self();<br />
    shader_reset();</p>
  <p>正如你所看到的，它们的使用方式类似于混合模式和曲面，你首先选择（设置）<span class="notranslate">shader</span> ，用它来绘制你想要的东西，然后再重新设置绘制目标。如果你希望通过一个<span class="notranslate">shader</span> ，而不仅仅是一个单一的<span class="notranslate">sprite</span> 或背景来渲染整个屏幕，你将需要设置一个曲面来捕捉当前视图，然后将其传递给<span class="notranslate">shader</span> （更多信息见<a href="../../Drawing/Surfaces/Surfaces.htm">曲面</a>）。</p>
  <p class="note"><b>注意</b>：<span class="notranslate">Shaders</span> ，像任何与绘图有关的东西一样，<b>只能在绘图事件中使用</b>。同样值得注意的是，如果你试图在<span class="notranslate">shader</span> ，而<span class="notranslate">object</span> 没有<span class="notranslate">texture</span> ，那么结果将变成黑色。</p>
  <p>如果你所使用的<span class="notranslate">shader</span> 有输入值，这些值是用<i>统一</i>函数来设置的。你首先要使用函数获得统一的<i>句柄</i>（本质上是一个要设置的统一的ID值）。 <a href="shader_get_uniform.htm"><span class="inline">shader_get_uniform()</span></a>在使用<span class="notranslate">shader</span> 的实例的<b>创建事件</b>中获得，然后将这些句柄存储在变量中，类似这样。</p>
  <p class="code">colour_to_find = shader_get_uniform(sShaderDemo5, &quot;f_Colour1&quot;);<br />
    colour_to_set = shader_get_uniform(sShaderDemo5, &quot;f_Colour2&quot;);</p>
  <p>一旦你有了统一的句柄，就可以像这样在<span class="notranslate">shader</span> 代码中为<b>绘图事件</b>设置。</p>
  <p class="code">shader_set(sShaderDemo5);<br />
    shader_set_uniform_f(colour_to_find, 1,1,1 );<br />
    shader_set_uniform_f(colour_to_set, 1,0,0 );<br />
    draw_sprite(sprite_index,image_index,x+24, y);<br />
    shader_reset();</p>
  <p>最后需要注意的是，虽然<span class="notranslate">shaders</span> ，但它们仍然是针对设备的，如果设备的硬件或软件不能使用<span class="notranslate">shaders</span> ，那么你就会得到一个错误。因此，建议你在设置制服或使用<span class="notranslate">shader</span> 本身之前，检查<span class="notranslate">shader</span> 是否已经被编译，就像这样。</p>
  <p class="code">if (shader_is_compiled(myShader))<br />
    {<br />
        shader_set(myShader);<br />
        draw_self();<br />
        shader_reset();<br />
    }<br />
    else show_debug_message(&quot;Shader failed&quot;);</p>
  <p>作为一个额外的检查，你也可以调用函数 <a href="shaders_are_supported.htm"><span class="inline">shaders_are_supported()</span></a>来查看硬件是否支持<span class="notranslate">shaders</span> 。一般来说，你会在游戏开始时做这些检查，并将结果存储为一个<a href="../../../GML_Overview/Variables/Global_Variables.htm">全局变量</a>，然后再进行检查。</p>
  <p>需要注意的是，<span data-keyref="GameMaker Name">GameMaker</span>还支持一些有条件的编译<b>宏</b>，这些宏可以在GLSL ES<span class="notranslate">shaders</span> 中使用，因此它们可以在特定支持的平台上执行替代代码。这些宏和它们将被生成的平台显示在下表中。</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>着色器宏程序</th>
        <th>价值</th>
        <th>目标平台</th>
      </tr>
      <tr>
        <td>_YY_GLSLES_</td>
        <td>1</td>
        <td>所有目标平台</td>
      </tr>
      <tr>
        <td>_YY_GLSL_</td>
        <td>2</td>
        <td>Mac和<span class="notranslate">Ubuntu</span> (<span class="notranslate">Linux</span>)</td>
      </tr>
      <tr>
        <td>_YY_HLSL11_</td>
        <td>3</td>
        <td>Windows, UWP, XboxOne</td>
      </tr>
      <tr>
        <td>_YY_PSSL_</td>
        <td>4</td>
        <td>淘宝网</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>当你使用GLSL ES格式的<span class="notranslate">shader</span> ，在列出的任何一个平台上编译你的<span data-keyref="GameMaker Name">GameMaker</span>项目时，将生成上述的<i>一个</i>宏，然后可以在<span class="notranslate">shader</span> 代码中使用检查，像这样。</p>
  <p class="code">#ifdef _YY_HLSL11_<br />
    // HLSL shader code here<br />
    #else<br />
    // GLSL shader code here<br />
    #endif</p>
  <p>如果你是第一次使用<span class="notranslate">shaders</span> ，或者想要一个更完整的指南来使用<span data-keyref="GameMaker Name">GameMaker</span>创建和使用它们，那么请看手册的下面一页。</p>
  <ul class="colour">
    <li><a href="../../../../Additional_Information/Guide_To_Using_Shaders.htm">着色器使用指南</a></li>
  </ul>
  <p> </p>
  <p>以下功能可用于绘制和设置着色器。</p>
  <p> </p>
  <ul class="colour">
    <li><a href="shader_get_name.htm"><span class="notranslate">shader_get_name</span></a></li>
    <li><a href="shader_get_uniform.htm"><span class="notranslate">shader_get_uniform</span></a></li>
    <li><a href="shader_get_sampler_index.htm"><span class="notranslate">shader_get_sampler_index</span></a></li>
    <li><a href="shader_set.htm"><span class="notranslate">shader_set</span></a></li>
    <li><a href="shader_set_uniform_f.htm"><span class="notranslate">shader_set_uniform_f</span></a></li>
    <li><a href="shader_set_uniform_f_array.htm"><span class="notranslate">shader_set_uniform_f_array</span></a></li>
    <li><a href="shader_set_uniform_i.htm"><span class="notranslate">shader_set_uniform_i</span></a></li>
    <li><a href="shader_set_uniform_i_array.htm"><span class="notranslate">shader_set_uniform_i_array</span></a></li>
    <li><a href="shader_set_uniform_matrix.htm"><span class="notranslate">shader_set_uniform_matrix</span></a></li>
    <li><a href="shader_set_uniform_matrix_array.htm"><span class="notranslate">shader_set_uniform_matrix_array</span></a></li>
    <li><a href="shader_reset.htm"><span class="notranslate">shader_reset</span></a></li>
    <li><a href="shader_is_compiled.htm"><span class="notranslate">shader_is_compiled</span></a></li>
    <li><a href="shaders_are_supported.htm"><span class="notranslate">shaders_are_supported</span></a></li>
    <li><a href="shader_current.htm"><span class="notranslate">shader_current</span></a></li>
  </ul>
  <p> </p>
  <p>我们还有一个特殊的函数，为所有着色器定义了一个全局状态。</p>
  <ul>
    <li><a href="shader_enable_corner_id.htm"><span class="notranslate">shader_enable_corner_id</span></a></li>
  </ul>
  <p> </p>
  <p>当在<span class="notranslate">texture</span> 中使用<span class="notranslate">shaders</span> 采样器时，你将需要有关正在使用的<span class="notranslate">texture</span> 的信息，在这种情况下，你可以使用以下功能。</p>
  <p> </p>
  <ul class="colour">
    <li><a href="../Sprites/Sprite_Information/sprite_get_texture.htm"><span class="notranslate">sprite_get_texture</span></a></li>
    <li><a href="../Sprites/Sprite_Information/sprite_get_uvs.htm"><span class="notranslate">sprite_get_uvs</span></a></li>
    <li><a href="../Fonts/font_get_texture.htm"><span class="notranslate">font_get_texture</span></a></li>
    <li><a href="../Fonts/font_get_uvs.htm"><span class="notranslate">font_get_uvs</span></a></li>
    <li><a href="../../Drawing/Textures/texture_get_width.htm"><span class="notranslate">texture_get_width</span></a></li>
    <li><a href="../../Drawing/Textures/texture_get_height.htm"><span class="notranslate">texture_get_height</span></a></li>
    <li><a href="../../Drawing/Textures/texture_get_texel_width.htm"><span class="notranslate">texture_get_texel_width</span></a></li>
    <li><a href="../../Drawing/Textures/texture_get_texel_height.htm"><span class="notranslate">texture_get_texel_height</span></a></li>
    <li><a href="../../Drawing/Textures/texture_set_stage.htm"><span class="notranslate">texture_set_stage</span></a></li>
    <li><a href="../../Drawing/GPU_Control/gpu_set_texfilter_ext.htm"><span class="notranslate">gpu_set_texfilter_ext</span></a></li>
    <li><a href="../../Drawing/GPU_Control/gpu_set_texrepeat.htm"><span class="notranslate">gpu_set_texrepeat</span></a></li>
  </ul>
  <p> </p>
  <p>虽然本手册<b>不会</b>涵盖任何 Open GL<span class="notranslate">shader</span> 函数和变量，但它确实包含了一份<span data-keyref="GameMaker Name">GameMaker</span> 独有的清单。这些常量不是Open GL规范的一部分，<span class="notranslate">shaders</span> ，提供这些常量是为了简化项目中<span class="notranslate">shaders</span> 的集成。</p>
  <ul class="colour">
    <li><a href="Shader_Constants.htm">着色器常量</a></li>
  </ul>
  <p> </p>
  <p>最后，<span data-keyref="GameMaker Name">GameMaker</span>允许你定义你自己的顶<b>点格式</b>，你可以从中创建你自己的自定义基元。这可以大大加快<span class="notranslate">shader</span> ，也可以用来扩展其功能，创造出令人惊讶的效果。你可以在以下章节中找到这方面的信息。</p>
  <ul class="colour">
    <li><a href="../../Drawing/Primitives/Primitives_And_Vertex_Formats.htm">基元和<span class="notranslate">Vertex</span> 格式</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="../Asset_Management.htm">资产管理</a></div>
        <div style="float:right">下一步。<a href="../Sequences/Sequences.htm">序列</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Shaders
_YY_GLSLES_
_YY_GLSL_
_YY_HLSL11_
_YY_PSSL_
-->
  <!-- TAGS
shader_functions
-->
</body>
</html>