<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>物理学_关节_距离_创建</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for physics_joint_distance_create" />
  <meta name="rh-index-keywords" content="physics_joint_distance_create" />
  <meta name="search-keywords" content="physics_joint_distance_create" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>物理学_关节_距离_创建</h1>
  <p>最简单的一个连接是距离连接，即两个实例上的两个点之间的距离必须是恒定的。当你指定一个距离连接时，两个实例应该已经被创建并分配了一个夹具，然后你在<span class="notranslate">room</span> 坐标中定义两个锚点。第一个锚点连接到实例1，第二个锚点连接到实例2，这些点之间的距离意味着距离约束的长度。下面的图片显示了这是如何工作的。</p>
  <p><img>正如你所看到的，锚点被指定为<span class="notranslate">room</span> 坐标，所以在定义它们时必须小心，特别是当实例与关节同时被创建，而不是通过<span class="notranslate">room</span> 编辑器被放置在<span class="notranslate">room</span> 。你还应该意识到，关节的创建与实例的<span class="notranslate">sprite</span> 或它们所连接的夹具的大小无关。因此，如果你在实例的原点以外的地方创建一个距离关节，它仍然是有效的，并且会相对于创建它的位置来约束两个实例。如果你将 &quot;col &quot;值设置为 <span class="inline">true</span> ，那么这两个实例可以相互作用并相互碰撞，但<i>前提</i>是它们有碰撞事件。然而，如果它被设置为 <span class="inline">false</span> ，它们无论如何也不会碰撞。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">physics_joint_distance_create(inst1, inst2, w_anchor1_x, w_anchor1_y, w_anchor2_x, w_anchor2_y, col)</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>类型</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="notranslate">inst1</span></td>
        <td><span data-keyref="Type_ID_Instance">实例ID</span></td>
        <td><span class="notranslate">The first instance to connect with the joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">inst2</span></td>
        <td><span data-keyref="Type_ID_Instance">实例ID</span></td>
        <td><span class="notranslate">The second instance to connect with the joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">w_anchor1_x</span></td>
        <td><span data-keyref="Type_Real">真实的</span></td>
        <td><span class="notranslate">The first x coordinate for the joint, within the game world</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">w_anchor1_y</span></td>
        <td><span data-keyref="Type_Real">真实的</span></td>
        <td><span class="notranslate">The first y coordinate for the joint, within the game world</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">w_anchor2_x</span></td>
        <td><span data-keyref="Type_Real">真实的</span></td>
        <td><span class="notranslate">The second x coordinate for the joint, within the game world</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">w_anchor2_y</span></td>
        <td><span data-keyref="Type_Real">真实的</span></td>
        <td><span class="notranslate">the second y coordinate for the joint, within the game world</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">col</span></td>
        <td><span data-keyref="Type_Bool">布尔型</span></td>
        <td><span class="notranslate">Whether the two instances can collide (true) or not (false)</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_ID_Physics_Joint">Physics Joint ID</span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var mainFixture, o_id;<br />
    mainFixture = physics_fixture_create();<br />
    physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2);<br />
    o_id=instance_create_layer(x+300, y, &quot;Instances&quot;, obj_Rudder);<br />
    physics_fixture_bind(mainFixture, id);<br />
    physics_fixture_bind(mainFixture, o_id);<br />
    physics_joint_distance_create(id, o_id, x + 50, y, o_id.x - 50, o_id.y, 0);<br />
    physics_fixture_delete(mainFixture);</p>
  <p>上面的代码创建并定义了一个新的夹具，然后创建了一个 &quot;obj_Rudder &quot;的实例。然后，该夹具被分配给正在运行代码的实例以及新创建的实例，并在它们之间创建一个连接。最后，这个夹具被删除，因为它不再需要了。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">背部。<a href="Joints.htm">关节</a></div>
        <div style="float:right">下一步。 <a href="physics_joint_revolute_create.htm"><span class="notranslate">physics_joint_revolute_create</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
physics_joint_distance_create
-->
  <!-- TAGS
physics_joint_distance_create
-->
</body>
</html>