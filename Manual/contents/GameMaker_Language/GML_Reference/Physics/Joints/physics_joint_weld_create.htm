<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>物理学_接头_焊接_创建</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for physics_joint_weld_create" />
  <meta name="rh-index-keywords" content="physics_joint_weld_create" />
  <meta name="search-keywords" content="physics_joint_weld_create" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>物理学_接头_焊接_创建</h1>
  <p>焊点的设计是为了将两个夹具连接在一起，使其牢固而又灵活。焊点将允许两个连接的夹具之间的弯曲，但没有与距离连接相关的拉伸，并且当受到任何压力或负载时，将总是试图 &quot;弹 &quot;回参考角度。你在<span class="notranslate">room</span> ，在那里应该创建接头，以及你希望接头在任何时候都尝试和保持的角度，如下图所示。</p>
  <p><img>正如你所看到的，锚点被指定为<span class="notranslate">room</span> 坐标，所以在定义它们时必须小心，特别是当实例与关节同时被创建，而不是通过<span class="notranslate">room</span> 编辑器被放置在<span class="notranslate">room</span> 。你还应该意识到，接头的创建与实例的<span class="notranslate">sprite</span> 或它们所连接的夹具的大小无关。因此，如果你在实例的原点以外的地方创建一个焊接接头，它仍然有效，并将相对于创建它的位置来约束两个实例。</p>
  <p>由于焊接接头是灵活的，在受到任何压力时都会弯曲，你可以设置振荡频率（Hz）以及接头的阻尼比，以获得不同的效果--你可能需要玩弄这些数值来微调它们，建议你从较小的数值开始，然后增加它们，直到你得到你想要的效果。</p>
  <p>如果你把 &quot;col &quot;值设置为 <span class="inline">true</span> ，那么这两个实例可以相互作用并相互碰撞，但<i>前提</i>是它们有碰撞事件，然而如果它被设置为 <span class="inline">false</span> ，它们无论如何也不会碰撞。</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">physics_joint_weld_create(inst1, inst2, anchor_x, anchor_y, ref_angle, freq_hz, damping_ratio, col)</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>类型</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="notranslate">inst1</span></td>
        <td><span data-keyref="Type_ID_Instance">实例ID</span></td>
        <td><span class="notranslate">The first instance to connect with the joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">inst2</span></td>
        <td><span data-keyref="Type_ID_Instance">实例ID</span></td>
        <td><span class="notranslate">The second instance to connect with the joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">anchor_x</span></td>
        <td><span data-keyref="Type_Real">真实的</span></td>
        <td><span class="notranslate">The x coordinate for the joint, within the game world</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">anchor_y</span></td>
        <td><span data-keyref="Type_Real">真实的</span></td>
        <td><span class="notranslate">The y coordinate for the joint, within the game world</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">ref_angle</span></td>
        <td><span data-keyref="Type_Real">真实的</span></td>
        <td><span class="notranslate">The joint angle to maintain</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">freq_hz</span></td>
        <td><span data-keyref="Type_Real">真实的</span></td>
        <td><span class="notranslate">This is the oscillation frequency for the joint, in hertz</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">damping_ratio</span></td>
        <td><span data-keyref="Type_Real">真实的</span></td>
        <td><span class="notranslate">This damping ratio for the joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">col</span></td>
        <td><span data-keyref="Type_Bool">布尔型</span></td>
        <td><span class="notranslate">Whether the two instances can collide (true) or not (false)</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_ID_Physics_Joint">Physics Joint ID</span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var i, fix, o_id, p_id;<br />
    p_id = noone;<br />
    o_id = noone;<br />
    fix = physics_fixture_create();<br />
    physics_fixture_set_box_shape(fix, 64, 32);<br />
    for (i = 0; i &lt; 5; i++;)<br />
    {<br />
        o_id = instance_create_layer(x + (128 * i), y, &quot;Instances&quot;, obj_BridgePart);<br />
        physics_fixture_bind(fix, o_id);<br />
        if i &gt; 0 &amp;&amp; i &lt; 4<br />
        {<br />
            physics_joint_weld_create(p_id, o_id, x + (128 * i) - 64, y, 0, 10, 12, true);<br />
        }<br />
        p_id = o_id;<br />
    }<br />
    physics-fixture_delete(fix);</p>
  <p>上面的代码将创建一个夹具，然后使用<span class="notranslate">loop</span> 来创建一些实例，将夹具绑定到每个新的实例上，然后使用焊接接头将它们全部连接起来。最后从内存中删除该夹具。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">背部。<a href="Joints.htm">关节</a></div>
        <div style="float:right">下一步。 <a href="physics_joint_friction_create.htm"><span class="notranslate">physics_joint_friction_create</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
physics_joint_weld_create
-->
  <!-- TAGS
physics_joint_weld_create
-->
</body>
</html>