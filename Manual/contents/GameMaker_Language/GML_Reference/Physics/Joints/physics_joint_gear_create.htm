<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>物理学_关节_gear_create</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for physics_joint_gear_create" />
  <meta name="rh-index-keywords" content="physics_joint_gear_create" />
  <meta name="search-keywords" content="physics_joint_gear_create" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">物理学_关节_gear_create</span></h1>
  <p>如果你想创建一个复杂的机械装置，你可能想使用齿轮。原则上，你可以在<span data-keyref="GameMaker Name">GameMaker</span>中通过使用复合实例来创建齿轮的模型，但这不是很有效，而且对作者来说可能很乏味值得庆幸的是，有一个更简单的方法，那就是使用一个<i>齿轮接头</i>。要制作一个齿轮，你需要事先定义你的夹具，并创建两个基本的关节来组成你的齿轮--这些<b>必须</b>是由一个<a href="physics_joint_revolute_create.htm">渐进式关节</a>和一个<a href="physics_joint_prismatic_create.htm">棱形关节</a>或另一个<i>渐进式关节</i>组成的。下图显示了在游戏中创建齿轮的典型方法。</p>
  <p><img>那么会发生什么呢？好吧，一旦这两个关节被添加到齿轮中，与一个关节的互动将对另一个产生影响，所以在上面的例子中，如果你旋转inst2，inst3将上下移动，或者如果你上下移动inst3，那么inst2将旋转。你也可以改变齿轮比，也就是说，你需要更多（或更少）地移动一个实例来获得想要的效果。底部例子中的代码显示了如何创建类似上述图片的东西。</p>
  <p class="note"><b>注意</b>：如果你需要删除涉及齿轮接头的两个实例中的任何一个（或只是删除它们的接头），那么你<b>必须</b>先用以下方法删除齿轮接头 <span style="font-size:1px;"><a href="physics_joint_delete.htm"><span class="inline">physics_joint_delete()</span></a></span>否则你会得到一个错误!</p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code"><span data-field="title" data-format="default">physics_joint_gear_create</span>(inst1, inst2, joint_1, joint_2, ratio)</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>类型</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="notranslate">inst1</span></td>
        <td><span data-keyref="Type_ID_Instance"><a href="../../../../../GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/id.htm" target="_blank">实例ID</a></span></td>
        <td><span class="notranslate">The first instance to connect with the joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">inst2</span></td>
        <td><span data-keyref="Type_ID_Instance"><a href="../../../../../GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/id.htm" target="_blank">实例ID</a></span></td>
        <td><span class="notranslate">The second instance to connect with the joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">joint_1</span></td>
        <td><span data-keyref="Type_Real"><a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">真实的</a></span></td>
        <td><span class="notranslate">A previously defined revolute joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">joint_2</span></td>
        <td><span data-keyref="Type_Real"><a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">真实的</a></span></td>
        <td><span class="notranslate">A previously defined revolute <i>or</i> prismatic joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">ratio</span></td>
        <td><span data-keyref="Type_Real"><a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">真实的</a></span></td>
        <td><span class="notranslate">Set the velocity ratio between the two joints</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_ID_Physics_Joint"><a href="../../../../../GameMaker_Language/GML_Reference/Physics/Joints/Joints.htm" target="_blank">Physics Joint ID</a></span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var t_fix, g_fix, inst1, inst2, inst3, r_joint, p_joint;<br />
    g_fix = physics_fixture_create();<br />
    physics_fixture_set_box_shape(g_fix, 40, 10);<br />
    t_fix = physics_fixture_create();<br />
    physics_fixture_set_circle_shape(t_fix, 10);<br />
    physics_fixture_set_density(t_fix, 0.5);<br />
    inst1 = instance_create_layer(60, room_height - 30, &quot;Background&quot;, obj_Ground);<br />
    inst2 = instance_create_layer(40, room_height - 300, &quot;Instances&quot;, obj_Cog);<br />
    inst3 = instance_create_layer(150, room_height - 300, &quot;Instances&quot;, obj_Barrel);<br />
    physics_fixture_bind(g_fix, inst1);<br />
    physics_fixture_bind(t_fix, inst2);<br />
    physics_fixture_bind(t_fix, inst3);<br />
    r_joint = physics_revolute_joint_create(inst1, inst2, 40, room_height - 300, -80, 80, 1, 10, 0.5, 1, 0);<br />
    p_joint = physics_prismatic_joint_create(inst1, inst3, 150, room_height - 300, 0, 1, -10, 10, true, 0, 0, 0, 0);<br />
    <span data-field="title" data-format="default">physics_joint_gear_create</span>(inst2, inst3, r_joint, p_joint, 0.5);
  </p>
  <p>上面的代码创建并定义了两个夹具，然后创建了三个实例，一个是 &quot;obj_Ground&quot;，另外两个是 &quot;obj_Cog &quot;和 &quot;obj_Barrel&quot;。然后夹具被绑定到这些实例上，并创建了两个关节。在地面和齿轮之间有一个渐开线接头，在地面和桶之间有一个棱形接头。最后，使用之前定义的渐开线和棱镜接头在齿轮和桶的实例之间创建一个齿轮接头。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">背部。<a href="Joints.htm">关节</a></div>
        <div style="float:right">下一步。 <a href="physics_joint_rope_create.htm"><span class="notranslate">physics_joint_rope_create</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
physics_joint_gear_create
-->
  <!-- TAGS
physics_joint_gear_create
-->
</body>
</html>