<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_parse</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_parse" />
  <meta name="rh-index-keywords" content="json_parse" />
  <meta name="search-keywords" content="json_parse" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_parse</h1>
  <p>这个函数可以用来解析一个JSON<span class="notranslate">string</span> (可以是之前用JSON创建的，也可以是来自任何有效来源的)，并将其转换成数组或 ，其中数组相当于JSON数组， ，相当于JSON 。 <a href="json_stringify.htm"><span class="notranslate">json_stringify</span></a>或从任何有效来源创建），并将其转换为数组或<span class="notranslate">structs</span> ，其中数组相当于JSON数组，<span class="notranslate">struct</span> 相当于JSON<span class="notranslate">object</span> 。你提供要解析的<span class="notranslate">string</span> ，该函数将返回顶层数组或<span class="notranslate">struct</span> ，然后可以在你的代码中使用。如果你不确定JSON的内容，你可以使用不同的<a href="../../Variable_Functions/Variable_Functions.htm">变量函数</a>（如 <a href="../../Variable_Functions/typeof.htm"><span class="inline">typeof()</span></a>和 <a href="../../Variable_Functions/variable_struct_get_names.htm"><span class="inline">variable_struct_get_names()</span></a>在<span class="notranslate">struct</span> ）来检查返回的内容。请注意，试图解析一个无效的值（即：不是<span class="notranslate">string</span> ）将抛出一个异常错误。</p>
  <p>在使用这个功能时，有一些重要的事情需要注意。</p>
  <ul class="colour">
    <li>如果提供的JSON<span class="notranslate">string</span> 包括 <span class="inline">undefined</span> 作为任何属性的值，它将在被解析时被转换为 <span class="inline">pointer_null</span> 。</li>
    <li>这个函数只允许你加载最大嵌套限制为128的JSON文件。</li>
  </ul>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">json_parse(json)</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th><th>类型</th>
        <th>描述</th>
     </tr>
      <tr>
        <td><span class="notranslate">json</span></td><td><span data-keyref="Type_String"></span></td>
        <td><span class="notranslate">The JSON string to parse</span></td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_Struct">Struct</span> or <span data-keyref="Type_Array">Array</span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">json = &quot;{\&quot;myObj\&quot;: { \&quot;apples\&quot;:10, \&quot;oranges\&quot;:12, \&quot;potatoes\&quot;:100000, \&quot;avocados\&quot;:0 }, \&quot;myArray\&quot;:[0, 1, 2, 2, 4, 0, 1, 5, 1]}&quot;;<br />
    <br />
    data = json_parse(json);<br />
    show_debug_message(data);
  </p>
  <p>上面的代码创建了一个新的<span class="notranslate">string</span> ，包含一个有效的JSON<span class="notranslate">object</span> ，然后调用 <span class="inline">json_parse()</span> ，将该<span class="notranslate">string</span> 转换为<span class="notranslate">GML</span> <span class="notranslate">struct</span> 。然后它将结果打印到调试日志。</p>
  <p class="note"><span class="note">注意</span>你会注意到JSON<span class="notranslate">string</span> 里面的每一个双引号（<span class="inline2">&quot;</span>）之前都包含一个反斜杠<span class="inline2">（\</span>）。<br>
    <br>
   <span class="inline2">json = &quot;{<strong>\&quot; </strong></span>myObj<br>
    <br>
    这是为了确保双引号在<span class="notranslate">string</span> ，而不是作为代码的一部分被读取并过早地关闭<span class="notranslate">string</span> 。这样我们就用反斜杠来 &quot;逃避 &quot;双引号。<br>
    <br>
    然而，如果你从一个外部文件加载JSON，就没有必要在该文件中转义字符，这样做可能会在解析过程中导致错误。
  </p>
  <hr />
  <p>在解析了上面的JSON<span class="notranslate">string</span> ，如果你知道它的结构，你可以使用各种<a href="../../Variable_Functions/Variable_Functions.htm">变量函数</a>来检查和读取其内容。</p>
  <p class="code">data = json_parse(json);<br />
    <br />
    // Check if the struct has myObj variable<br />
    if variable_struct_exists(data, &quot;myObj&quot;)<br />
    {<br />
        // Check if it&#39;s a struct<br />
        if is_struct(data.myObj)<br />
        {<br />
            // Print all struct members to the log<br />
            var _names = variable_struct_get_names(data.myObj);<br />
            var _str = &quot;&quot;;<br />
            for (var i = 0; i &lt; array_length(_names); i++;)<br />
            {<br />
                _str = _names[i] + &quot;: &quot; + string(variable_struct_get(data.myObj, _names[i]));<br />
                show_debug_message(_str);<br />
            }<br />
        }<br />
    }<br />
    <br />
    // Check if the struct has myArray variable<br />
    if variable_struct_exists(data, &quot;myArray&quot;)<br />
    {<br />
        // Check if it&#39;s an array<br />
        if is_array(data.myArray)<br />
        {<br />
            show_debug_message(data.myArray);<br />
        }<br />
    }
  </p>
  <p>上述代码将解析给定的JSON<span class="notranslate">string</span> ，产生以下控制台输出。</p>
  <p class="code">oranges: 12<br />
    potatoes: 100000<br />
    avocados: 0<br />
    apples: 10<br />
    [ 0,1,2,2,4,0,1,5,1 ]</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Encoding_And_Hashing.htm">文件编码</a></div>
        <div style="float:right">下一步。 <a href="base64_encode.htm"><span class="notranslate">base64_encode</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
json_parse
-->
  <!-- TAGS
json_parse
-->
</body>
</html>