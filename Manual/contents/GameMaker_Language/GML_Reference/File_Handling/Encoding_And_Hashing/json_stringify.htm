<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_stringify</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_stringify" />
  <meta name="rh-index-keywords" content="json_stringify" />
  <meta name="search-keywords" content="json_stringify" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_stringify</h1>
  <p>通过这个函数，你可以将单个或嵌套的<span class="notranslate">structs</span> 和数组转换成有效的JSON<span class="notranslate">string</span> 。你提供要使用的初始值（一个数组索引或一个<span class="notranslate">struct</span> 引用），然后该函数将对其进行 &quot;字符串化&quot;，将其转换为JSON字符串（将<span class="notranslate">GameMaker</span> 数组转换为JSON数组，将<span class="notranslate">GameMaker</span> <span class="notranslate">structs</span> 转换为JSON<span class="notranslate">objects</span> ）。</p>
  <p>在使用这个功能时，有一些重要的事情需要注意。</p>
  <ul class="colour">
    <li>该函数<em>不会 </em>将DS地图、列表或任何其他数据结构转换为JSON，而只是存储该结构的内部索引值（这没什么用，因为索引会在游戏运行期间改变），因此你不应该尝试串化任何可能包含对数据结构的引用的值（为此你有 <a href="json_encode.htm"><span class="inline">json_encode()</span></a>).</li>
    <li>该函数将几乎所有的值转换成 &quot;有效的 &quot;JSON<span class="notranslate">string</span> ，然而，由于JSON标准的操作方式，<span class="notranslate">string</span> 中包含的实际值可能与你所期望的不完全一样。<br>
      <br>
      &quot;JSON对数字是不可知的。在任何编程语言中，都可以有各种容量和补码的数字类型，固定或浮动，二进制或十进制。这可能使不同编程语言之间的互换变得困难。而JSON只提供了人类使用的数字的表示方法：一个<span class="notranslate">sequence</span> 的数字。所有的编程语言都知道如何理解数字<span class="notranslate">sequences</span> ，即使它们在内部表示上有分歧。&quot;<br>
      <br>
      更多信息见<a href="http://www.ecma-international.org/publications/standards/Ecma-404.htm">ECMA JSON标准</a>。
    </li>
    <li>如果你在要转换为JSON的值中包含一个int64，如果它在int32的有效范围内，它将把它写成<i>int</i>，如果它可以这样做而不损失精度，则写成<i>双倍数</i>，或者（如果这两种情况都不适用）写成一个<i>字符串</i>，在它前面有一个标识符&quot;<span class="inline">@i64@</span>&quot;，在它后面有&quot;<span class="inline">$i64$</span>&quot;。当你再次解析JSON的时候，<span data-keyref="GameMaker Name">GameMaker</span>将拾起这些标识符，并将值重新转换为int64。这确实意味着，如果JSON是为<span class="notranslate">server</span> 或其他非GameMaker目标准备的，这些值将不合适，所以应该避免使用。</li>
    <li>如果你在转换为JSON的值中包含 <span class="inline">infinity</span> 、 <span class="inline">-infinity</span> 或 <span class="inline">NaN</span> ，它们将被编码为<span class="notranslate">strings</span> ，因为这些值不是JSON标准的一部分，在解析产生的JSON时，它们<strong>不会 </strong>被转换回它们的<span class="notranslate">runtime</span> 值，而将保持为<span class="notranslate">strings</span> 。请注意， <span class="inline">NaN</span> 在字符串化时将被转换为 &quot;nan&quot;（小写）。</li>
    <li>在将任何返回的JSON字符串写入 <span class="inline">ini</span> 文件时应注意，因为 <span class="inline">ini</span> 规范在使用引号和转义字符时可能导致问题。参见函数 <a href="../Ini_Files/ini_write_string.htm"><span class="inline">ini_write_string()</span></a>获取更多信息。</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <h4>语法。</h4>
  <p class="code">json_stringify(val)</p>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>类型</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="notranslate">val</span></td>
        <td><span data-keyref="Type_Struct">结构</span>或<span data-keyref="Type_Array">阵列</span></td>
        <td><span class="notranslate">The reference value for a struct or array to convert into a JSON string</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>返回。</h4>
  <p class="code"><span data-keyref="Type_String">String</span></p>
  <p> </p>
  <h4>例子。</h4>
  <p class="code">var _contents =<br />
    {<br />
        version : &quot;1.0.0&quot;,<br />
        data:<br />
        {<br />
            coins : 4,<br />
            mana : 15,<br />
            playername : &quot;Gurpreet&quot;,<br />
            items :<br />
            [<br />
                ITEM.SWORD,<br />
                ITEM.BOW,<br />
                ITEM.GUITAR<br />
            ]<br />
        }<br />
    };<br />
    <br />
    var _json_string = json_stringify(_contents);
  </p>
  <p>上面的代码将把<span class="inline2">_contents</span> <span class="notranslate">struct</span> 转换为JSON<span class="notranslate">string</span> ，并把<span class="notranslate">string</span> 存储在一个变量中。返回的<span class="notranslate">string</span> ，看起来像这样。</p>
  <p class="code">{ &quot;data&quot;: { &quot;items&quot;: [ 0.0, 1.0, 2.0 ], &quot;coins&quot;: 4.0, &quot;mana&quot;: 15.0, &quot;playername&quot;: &quot;Gurpreet&quot; }, &quot;version&quot;: &quot;1.0.0&quot; }</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Encoding_And_Hashing.htm">文件编码</a></div>
        <div style="float:right">下一步。 <a href="json_parse.htm"><span class="notranslate">json_parse</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
json_stringify
-->
  <!-- TAGS
json_stringify
-->
</body>
</html>