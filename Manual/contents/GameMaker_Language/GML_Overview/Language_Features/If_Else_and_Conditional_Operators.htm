<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>if / else和条件运算符</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the If / Else and Conditional Operators" />
  <meta name="rh-index-keywords" content="?,if,else,ternary operator,then" />
  <meta name="search-keywords" content="if,else,then,?,ternary,conditional" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>if / else和条件运算符</h1>
  <p>大多数编程语言的一个基本特征是能够提出一个简单的问题，给出一个布尔 <span class="inline">true</span> 或 <span class="inline">false</span> 的答案，在<span class="notranslate">GML</span> 中，这是通过 <span class="inline">if</span> 关键字实现的。一个简单的 <span class="inline">if</span> 条件需要一个<a class="glossterm" data-glossterm="表情" href="#">表达式</a>，如果表达式解析为 <span class="inline">true</span> ，将执行一个或多个<span class="glossextra">语句</span>，其基本形式如下。</p>
  <p class="code">if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p><br>
    这里你是说，如果一个表达式解析为 <span class="inline">true</span> ，那么就做什么。注意，条件的 &quot;then &quot;部分是<em>隐含的</em>，但是有一个 <span class="inline">then</span> 关键字可以使用（尽管它几乎总是被省略），所以你也可以创建这样的条件。</p>
  <p class="code">if (&lt;expression&gt;) then<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>除了 <span class="inline">if</span> 和 <span class="inline">then</span> ，你还可以使用 <span class="inline">else</span> 关键字来做其他事情，如果被检查的表达式评估为<span class="inline">false</span> 。这种 &quot;<span class="inline">if... then... else...</span>&quot; 形式看起来像这样。</p>
  <p class="code">if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
    }<br />
    else<br />
    {<br />
        &lt;statement&gt;;<br />
    }</p>
  <p>在这种情况下，表达式将被评估，如果评估结果为 <span class="inline">false</span> ，则执行 <span class="inline">else</span> 之后的语句，否则将执行初始语句（是 <span class="inline">true</span> ）。</p>
  <p class="note"><span class="note">注意</span>在<span class="notranslate">GameMaker</span> 语言中，任何小于或等于0的值都将评估为 <span class="inline">false</span> ，而任何大于0的值都将评估为 <span class="inline">true</span> 。</p>
  <p>一个好的习惯是，在 <span class="inline">if</span> ，总是在表达式周围加上大括号，在语句周围加上大括号{}（否则只有第一个语句会被执行），并在块中为每个语句取一个新行，例如。</p>
  <p class="code">// This will work<br />
    if &lt;expression&gt; &lt;statement&gt;;<br />
    <br />
    // Example:<br />
    if test == true variable = false else variable = true;
  </p>
  <p class="code">// This is better<br />
    if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;<br />
    }<br />
    else<br />
    {<br />
        &lt;statement&gt;<br />
    }<br />
    <br />
    // Example<br />
    if (test == true)<br />
    {<br />
        variable = false;<br />
    }<br />
    else<br />
    {<br />
        variable = true;<br />
    }
  </p>
  <p>请注意，虽然这样做略显冗长，但它意味着代码中没有歧义，而且在任何时候都能在所有平台上正确编译。然而，最初的例子可能不是这样，正如在<a href="../Expressions_And_Operators.htm">表达式和运算符</a>页面中解释的那样。</p>
  <p class="note"><strong>注意</strong>：当比较两个值是否相等时，你应该使用 &quot;<span class="inline">==</span>&quot; 运算符，而只使用 &quot;<span class="inline">=</span>&quot; 进行赋值。目前，<span class="notranslate">GameMaker</span> 将把它们视为可互换的，但这在将来可能会改变，当使用正确的运算符进行比较和赋值时，你的代码会更干净、更明显。</p>
  <p><span class="notranslate">room</span> 为了给出一个使用 <span class="inline">if</span> 的正确例子，考虑以下代码，当放在步骤事件中时，它将把一个实例移向 <span class="inline">x=200</span> 的位置。</p>
  <p class="code">if (x &lt; 200)<br />
    {<br />
        x += 4;<br />
    }<br />
    else<br />
    {<br />
        x = 200;<br />
    }</p>
  <p>请注意，你也可以在 <span class="inline">if</span> ，即：在同一语句中检查不同的值或表达式，进行<i>复合</i>检查。这些检查可以使用各种<a href="../Expressions_And_Operators.htm">组合运算符</a>（<span class="inline">&amp;&amp;</span> and, <span class="inline">||</span> or, and <span class="inline">^^</span> xor）。当你这样做时，<span data-keyref="GameMaker Name">GameMaker</span>将一次评估其中的每一个，并根据它们的评估结果，然后其余的可能被跳过。比如说。</p>
  <p class="code">if (keyboard_check_pressed(vk_enter)) &amp;&amp; (instance_exists(obj_Player))<br />
    {<br />
        go = false;<br />
        alarm[0] = room_speed;<br />
    }</p>
  <p>这里我们使用 <span class="inline">&amp;&amp;</span> &quot;和 &quot;运算符进行检查，所以它要检查 <span class="inline">if</span> 中的<em>两个 </em>条件是否<em>都 </em>评估为 <span class="inline">true</span> ，如果第一个条件是 <span class="inline">false</span> ，那么第二个条件甚至不会被检查。这被称为代码的 &quot;短路&quot;，所以当组合表达式进行检查时，你应该确保 &quot;最便宜 &quot;的表达式总是在第一个，以避免在第一个条件评估为 <span class="inline">false</span> ，而评估更昂贵的表达式。同样，如果一个条件在编译时可以被评估为<span class="inline">true</span> 或 <span class="inline">false</span> ，那么整个条件将从代码中删除，例如，假设你有一个<a href="../Variables/Constants.htm">宏</a> <span class="inline">DEBUG_ON </span>，用于<span class="notranslate">debugging</span> ，它可以是 <span class="inline">true</span> 或 <span class="inline">false</span> - 当它被设置为 <span class="inline">false</span> ，那么下面的代码块将在编译时从游戏中剥离出来。</p>
  <p class="code">if DEBUG_ON == true<br />
    {<br />
        show_debug_message(&quot;Instances = &quot; + string(instance_count));<br />
    }</p>
  <p>你也可以执行<b>条件操作</b>（也称为<b>三元</b>操作），这基本上是执行基本 <span class="inline">if</span> 的 &quot;快捷方式&quot;。它的语法如下。</p>
  <p class="code">variable = &lt;condition&gt; ? &lt;statement1 (if <i>true</i>)&gt; : &lt;statement2 (if <i>false</i>)&gt;</p>
  <p>条件运算符 &quot;<span class="inline">?</span>&quot; 将返回两个给定值中的一个，这取决于条件表达式的值是 <span class="inline">true</span> 还是 <span class="inline">false</span> ，例如。</p>
  <p class="code">var temp_x = (x &lt; (room_width / 2)) ? 32 : (room_width - 32);</p>
  <p>上面的代码将检查 &quot;x &quot;的值与<span class="notranslate">room</span> 宽度的一半的值，然后如果小于这个值，它将把&quot;<span class="inline">temp_x</span>&quot;设置为32，否则&quot;<span class="inline">temp_x</span>&quot;将是<span class="notranslate">room</span> 宽度 - 32。下面是一些更多的使用例子。</p>
  <p class="code">draw_text(x, y, &quot;The fee is &quot; + (global.Member ? &quot;$2.00&quot; : &quot;$10.00&quot;));<br />
    path_start(((global.level &gt; 10) ? path_hard : path_easy;), 2, path_action_reverse, true);<br />
    (--hp &lt;= 0) ? instance_destroy() : score += 10;</p>
  <p>值得注意的是，你可以嵌套条件操作，但如果你这样做，那么每个操作都需要用括号括起来，比如说。</p>
  <p class="code">var c = a ? &quot;foo&quot; : (b ? &quot;bar&quot; : &quot;whee&quot;); // Correct<br />
    var c = a ? &quot;foo&quot; : b ? &quot;bar&quot; : &quot;whee&quot;;   // Will cause an error</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a data-xref="{title}" href="../GML_Overview.htm">GML概述</a></div>
        <div style="float:right">下一步。<a data-xref="{title}" href="../Addressing_Variables_In_Other_Instances.htm">在其他实例中处理变量的问题</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
if
else
then
ternary operators
conditional operators
-->
  <!-- TAGS
if
else
then
-->
</body>
</html>