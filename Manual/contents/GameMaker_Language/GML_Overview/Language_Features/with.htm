<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>与</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the with function" />
  <meta name="rh-index-keywords" content="with" />
  <meta name="search-keywords" content="with" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>与</h1>
  <p>正如在 "在<a href="../Addressing_Variables_In_Other_Instances.htm">其他实例中寻址变量</a>"一节中所指出的，除了当前执行任何特定代码的实例和<a href="../Structs.htm">结构</a>外，还可以读取和改变其他实例和<a href="../Structs.htm">结构</a>中的变量值。然而，在很多情况下，你想做的事情远不止是改变这些其他实例中的一个变量，可能想执行更复杂的代码操作，需要多个函数和代码行。例如，想象一下，你想把你游戏中的一个球<span class="notranslate">object</span> 的所有实例向下移动8个像素。你可能认为这只需通过下面这段代码即可实现。</p>
  <p class="code">obj_ball.y = obj_ball.y + 8;</p>
  <p>但这是不正确的，因为赋值的右侧得到了第一个球的y坐标值并加上了8。接下来这个新值被设置为<em>所有 </em>球的y坐标，所以结果是所有的球都得到相同的y坐标，即使你使用下面的方法。</p>
  <p class="code">obj_ball.y += 8;</p>
  <p>它将产生完全相同的效果，因为它只是第一条语句的简写。那么，我们<i>如何</i>实现这样的事情呢？这就是为什么 <span class="inline">with</span> 语句存在于<span class="notranslate">GML</span> 。 <span class="inline">with</span> 语句的语法如下。</p>
  <p class="code">with (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p><span class="notranslate">struct</span>对于<a class="glossterm" data-glossterm="表情" href="#">表达式</a>，你可以用一个实例ID、<span class="notranslate">object</span> ID（表示这个<span class="notranslate">room</span> 中的<i>所有实例</i> <span class="notranslate">object</span> 都要运行该代码块）、<span class="notranslate">struct</span> ID、或一个特殊的<a href="../Instance_Keywords.htm">关键字</a>(<span class="inline">all</span> 或<span class="inline">other</span>)来表示要执行代码。然后，这将改变大括号 <span class="inline">{}</span> 内的代码的<strong>范围</strong>，从实际持有代码的实例、<span class="notranslate">struct</span> 或函数到表达式中给出的实例（或实例或<span class="notranslate">struct</span> ）。</p>
  <p>一旦表达式设置了 <span class="inline">with</span> 的范围，<a class="glossterm" data-glossterm="声明" href="#">语句</a>就会对每个指定的实例执行，就像该实例是当前的( <span class="inline">self</span>)实例一样。因此，回到我们原来的问题，如果要把球<span class="notranslate">object</span> 的所有实例向下移动8个像素，你要输入。</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        y += 8;<br />
    }</p>
  <p>本质上这是一个<span class="notranslate">loop</span> ，每一次<a class="glossterm" data-glossterm="迭代" href="#">迭代</a> <span class="notranslate">loop</span> ，代码将在一个<span class="notranslate">object</span> <span class="inline">obj_ball</span> 的实例上运行。</p>
  <p>如果你想执行多条语句，只需把它们放在大括号里，就像你在其他代码块周围一样。因此，例如，要将我们例子中的所有球移动到一个随机的位置，并给它们一个随机的速度和方向，你可以使用。</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
        speed = 1 + random(2);<br />
        direction = random(360);<br />
    }</p>
  <p>如上所述，在语句中，指定的实例或结构已成为运行代码块的目标(<span class="inline">self</span>)实例，这意味着原始实例（包含 <span class="inline">with</span> 和整个代码块）已成为 <a href="../Instance_Keywords.htm"><span class="inline">other</span></a>实例。因此--例如--要把所有的球移到实际包含代码的当前实例的位置，你可以这样输入。</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        x = other.x;<br />
        y = other.y;<br />
    }</p>
  <p> <span class="inline">with</span> 声明是一个非常强大的工具，在很多很多情况下都很有用，所以你必须充分了解它的使用方法。为了提供帮助，下面还有一些使用的例子。</p>
  <p class="code">with (instance_create_layer(x, y, &quot;Instances&quot;, obj_Ball))<br />
    {<br />
        speed = other.speed;<br />
        direction = other.direction;<br />
    }</p>
  <p>上面的代码将创建一个 <span class="inline">obj_Ball</span> 的实例，并将运行整个代码块的实例的速度和方向分配给它。</p>
  <p class="code">with (instance_nearest(x, y, obj_Ball))<br />
    {<br />
        instance_destroy();<br />
    }</p>
  <p>上述代码将销毁离运行代码的实例最近的 <span class="inline">obj_Ball</span> 的实例。</p>
  <p class="code">with(clone_struct)<br />
    {<br />
        xx = other.x;<br />
        yy = other.y;<br />
        spd = other.speed;<br />
        dir = other.direction;<br />
    }</p>
  <p>上面的代码使用 <span class="inline">with</span> ，以一个<span class="notranslate">struct</span> 为目标，将给定的<span class="notranslate">struct</span> 成员变量设置为调用代码的实例变量中存储的值。</p>
  <p class="code">var _inst = noone;<br />
    with (obj_ball)<br />
    {<br />
        if (str &gt; other.str)<br />
        {<br />
            _inst = id;<br />
        }<br />
    }<br />
    if (_inst != noone)<br />
    {<br />
        target = _inst;<br />
    }</p>
  <p>上面的代码比以前的代码稍微复杂一些，因为它使用了一个<a href="../Variables_And_Variable_Scope.htm">局部变量</a>。这个变量是<em>事件</em>或<em>脚本 </em><em>函数</em> <strong>的局部 </strong>，而不是实例或<span class="notranslate">struct</span> ，因此可以被代码块中引用的所有实例使用和访问。因此，在上面的代码中，我们将一个局部变量设置为特殊的关键字<span class="inline">noone</span> ，然后使用<span class="inline">with</span> 结构，让每个<span class="inline">obj_Ball</span> 的实例对照运行代码块的实例的<span class="inline">str</span> 变量。如果变量的值比较大，那么他们就把自己的唯一ID存储在<span class="inline">inst</span> 本地变量中，这意味着在代码结束时，只有值大于调用实例的实例（如果都不大，则是关键字<span class="inline">noone</span> ）会被存储在本地变量 <span class="inline">_inst</span> 。</p>
  <p>值得注意的是，你可以在一个调用中使用特殊的 <span class="inline"><a href="break.htm">break</a></span> 和 <span class="inline"><a href="continue.htm">continue</a></span> 语句。 <font face="Lucida Console"><span style="font-size: 16px;"><b>与</b></span></font>调用。使用 <span class="inline">break</span> ，将立即退出 <span class="inline">with</span> 代码块，并在 <span class="inline">with</span> 应该完成后转入事件或函数中的任何代码，例如。</p>
  <p class="code">var count = 0;<br />
    with (obj_Enemy)<br />
    {<br />
        if (++count &gt; 10)<br />
        {<br />
            break;<br />
        }<br />
        hp = 100;<br />
    }</p>
  <p>上面的代码<span class="notranslate">loops</span> ，通过<span class="notranslate">room</span> <span class="inline">obj_Enemy</span> 的<span class="notranslate">object</span> 中的实例，并为它找到的前10个实例设置变量 <span class="inline">hp</span> 为100。如果有超过10个的实例存在，与代码将调用 <span class="inline">break</span> ，然后结束。</p>
  <p>在 <span class="inline">with</span> 循环中使用 <span class="inline">continue</span> 的一个例子是。</p>
  <p class="code">with (obj_Enemy_Parent)<br />
    {<br />
        if (invulnerable == true)<br />
        {<br />
            continue;<br />
        }<br />
        hp -= 25;<br />
    }</p>
  <p>这段代码将<span class="notranslate">loop</span> ，通过所有的实例与父 <span class="inline">obj_Enemy_Parent</span> ，然后检查每个实例，看 <span class="inline">invulnerable</span> 实例变量是否是 <span class="inline">true</span> 。<span class="notranslate">loop</span> 如果是， <span class="inline">continue</span> 关键字就会结束当前的迭代，转到下一个可用的实例，否则就从 <span class="inline">hp</span> 变量中删除25。这将重复进行，直到所有具有该父类的实例都被检查过。</p>
  <div data-conref="../../../assets/snippets/Instance_creation_order_warning.hts"> </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="../Language_Features.htm">语言特点</a></div>
        <div style="float:right">下一步。 <a href="return.htm"><span class="notranslate">return</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
with
-->
  <!-- TAGS
with
-->
</body>
</html>