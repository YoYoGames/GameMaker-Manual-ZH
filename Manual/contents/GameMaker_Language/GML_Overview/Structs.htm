<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>结构和构造器</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Structs" />
  <meta name="rh-index-keywords" content="Structs" />
  <meta name="search-keywords" content="structs,new,delete,struct" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>结构和构造器</h1>
  <p><strong>结构 </strong>是一个容纳其他变量的集合的变量。<span class="notranslate">struct</span> 持有的变量可以是之前提到的任何<a href="Data_Types.htm">数据类型</a>，这些变量可以在最初的<span class="notranslate">struct</span> 声明之后被读出和写入，你也可以在声明之后向<span class="notranslate">struct</span> 添加更多的变量。</p>
  <p>在<span class="notranslate">struct</span> 中使用的变量应遵循通常的变量命名方案，即：不能以数字开头，只能由字母数字字符和下划线&quot;_&quot;字符组成，还要注意，<span class="notranslate">struct</span> 的内容<em>与创建它的实例或函数无关</em>，因此，你可以--如果你愿意--使用内置变量名称，如<span class="inline">image_index</span> 或 <span class="inline">x</span> 和 <span class="inline">y</span> 。</p>
  <p>在初始创建之后，<span class="notranslate">structs</span> ，在它们存在的时候没有任何处理开销，尽管它们<i>会</i>在内存中占用空间。<span class="notranslate">struct</span> 语法如下。</p>
  <p class="code"><i>&lt;variable&gt;</i> =<br />
    {<br />
    <i>    &lt;variable&gt;</i> : <i>&lt;value&gt;</i>,<br />
    <i>    &lt;variable&gt;</i> : <i>&lt;value&gt;</i>,<br />
        etc...<br />
    };
  </p>
  <p>因此，这在实践中的一个例子是。</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;<br />
    };</p>
  <p>上面的代码在变量 <span class="inline">mystruct</span> 中创建了一个实例作用域<span class="notranslate">struct</span> ，并在其中填充了一些值（<span class="notranslate">structs</span> 可以在本地、实例和全局作用域中创建，就像其他变量一样--更多信息请参见 "<a href="Variables_And_Variable_Scope.htm">变量和变量作用域</a>"部分）。请注意，在最初创建<span class="notranslate">struct</span> 的时候，你不必填充其内容，你可以通过简单的操作创建一个空的<span class="notranslate">struct</span> 。</p>
  <p class="code">mystruct = {};</p>
  <p>然后，变量可以在游戏代码的稍后阶段被添加到这个<span class="notranslate">struct</span> 。要在之后添加它们，你可以使用点运算符（与在<a href="Addressing_Variables_In_Other_Instances.htm">其他实例</a>中<a href="Addressing_Variables_In_Other_Instances.htm">寻址变量的</a>方法相同）。 </p>
  <p class="code">mystruct.newItem = &quot;Some Text&quot;;</p>
  <p>这与这样初始化<span class="notranslate">struct</span> ，结果是一样的。 </p>
  <p class="code">mystruct =<br />
    {<br />
        newItem : &quot;Some Text&quot;<br />
    };</p>
  <p>下面是一个带有各种变量和数据类型的<span class="notranslate">struct</span> 的例子。</p>
  <p class="code">var _xx = 100;<br />
    mystruct =<br />
    {<br />
        a : 10,<br />
        b : &quot;Hello World&quot;,<br />
        c : int64(5),<br />
        d : _xx + 50,<br />
        e : function(a, b)<br />
            {<br />
                return a + b;<br />
            },<br />
        f : [ 10, 20, 30, 40, 50 ],<br />
        g : image_index<br />
    };</p>
  <p>你会注意到在上面的代码中，你也可以在<span class="notranslate">runtime</span> 中定义方法和使用<span class="notranslate">structs</span> 函数，你也可以在<span class="notranslate">struct</span> 声明中使用局部变量和实例变量。</p>
  <h3 id="inst_in_struct"><span class="notranslate">Struct</span> 声明中的实例变量？</h3>
  <p>例如，你会注意到在上面的例子中，<span class="notranslate">struct</span> 变量 &quot;g &quot;被设置为 <span class="inline">image_index</span> ，它是一个实例变量。你可能认为在这种情况下需要使用<a href="Instance_Keywords.htm">关键字</a> <span class="inline">other</span> 来获取实例变量，但这是不必要的。基本上，当你定义一个结构时<strong>，冒号&quot;: &quot;左边的所有成员变量都是<em>结构</em></strong>变量，而右边的值和变量使用定义结构的范围（在这种情况下是实例）。</p>
  <p>让我们看一个简单的例子来说明这一点。假设你想用变量 &quot;x &quot;和 &quot;y &quot;定义一个<span class="notranslate">struct</span> ，你想把它们设置为定义<span class="notranslate">struct</span> 的实例的 &quot;x &quot;和 &quot;y&quot;。实际上，代码会是这样的：</p>
  <p class="code">mystruct =<br />
    {<br />
        x : x,<br />
        y : y<br />
    };</p>
  <p>在上面的代码中，<span class="notranslate">struct</span> 成员变量 <span class="inline">x</span> 和 <span class="inline">y</span> 被设置为实例变量 <span class="inline">x</span> 和 <span class="inline">y</span> 中的值，因为冒号&quot;: &quot;的右侧是指定义<span class="notranslate">struct</span> 的实例。值得注意的是，这意味着你<em>不能</em>使用<span class="notranslate">struct</span> 成员变量来定义<span class="notranslate">struct</span> 声明中的后续变量。例如，下面的内容会给你一个错误。</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 10,<br />
        b : 10,<br />
        c : a + b<br />
    }</p>
  <p>错误的发生是因为变量 <span class="inline">a</span> 和 <span class="inline">b</span> 实际上是在定义<span class="notranslate">struct</span> 的范围内被评估的（它们在冒号&quot;: &quot;的右侧），而<em>不是</em>在<span class="notranslate">struct</span> 本身被定义的变量。<strong></strong></p>
  <h3 style="padding-left: 20px"><em><strong style="margin-left: 0px">重要的是!</strong></em>  你<strong>不能 </strong>使用任何内置的 <em><strong>全球 </strong></em>范围内的变量作为<span class="notranslate">struct</span> 成员名称，例如： <span class="inline">game_id</span> 或 <span class="inline">fps</span> 。你可以在以下页面找到这些全局变量的完整列表。</h3>
  <ul class="colour">
    <li><a href="Struct_Forbidden_Variables.htm">结构禁忌变量</a></li>
  </ul>
  <p>一旦定义了一个<span class="notranslate">struct</span> ，你就可以使用 &quot;点 &quot;符号来访问其中的数据，像这样。</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;<br />
    }<br />
    <br />
    mystring = mystruct.b + string(mystruct.a);
  </p>
  <p>你也可以对<span class="notranslate">struct</span> 内的变量进行操作，或者在函数中使用它们，就像你对其他变量一样。比如说。</p>
  <p class="code">mystruct.a += 1;<br />
    mystruct.b = mystruct.a + 20;<br />
    mydir = point_direction(mouse_x, mouse_y, mystruct.xx, mystruct.yy);</p>
  <p>最后，<span class="notranslate">structs</span> ，里面可以嵌套其他<span class="notranslate">structs</span> ，像这样。</p>
  <p class="code">mystruct =<br />
    {<br />
        a :<br />
        {<br />
            aa : &quot;This is an example&quot;<br />
        },<br />
        b :<br />
        {<br />
            bb : &quot;And another one&quot;<br />
        },<br />
    };</p>
  <p>要访问这样的嵌套<span class="notranslate">structs</span> ，你仍然会使用点符号，像这样。</p>
  <p class="code">var _str = mystuct.a.aa + &quot; &quot; + mystruct.b.bb;<br />
    show_debug_message(_str);</p>
  <p>另一种访问<span class="notranslate">struct</span> 中的数据的方法是通过使用 <a href="Language_Features/with.htm"><span class="inline">with()</span></a>函数。因此，举例来说，你可以这样做。</p>
  <p class="code">with(mystruct)<br />
    {<br />
        a += other.x;<br />
    }</p>
  <p>使用 <span class="inline">with()</span> ，可以将代码的作用域改为给定的<span class="notranslate">struct</span> ，在这里你可以在结构作用域中操作成员变量。注意，在这个例子中，我们也使用了<a href="Instance_Keywords.htm"><span class="inline">other</span> </a> 关键字。这就像在一个实例中使用 <span class="inline">with()</span> 时一样，将引用实际运行代码块的实例（或<span class="notranslate">struct</span> ）。</p>
  <p>当一个<span class="notranslate">struct</span> ，不再需要它时，可以使用操作符从内存中删除。 <a href="Language_Features/delete.htm"><span class="inline">delete</span></a><span class="notranslate">flags</span> 操作符从内存中删除，<span class="notranslate">struct</span> ，因为它可以被垃圾收集。这不是严格要求的，因为如果你的代码中不再引用<span class="notranslate">struct</span> ，<a class="glossterm" data-glossterm="垃圾收集器" href="#">垃圾收集器</a>可能会自动这样做，但这样做是很好的做法，我们推荐这样做（例如，在一个实例的<a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">Clean Up事件</a>中调用 <span class="inline">delete</span> ，明确告诉垃圾收集器一个实例范围<span class="notranslate">struct</span> 要被删除）。下面是一个例子。</p>
  <p class="code">// Create event<br />
    mystruct =<br />
    {<br />
        pos_x : x,<br />
        pos_y : y,<br />
        count : 1000<br />
    };<br />
    <br />
    // Clean Up event<br />
    delete mystruct;
  </p>
  <h2 id="constr">构造函数</h2>
  <p>你也可以使用<a href="Script_Functions.htm">脚本函数</a>或<a href="Method_Variables.htm">方法</a>来创建可以用来生成新的<span class="notranslate">structs</span> ，这需要对函数使用 <span class="inline">constructor</span> 关键字和 <a href="Language_Features/new.htm"><span class="inline">new</span></a>操作符，当从这样的函数中创建一个<span class="notranslate">struct</span> 。请看下面这个函数。</p>
  <p class="code">function Vector2(_x, _y) <strong>constructor</strong><br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function(_vec2)<br />
        {<br />
            x += _vec2.x;<br />
            y += _vec2.y;<br />
        }<br />
    }
  </p>
  <p>或者，使用方法变量的语法。</p>
  <p class="code">Vector2 = function(_x, _y) constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function(_vec2)<br />
        {<br />
            x += _vec2.x;<br />
            y += _vec2.y;<br />
        }<br />
    }
  </p>
  <p>在这里，我们创建了一个名为<span class="inline">Vector2</span> 的函数，并通过在其定义后添加 <span class="inline">constructor</span> 关键字，告诉<span data-keyref="GameMaker Name">GameMaker</span>这是一个用于创建结构的函数。然后你可以像这样调用这个构造函数。</p>
  <p class="code">v2 = new Vector2(10, 10);</p>
  <p>变量 <span class="inline">v2</span> 现在将包含一个<span class="notranslate">struct</span> 与变量 <span class="inline">x</span> 和 <span class="inline">y</span> 以及 <a href="Functions/Static_Variables.htm"><span class="notranslate">static</span></a><a href="Method_Variables.htm">方法变量</a> <span class="inline">Add</span> 。</p>
  <p>你也可以在你的构造函数中使用可选的参数。</p>
  <p class="code">function Vector2(<strong>_x = 0, _y = 0</strong>) constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    }</p>
  <p>如果在调用函数时没有指定 <span class="inline">_x</span> 和 <span class="inline">_y</span> 参数，该构造函数现在将使用 <span class="inline">0</span> 。这意味着你可以创建一个新的 <span class="inline">Vector2</span> <span class="notranslate">struct</span> ，而不需要指定任何参数。</p>
  <p class="code">empty_vector = new Vector2();</p>
  <h2>继承性</h2>
  <p>以这种方式创建的函数也将支持单一<b>继承</b>，即：你可以创建一个构造函数，从另一个构造函数<span class="notranslate">inherits</span> 数据。</p>
  <p class="note"><strong>注意</strong>：当使用继承工作时，你不能使用方法变量来定义构造函数，只能使用<span class="notranslate">script</span> 函数。</p>
  <p>例如，我们在上面创建了<span class="inline">Vector2</span> 构造函数，所以我们可以将其作为另一个构造函数的 &quot;父&quot;，我们将其称为<span class="inline">Vector3</span> 。</p>
  <p class="code">function <strong>Vector3(_x, _y, _z) </strong><strong>:</strong><strong> Vector2(_x, _y) </strong>constructor<br />
    {<br />
        z = _z;<br />
    <br />
        static Add = function( _vec3 )<br />
        {<br />
            x += _vec3.x;<br />
            y += _vec3.y;<br />
            z += _vec3.z;<br />
        }<br />
    }
  </p>
  <p>正如你所看到的，在定义函数时，我们使用冒号&quot;<span class="inline">:</span>&quot;来分隔新的构造函数和要继承的父构造函数。子构造函数 (<span class="inline">Vector3</span>) 将 <span class="inline">_x</span> 和 <span class="inline">_y</span> 参数传递给父构造函数 (<span class="inline">Vector2</span>) ，用于先运行父构造函数，之后再执行子构造函数。这样，子构造函数就得到了父构造函数的变量 (<span class="inline">x</span> 和 <span class="inline">y</span>) ，也可以定义自己的变量 (<span class="inline">z</span>) 。</p>
  <p>你也可以将常量值传递给父构造函数，这样，某个子构造函数总是向其父构造函数提供相同的值。</p>
  <p class="code">function Item(damage) constructor<br />
    {<br />
        my_damage = damage;<br />
    }<br />
    <br />
    function BasicSword() : Item(10) constructor<br />
    {}<br />
    <br />
    var _basic_sword = new BasicSword();<br />
    show_debug_message(_basic_sword.my_damage); // Prints 10
  </p>
  <p>这意味着基本剑的伤害总是 <span class="inline">10</span> ，因为它把这个值传递给它的父构造函数，而不管它自己的参数是什么。</p>
  <p>请注意，在子构造函数中为一个参数分配默认值将覆盖父构造函数对该参数的默认值。请看下面的例子。</p>
  <p class="code">function Parent(value = 10) constructor<br />
    {<br />
        show_debug_message(value);<br />
    }<br />
    <br />
    function Child(value = 20) : Parent(value) constructor<br />
    {<br />
        show_debug_message(value);<br />
    }<br />
    <br />
    var _child = new Child();
  </p>
  <p>这两个构造函数都会向输出日志打印 <span class="inline">20</span> ，因为那是子构造函数设置的参数的默认值，而且同样的值被传递到父构造函数。</p>
  <p>关于 <span class="inline">new</span> 和 <span class="inline">delete</span> 操作员的更多细节，请见以下页面。</p>
  <ul class="colour">
    <li><a href="Language_Features/new.htm"><span class="inline">new</span></a></li>
    <li><span class="inline"><a href="Language_Features/delete.htm"><span class="inline">delete</span> </li>
  </ul>
  <h2>字符串输出</h2>
  <p>关于<span class="notranslate">structs</span> ，最后要提到的一点是，你可以改变它们向控制台输出的内容，对于<span class="notranslate">debugging</span> 。默认情况下，在 上调用函数 <a href="../GML_Reference/Debugging/show_debug_overlay.htm"><span class="inline">show_debug_message()</span></a><span class="notranslate">struct</span> 就会输出<span class="notranslate">struct</span> 的内容（如上图所示）。然而，可以通过给<span class="notranslate">struct</span> 添加一个专门命名的方法来定制这个信息，这个方法叫做 <span class="inline">toString</span> 。</p>
  <p class="code">mystruct =<br />
    {<br />
        a : 20,<br />
        b : &quot;Hello World&quot;,<br />
    <br />
        toString : function()<br />
        {<br />
            return &quot;This stuct says &quot; + b + &quot;, &quot; + string(a) + &quot; times!&quot;;<br />
        }<br />
    }<br />
    show_debug_message(mystruct);
  </p>
  <p>现在，当 <span class="inline">show_debug_message()</span> 函数被调用时， <span class="inline">toString</span> 方法将被用来生成输出，并且--通过上述例子--你将得到。</p>
  <p class="code">This struct says Hello World, 20 times!</p>
  <p>请注意，你也可以调用 <a href="../GML_Reference/Strings/Strings.htm"><span class="inline">string()</span></a><span class="notranslate">struct</span> 函数，并使用该函数将内容--或 <span class="inline">toString</span> 方法--显示在屏幕上，或将其保存到文件中，或其他什么，例如。</p>
  <p class="code">var _str = string(mystruct);<br />
    draw_text(32, 32, _str);</p>
  <p>最后，有一些运行时函数，你可以在<span class="notranslate">structs</span> ，以获得它们所包含的变量，以及其他一些东西。你可以在下面的章节中找到它们。</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">变量函数</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="GML_Overview.htm">GML概述</a></div>
        <div style="float:right">下一步。<a data-xref="{title}" href="Commenting_Code.htm">注释代码</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Structs
struct
constructor
-->
  <!-- TAGS
structs
-->
</body>
</html>