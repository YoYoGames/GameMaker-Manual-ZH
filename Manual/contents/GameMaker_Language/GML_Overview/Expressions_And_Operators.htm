<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>表达式和运算符</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different GML expressions" />
  <meta name="rh-index-keywords" content="Expressions And Operators,=,&amp;&amp;,||,^^,&lt;,&gt;,&lt;=,&gt;=,==,!=,|,&amp;,^,&lt;&lt;,&gt;&gt;,+,-,*,/,++,--,div,%,mod,!,~" />
  <meta name="search-keywords" content="expressions,order of operation,operators,div,mod,&amp;&amp;,||,xor,^^,|,^,&amp;,++,--,&lt;&lt;,&gt;&gt;,&lt;=,&gt;=,==,=,:=,$" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>表达式和运算符</h1>
  <h2>表达方式</h2>
  <p>表达式是一个数学短语，它可以包含普通数字、变量、<span class="notranslate">strings</span> ，或函数以及一个或多个<strong>运算符 </strong>（如加、减、乘等...）。表达式中使用的值可以是实数（例如： <span class="inline">3.4 * 6</span> ），以 <span class="inline">$</span> 符号开头的十六进制数字（例如： <span class="inline">$00FFAA | $88FFAA</span> ），双引号之间的<span class="notranslate">strings</span> （例如： <span class="inline">&quot;hello&quot;</span> + <span class="inline">&quot;world&quot;</span> ），或者使用多个运算符和值的更复杂的表达式。</p>
  <h2>操作员</h2>
  <p>以下是提供给表达式使用的运算符。</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">指派（=）。</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><span class="inline2"><b>=</b></span>是用来给一个变量赋值的。请注意，这<i>也</i>可以用于<span data-keyref="GameMaker Name">GameMaker</span>中的变量比较，你可能会在例子和其他人的代码中看到这个。然而，这是<i>GameMaker</i>旧版本的遗留问题，你应该使用<b>==</b>运算符进行比较，使用<b>=</b>进行赋值，正如这些例子中所示。</p>
    <p class="code">a = 12;<br />
      speed = 5;<br />
      val = (old_val + 5);</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">组合 (&amp;&amp;, ||, ^^)</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot"><b><span class="inline2">&amp;&amp;</span>,<span class="inline2">||</span>,<span class="inline2">^</span>^ (<span class="inline2">and</span>,<span class="inline2">or</span>and<span class="inline2">xor</span></b>)用于组合布尔值，以获得真或假。如果以下任何一个例子解析为 <span class="inline">true</span> ，那么代码将被运行。</p>
    <p class="code">if (a == b &amp;&amp; c == d) { do something... }  // and<br />
      if (a == b || c == d) { do something... }   // or<br />
      if (a == b ^^ c == d) { do something... }  // xor</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">虚无(?, ?=)</a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="note"><span class="note">注意</span>&quot;Nullish &quot;只是指一个值等于<span class="inline2">未定义</span>或指针<span class="inline2">_null</span>。</p>
    <p class="dropspot"><span class="inline2">?</span>"是一个nullish凝聚运算符，如果给定的值是<span class="inline2">未定义的</span>或指针<span class="inline2">_null</span>，它将返回一个指定的表达式。这个操作符希望使用以下语法。</p>
    <p class="code_plain">(input??null_output)</p>
    <p class="dropspot">如果<span class="inline2">输入</span> <span class="inline2">未定义</span>或指针<span class="inline2">为空</span>，表达式将返回<span class="inline2">null_output</span>值；但是在所有其他情况下，它将简单地返回<span class="inline2">输入</span>值。这可以用来为一个变量定义一个 &quot;默认 &quot;值，以防变量本身不持有有效的值。</p>
    <p class="dropspot">请考虑以下例子。</p>
    <p class="code_plain">username = data.username ? &quot;INVALID USERNAME&quot;;</p>
    <p class="dropspot">在这里，<span class="inline2">用户名</span>变量将得到存储在<span class="inline2">data.username</span>中的值，但是如果<span class="inline2">data.username</span>碰巧是<span class="inline2">未定义的</span>或<span class="inline2">指针为空</span>，这个变量将得到<span class="notranslate">string</span> <span class="inline2">&quot;INVALID USERNAME&quot;</span>。这个例子确保了任何使用<span class="inline2">username</span>变量的函数调用不会因为被赋予一个空值而导致错误，并且用户知道他们的用户名没有被返回。</p>
    <p class="note"><span class="note">注意</span>nullish凝聚运算符右侧的表达式只有在输入值为nullish时才会被执行，这意味着在RHS表达式中包含的任何函数调用只有在输入值为nullish时才会被执行。</p>
    <hr />
    <p class="dropspot"><span class="inline2">?=</span>类似于上述的nullish凝聚运算符，但专门用于变量赋值。这个运算符希望使用以下语法。</p>
    <p class="code">variable ??= null_value</p>
    <p class="dropspot">如果<span class="inline2">变量</span> <span class="inline2">未定义</span>或指针<span class="inline2">为空</span>，<span class="inline2">null_value</span>值将被分配给它；否则变量将保持不变。这可以用来在变量持有nullish值时为其分配一个自定义的 &quot;默认 &quot;值。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">比较（&lt;, &lt;=, ==, !=, &gt;, &gt;=）。</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><b><span class="inline2">&lt;</span>,<span class="inline2">&lt;=</span>,<span class="inline2">==</span>,<span class="inline2">!=</span>,<span class="inline2">&gt;</span>,<span class="inline2">&gt;=</span></b>是比较，只能给出一个<span class="inline">true</span> 或<span class="inline">false</span> 的结果（其中 true 也可以解释为 1, false 解释为 0）。使用的例子。</p>
    <p class="code">if (a &lt; b) {do something...}<br />
      if (a != b) {do something...}</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">位法（|, &amp;, ^, &lt;&lt;, &gt;&gt;）。</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot"><b><span class="inline2">|</span>,<span class="inline2">&amp;</span>,<span class="inline2">^</span>,<span class="inline2">&lt;&lt;</span>,<span class="inline2">&gt;&gt;</span> </b>用于执行位操作，其中 | = 位操作或，&amp; = 位操作和，^ = 位操作 xor，&lt;&lt; = 左移，&gt;&gt; = 右移。使用的例子。</p>
    <p class="code">x = (x &amp; $ffffffe0) + 32;<br />
      if (y ^ $1f) &gt; 0 {do something...};</p>
    <p class="dropspot">你可以从以下章节中找到更多关于如何使用位运算符和它们的作用的信息。<a href="../../Additional_Information/Bitwise_Operators.htm">位运算符</a>。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">算术（+, -, *, /）。</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot"><b><span class="inline2">+</span>,<span class="inline2">-</span>,<span class="inline2">*</span>,<span class="inline2">/</span></b>分别是加法、减法、乘法和除法。使用的例子。</p>
    <p class="code">c = a * b;<br />
      str = a + &quot;world&quot;;</p>
    <p class="note"><span class="note"><b>注意</b></span>浮点数在除以零时不会停止，因为它们会得到一个无穷大的答案。如果A和B是整数（int32或int64），那么除法将作为整数进行（除以0将被检查并出错。否则，它将作为浮点除法进行（没有除以0的检查）。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">递增/递减 (++, --)</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot"><span class="inline2"><strong>++</strong></span>, <span class="inline2"><strong>--</strong></span>用于从一个值中加或减一<span class="inline2">（1</span>）。值得注意的是，将其放在要加减的数值之前或之后，结果会略有不同。例如。</p>
    <ul class="dropspotlist">
      <li class="dropspot"><span class="inline">++a</span> 将递增该变量并返回递增后的值。</li>
      <li class="dropspot"><span class="inline">a++</span> 将递增该变量，但返回其递增前的值。</li>
    </ul>
    <p class="dropspot">因此，如果你有这样的东西。</p>
    <p class="code">var a = 1;<br />
      show_debug_message(string(a++));<br />
      show_debug_message(string(++a));</p>
    <p class="dropspot">调试输出将是1和3。下面是一些使用的例子。</p>
    <p class="code">for (var i = 0; i &lt; 10; i++;)<br />
      {<br />
          do something...<br />
      }</p>
    <p class="code">if (hit == true)<br />
      {<br />
          --score;<br />
      }</p>
    <p class="note"><strong>注意</strong>：在<span class="notranslate">YoYo</span> 编译器的目标平台上（那些标有（YYC）的平台），这些表达式从左到右进行评估，而在所有其他目标平台上，它们从右到左进行评估，也就是说，这个。</p>
    <p class="code">val = max(num, ++num, num++);</p>
    <p class="note">将根据平台的不同给出不同的结果。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">除法和模数 (div, %, mod)</a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot"><strong><span class="inline2">div</span>,<span class="inline2">mod</span>(<span class="inline2">%</span></strong>) 是除法和模数，其中div给你一个值可以分成的量，只产生一个整数商，而mod只给你除法的剩余部分。请注意，你只能用整数值进行除法或模。使用的例子。 </p>
    <p class="code">secs = time mod 60;<br />
      time_str = string(time div 60);</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">单数（！，-，~）。</a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot">提供了以下<strong>单项</strong>运算符。</p>
    <ul class="dropspotlist">
      <li class="dropspot"><span class="inline2"><strong>!</strong></span>: 布尔型 &quot;不&quot;，所以<span class="inline">!true == false</span></li>
      <li class="dropspot"><span class="inline2"><strong>-</strong></span>：否定下一个实数或整数值（对<span class="notranslate">strings</span> 或布尔运算无效）。</li>
      <li class="dropspot"><span class="inline2"><strong>~</strong></span>: 否定下一个值。</li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <h2>表达式分组</h2>
  <p><i></i>作为所有表达式中的值，你可以使用数字、变量或返回值的函数，而且子表达式也可以放在括号中。所有运算符都适用于实数值，但<em>比较 </em>也适用于<span class="notranslate">strings</span> ，<strong>&quot;+</strong>&quot;运算符可用于串联字符串。</p>
  <p>当在一个表达式中进行多个操作时，使用大括号 <span class="inline">()</span> 来区分操作顺序是<b>非常重要的</b>，因为如果不以这种方式明确说明，不同的平台可能会执行不同的操作。例如，考虑下面的代码。</p>
  <p class="code">a = b == c || d;</p>
  <p>不同的目标编译器将以不同的顺序执行操作，因为它们没有明确显示，引起 &quot;奇怪 &quot;的结果，当你玩你的游戏时，你可能不会想到。为了避免这种情况，使用 <span class="inline">()</span> ，把各部分分开，像这样。</p>
  <p class="code">a = (b == c || d);   //better<br />
    a = ((b == c) || d); //best</p>
  <h2>报表分组</h2>
  <p>当在一个代码块中使用各种操作和表达式时，这些也应该被分开。例如，下面的代码<em>看起来</em>很有效。</p>
  <p class="code">if my_var == your_var ++their_var;</p>
  <p>然而，编译器可以用两种方式之一来解释这一点。</p>
  <p class="code">if my_var == your_var<strong>++</strong> then their_var;<br />
    <br />
    // or<br />
    <br />
    if my_var == your_var then <strong>++</strong>their_var;
  </p>
  <p>现在，你看一下这段代码就知道，其中一个有点愚蠢，但那是因为我们知道我们想要实现什么，我们想要发生什么，但编译器不知道。它所看到的是两个变量和它们之间的++运算符，所以它必须选择哪一个来应用它。因此，你应该<strong>总是明确地将表达式、操作和语句放在括号里</strong>。上述代码的正确版本应该是。</p>
  <p class="code">if (my_var == your_var)<br />
    {<br />
        ++their_var;<br />
    }</p>
  <p>这样做可能会显得比较啰嗦，但对所执行的操作没有任何歧义，而且在所有平台上的编译和行为都是一致的。还要注意的是，虽然你现在可以不使用方括号来链接表达式和语句，但这是一个遗留功能，今后可能会被废弃并从<span class="notranslate">GML</span> ，所以现在适当地使用方括号将 &quot;保护 &quot;你的代码（而且通常是好的做法）。</p>
  <p>这里有一些各种不同表达方式的最后例子。</p>
  <p class="code">{<br />
        x = 23 div 2;<br />
        colour = $FFAA00 + $00BB12;<br />
        str = &quot;hello&quot; + &quot;world&quot;;<br />
        y += 5;<br />
        x *= y;<br />
        x = y &lt;&lt; 2;<br />
        x = 23 * ((2 + 4) / sin(y));<br />
        b = (x &lt; 5) &amp;&amp; !((x == 2) || (x == 4));<br />
    }</p>
  <p>最后要注意的是，还有一些表达式的 &quot;捷径&quot;，称为<b>访问器</b>，用于某些<a href="../GML_Reference/Data_Structures/Data_Structures.htm">数据结构</a>和<a href="Arrays.htm">数组</a>。这些使你能够在这些格式中快速和容易地添加或替换数据，而不使用任何函数调用。关于完整的细节，请看下面的页面</p>
  <ul class="colour">
    <li><a href="Accessors.htm">访问者</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="GML_Overview.htm">GML概述</a></div>
        <div style="float:right">下一步。<a data-xref="{title}" href="Script_Functions.htm">脚本函数和变量</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
div
mod
bitwise operators
bitshift
and
or
xor 
&amp;&amp;
||
^^
%
|
&amp;
^
&lt;&lt;
&gt;&gt;
bitwise or
bitwise and
bitwise xor
bitshift left
bitshift right
&lt;
&lt;=
==
!=
&gt;
&gt;=
++
$
hexadecimal
-->
  <!-- TAGS
expressions_operators
-->
</body>
</html>