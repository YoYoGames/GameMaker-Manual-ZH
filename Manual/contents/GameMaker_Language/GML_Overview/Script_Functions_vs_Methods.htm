<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>脚本函数与方法</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="template" content="../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page explaining practical differences between Script Functions and Methods." />
  <meta name="rh-index-keywords" content="Script Functions vs. Methods" />
  <meta name="search-keywords" content="calling methods, calling script functions, method performance" />
</head>
<body>
  <h1>脚本函数与方法</h1>
  <p>本页包括关于使用<span class="notranslate">script</span> 函数与方法的基本信息。</p>
  <h2>基本差异</h2>
  <p>用这种语法创建一个<a href="Script_Functions.htm">脚本函数</a>。</p>
  <p class="code">function name()<br />
    {<br />
        code;<br />
    }</p>
  <p>一个<a href="Method_Variables.htm">方法变量</a>是用这种语法创建的。</p>
  <p class="code">name = function()<br />
    {<br />
        code;<br />
    }</p>
  <p>你应该使用<span class="notranslate">scripts</span> 中的第一个语法来创建全局函数，这些函数可以从你游戏中的任何作用域调用。</p>
  <p>在<a href="Structs.htm">结构体/构造体</a>和<span class="notranslate">objects</span> 中创建函数时，你应该使用第二种语法。这种语法创建了一个包含方法的变量。</p>
  <h2>直接通话</h2>
  <p>你可以通过使用圆括号<span class="inline2">（）</span>直接调用<span class="notranslate">script</span> 函数和方法，就像<a href="Runtime_Functions.htm">运行时函数</a>一样。</p>
  <p class="code">// Create the function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Call the function<br />
    reset_x();
  </p>
  <p>你也可以使用函数 <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a>来运行一个<span class="notranslate">script</span> ，尽管它现在是一个传统的函数，不建议使用。</p>
  <h2>间接呼叫。方法</h2>
  <p>你可以在另一个变量中存储一个方法的引用，以便以后通过这个不同的变量调用它。</p>
  <p class="code">// Create method<br />
    reset_alpha = function()<br />
    {<br />
        image_alpha = 1;<br />
    }<br />
    <br />
    // Pass reference and call<br />
    temp_1 = reset_alpha;<br />
    temp_1();
  </p>
  <p class="note"><span class="note">注意</span>看到代码中没有在<span class="inline2">reset_alpha</span>后面加上<span class="inline2">（）</span>。这是因为我们正在读取方法的引用，而不是调用它。</p>
  <p>在这个例子中，调用<span class="inline2">temp_1</span>将调用<span class="inline2">reset_alpha</span>，因为它存储了对该<strong>方法</strong>的引用。</p>
  <p>你完全可以用这种方式来传递方法引用。但在使用<span class="notranslate">script</span> 函数时，有一个注意点。</p>
  <h2>间接调用。 <span class="notranslate">Script</span> 职能</h2>
  <p>你也可以在另一个变量中存储对一个<span class="notranslate">script</span> 函数的引用。</p>
  <p class="code">// Create function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Store reference<br />
    temp_1 = reset_x;
  </p>
  <p>现在，你可以通过这样做来调用<span class="inline2">temp_1</span>。</p>
  <p class="code">temp_1();</p>
  <p>然而，由于这个变量指的是一个<strong>脚本函数</strong>，它首先要把它转换成一个<strong>方法</strong>，然后再调用它。</p>
  <p>这很容易导致内存占用的增加，特别是如果你每一帧都调用它的话，因为引擎现在不得不每一帧都为这个调用创建一个新的方法。 </p>
  <p>那么，解决方案是什么呢？</p>
  <ul class="colour">
    <li>使用 <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a>来通过其引用调用<span class="notranslate">script</span> 函数，这不会创建一个方法。</li>
    <li>或者，更好的解决办法是：在传递函数的引用时，将你的<span class="notranslate">script</span> 函数转换<a href="../GML_Reference/Variable_Functions/method.htm">为一个方法</a>。</li>
  </ul>
  <p>要实现第二个解决方案，你的代码将是这样的。</p>
  <p class="code">temp_1 = method(undefined, reset_x);</p>
  <p>这是从<span class="inline2">reset_x</span>脚本函数中创建一个新方法，使用 <a href="../GML_Reference/Variable_Functions/method.htm"><span class="inline">method()</span></a>.</p>
  <p>现在使用括号调用<span class="inline2">temp_1()</span>不会增加内存的使用，因为方法已经为你创建了。</p>
  <p>同样，这只适用于你通过存储在变量中的引用<strong>间接</strong>调用<span class="notranslate">script</span> 函数的情况。直接调用它不会导致这种问题。</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>返回。<a data-xref="{title}" href="GML_Overview.htm">GML代码概述</a></div>
        <div>下一步。<a data-xref="{title}" href="Functions/Static_Variables.htm">静态变量</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions vs. Methods
-->
  <!-- TAGS
script_functions_vs_methods
-->
</body>
</html>