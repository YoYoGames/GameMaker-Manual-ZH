<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>脚本函数和变量</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of scripts to create functions and global variables and macros" />
  <meta name="rh-index-keywords" content="Script Functions And Variables" />
  <meta name="search-keywords" content="user defined functions,script functions,gmcallback_,gmcallback" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>脚本函数和变量</h1>
  <p>脚本资产本质上是一个或多个用户定义的函数或变量的集合，是你自己在<a href="../../The_Asset_Editors/Scripts.htm">脚本编辑器</a>中写的代码片段。你在<span class="notranslate">script</span> 中定义的函数可以解决表达式、返回值或做其他任何<span class="notranslate">GameMaker Language</span> 允许的事情，就像内置的<a href="Runtime_Functions.htm">运行时函数</a>一样。</p>
  <p>如果你有一个代码块在多个地方或<span class="notranslate">object</span> ，或者你想让一个代码块以模块化的方式在多个<span class="notranslate">objects</span> ，通常应该使用脚本函数。使用<span class="notranslate">scripts</span> 来定义函数，意味着你可以在需要的时候只改变一次函数，而这种改变将被每一个调用该函数的<span class="notranslate">object</span> 所 &quot;接收&quot;。</p>
  <p>从组织的角度来看，脚本也可以非常方便，因为它们允许你创建属于某个类别的函数组--例如，你可能有几个函数都与游戏中实例之间的碰撞有关，所以你可以创建一个 &quot;<span class="inline">Collision_Functions</span>&quot;<span class="notranslate">script</span> ，并将所有这些函数都存储在其中。</p>
  <p>也请看。<a data-xref="{title}" href="Script_Functions_vs_Methods.htm">脚本函数与方法</a></p>
  <h2>创建功能</h2>
  <p>当创建一个含有函数的<span class="notranslate">script</span> ，必须使用以下格式创建函数。</p>
  <p class="code"><span>function name( parameter1, parameter2, ... )<br />
      {</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p>或。</p>
  <p class="code"><span><span>name = </span>function( parameter1, parameter2, ... )</span><br />
    <span>{</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p class="note">要在<span class="notranslate">GML</span> Visual中创建一个函数，使用<a data-xref="{title}" href="../../Drag_And_Drop/Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Declare A New Function</a>。启用其 &quot;Temp &quot;选项来创建一个方法变量（上面显示的第二个语法）。</p>
  <p>然而，一般来说，对于<span class="notranslate">script</span> ，你会使用<em>第一种 </em>形式，因为它将定义该函数为专门的<span class="notranslate">script</span> ，这意味着它将是<strong>全局 </strong> <a href="Variables_And_Variable_Scope.htm">范围</a>的，被分配一个<strong>脚本索引</strong>，并且不需要 <span class="inline">global</span> 前缀来识别它，因为编译器将识别它是一个<span class="notranslate">script</span> 函数。</p>
  <p><span class="notranslate">script</span> 使用第二种形式将生成一个全局范围的<a href="Method_Variables.htm">方法变量</a>，因此它<em>不会 </em>被<span class="notranslate">IDE</span> ，在你的代码中被引用时需要使用 <span class="inline">global</span> 前缀。</p>
  <p class="note"><span class="note">注意</span>你可以通过在一个<span class="notranslate">script</span> 中使用这两种形式，然后对它们各自调用运行时函数<a href="../GML_Reference/Variable_Functions/typeof.htm">typeof()</a>来检查。一个将被归类为 &quot;数字&quot;--因为它返回一个<span class="notranslate">script</span> 索引ID--而另一个将被归类为 &quot;方法&quot;。</p>
  <h2>参数/参数</h2>
  <p>你可以为一个函数定义你自己的参数/参数，这些参数将作为局部变量提供给函数，并可用于该函数的任何用途。</p>
  <p class="code">function move(<strong>spd, dir</strong>)<br />
    {<br />
        speed = <strong>spd</strong>;<br />
        direction = <strong>dir</strong>;<br />
    }</p>
  <p>这个函数接受两个参数，并将它们的值应用于实例的 <span class="inline">speed</span> 和 <span class="inline">direction</span> 变量。现在，它可以像任何<span class="notranslate">runtime</span> 函数一样被调用，参数可以被传入。</p>
  <p class="code">var _mouse_dir = point_direction(x, y, mouse_x, mouse_y);<br />
    <br />
    <strong>move(4, _mouse_dir);</strong>
  </p>
  <h2>可选参数</h2>
  <p>如果一个参数没有被交给一个函数，它的值将是<span class="inline">undefined</span> 。你可以用它来定义<em>可选的</em>参数，并通过检查参数是否等于 <span class="inline">undefined</span> 。然而，你也可以明确地定义一个参数的默认值，当它没有被传入时，它将被用来代替 <span class="inline">undefined</span> 。</p>
  <p>你可以使用等号(<span class="inline">=</span>)为参数指定这样的默认值，使其成为一个可选变量。</p>
  <p class="code">function move(spd, <strong>dir = 90</strong>)<br />
    {<br />
        speed = spd;<br />
        direction = dir;<br />
    }</p>
  <p>如果在调用上述函数时没有传入 <span class="inline">dir</span> 参数，那么它的值将默认为 <span class="inline">90</span> ，使实例朝上移。</p>
  <p class="note"><span class="tip">提示</span>你可以从函数调用中省略参数，它们将默认为 <span class="inline">undefined</span> （或由函数定义的该参数的默认值）。<br>
    <br>
    例如，写<span class="inline">my_func(0,,,1)</span> 和写<span class="inline">my_func(0, undefined, undefined, 1)</span> 是一样的。
  </p>
  <hr />
  <p>可选变量的默认值可以是一个表达式，因此，例如，你可以在定义可选变量的同时使用变量并调用函数。注意，这样的表达式只有在函数调用中没有提供其可选参数时才会被执行。请看下面这个日志函数的例子。</p>
  <p class="code">function log(text = &quot;Log&quot;, object = object_index, time = date_datetime_string(date_current_datetime()))<br />
    {<br />
        var _string = &quot;[&quot; + string(time) + &quot;] &quot;;<br />
        _string += object_get_name(object) + &quot;: &quot;;<br />
        _string += text;<br />
        <br />
        show_debug_message(_string);<br />
    }</p>
  <p>这个函数需要三个参数，其中第一个参数默认为一个<span class="notranslate">string</span> 常量，第二个参数默认为一个实例变量（在调用实例的范围内），第三个参数默认为一个调用函数检索当前日期和时间的表达式。现在可以用最多三个参数来调用这个函数，如下面的例子所示。</p>
  <p class="code">log();<br />
    // Prints: [09-Jun-21 12:34:37 PM] Object1: Log<br />
    <br />
    log(&quot;Player Shot&quot;, obj_player, 10);<br />
    // Prints: [10] obj_player: Player Shot
  </p>
  <h2>JSDoc</h2>
  <p>我们还建议你添加注释来定义函数的属性（详见<a href="../../The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm">JSDoc注释</a>一节），这样，一个简单的<span class="notranslate">script</span> ，看起来就像这样。</p>
  <p class="code">/// @function                 log(message);<br />
    /// @param {string}  message  The message to show<br />
    /// @description              Show a message whenever the function is called.<br />
    <br />
    function log(message)<br />
    {<br />
        show_debug_message(message);<br />
    }
  </p>
  <p><span class="notranslate">script</span> 的附加功能可以使用如上所示的相同格式，在<span class="notranslate">script</span> <span class="notranslate">asset</span> 内一个接一个地添加。</p>
  <p><img alt="Multiple Functions In One Script" class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/Multiple_Functions_Scripts.png" /></p>
  <h2>返回值</h2>
  <p><span class="notranslate">scripts</span> 中的函数也可以返回一个值，就像<span class="notranslate">runtime</span> 中的函数一样，因此它们可以被用于表达式中。对于这一点，你可以使用 <a href="Language_Features/return.htm"><span class="inline">return</span></a>语句。</p>
  <p class="code">return &lt;expression&gt;</p>
  <p>应该注意的是 <strong><i>该函数的执行在返回语句处结束</i></strong>，意味着任何在<strong>返回 </strong>之后的代码都<i>不会被运行</i>。下面是一个名为&quot;<span class="inline">sqr_calc</span>&quot;的函数的简短例子，它计算传递给它的任何数值的平方，如果给定的数值不是实数，它使用<strong>return</strong>来提前结束函数，所以实际计算永远不会运行。</p>
  <p class="code">/// @function           sqr_calc(val);<br />
    /// @param {real}  val  The value to calculate the square of<br />
    /// @description        Calculate the square of the given value<br />
    <br />
    function sqr_calc(val)<br />
    {<br />
        if !is_real(val)<br />
        {<br />
            return 0;<br />
        }<br />
    <br />
        return (val * val);<br />
    }
  </p>
  <p>注意，如果你创建了一个<em>没有</em>返回值的<span class="notranslate">script</span> 函数，然后在你的代码中检查一个返回值，你将默认得到 <span class="inline">undefined</span> 。</p>
  <p>要在一段代码中调用一个<span class="notranslate">script</span> 函数，只需用调用任何<span class="notranslate">runtime</span> 函数时的相同方法--即把函数名称和参数值写在括号里。因此，上面的<span class="notranslate">script</span> 将被这样调用。</p>
  <p class="code">if keyboard_check_pressed(vk_enter)<br />
    {<br />
        val = scr_sqr(amount);<br />
    }</p>
  <p class="note"><strong>注意</strong>：当在代码编辑器中使用你自己的函数<span class="notranslate">scripts</span> ，你可以按<span> <img></span>或单击鼠标中键 <span><img> </span>来打开包含该函数的<span class="notranslate">script</span> ，以便直接编辑。</p>
  <h2>脚本名称与函数名称</h2>
  <p>重要的是要明白，<span class="notranslate">script</span> <i>名称</i> <b>与它们所包含的函数无关</b>，所以你可以用更 &quot;常识 &quot;的方式来命名你的<span class="notranslate">scripts</span> ，即：你所有的AI函数可以放在<span class="notranslate">script</span> &quot;<span class="inline">Enemy_AI</span>&quot; （遵循标准的<span class="notranslate">asset</span> 命名惯例，即只用字母数字字符和下栏&quot;_&quot;）。然而，你仍然可以在你的游戏中调用<span class="notranslate">scripts</span> - 而且你可以将<span class="notranslate">scripts</span> 的名字与你在其中定义的函数相同 - 由于<span data-keyref="GameMaker Name">GameMaker</span>存储<span class="notranslate">asset</span> 引用的方式，这可能引起一个问题。举个例子，考虑这个代码，从一个实例中调用。</p>
  <p class="code">function indirectCall(func, arg)<br />
    {<br />
        func(arg);<br />
    }<br />
    <br />
    indirectCall(myscript, arg);
  </p>
  <p>上面的代码试图在一个方法中调用一个名为 &quot;myscript &quot;的<span class="notranslate">script</span> ，在这种情况下会失败。这是因为内联函数实际上是在使用<span class="notranslate">script</span> <span class="notranslate">asset</span> 的<em>索引</em>，而<strong>不是 </strong>实际调用<span class="notranslate">script</span> 的函数--例如：如果<span class="notranslate">script</span> 的索引解析为 &quot;4&quot;，本质上该函数是在调用 <span class="inline">4(arg);</span> ，这毫无意义。代码应该以下列两种方式之一进行结构化。</p>
  <p class="code">function indirectCall(func, arg)<br />
    {<br />
        func(arg);<br />
    }<br />
    <br />
    indirectCall(method(undefined, myscript), arg);<br />
    <br />
    // OR<br />
    <br />
    function indirectCall(func, arg)<br />
    {<br />
        script_execute(func, arg);<br />
    }<br />
    <br />
    indirectCall(myscript, arg);
  </p>
  <p>这一点很重要，特别是在处理传统项目时，<span class="notranslate">scripts</span> 包含一个单一的函数，并且该函数的命名与<span class="notranslate">script</span> 相同。然而，你真的<em>不</em>应该这样做，你的<span class="notranslate">scripts</span> 应该与它们所包含的函数独立命名。</p>
  <div data-conref="../../assets/snippets/Script_empty_reference_error.hts"> </div>
  <h2>脚本范围</h2>
  <p>这导致我们要知道关于<span class="notranslate">scripts</span> 和它们所包含的函数的最后和最重要的事情：<span class="notranslate">scripts</span> 是在<b>全局</b>层面上进行解析的，并将<strong>在游戏开始时进行编译</strong>。这意味着<em>从技术上讲</em>，<span class="notranslate">script</span> 中的所有函数都是 &quot;非绑定<a href="Method_Variables.htm">&quot;的方法变量</a>，而在<span class="notranslate">script</span> 中的函数之外声明的任何变量都将被视为<a href="Variables/Global_Variables.htm">全局变量</a>。例如，考虑这个脚本。</p>
  <p class="code">function Foo()<br />
    {<br />
        // Do something<br />
    }<br />
    blah = 10;<br />
    function Bar()<br />
    {<br />
        // Do something else<br />
    }</p>
  <p>在上面的例子中，我们不仅定义了函数 <span class="inline">Foo</span> 和 <span class="inline">Bar</span> ，而且还定义了变量 <span class="inline">blah</span> ，所有这些都被认为是在<b>全局</b>范围内创建的。这些函数不需要 <span class="inline">global</span> 关键字来识别，因为编译器理解这些函数是<span class="notranslate">script</span> 的一部分，但是如果你想访问 <span class="inline">blah</span> ，那么你就需要做。</p>
  <p class="code">val = global.blah;</p>
  <p>也就是说，我们建议你在<span class="notranslate">scripts</span> 中创建<b>全局变量</b>时<b>总是明确地输入全局变量</b>，以防止以后出现任何问题。<span class="notranslate">Scripts</span> 也是定义任何<strong>宏</strong>或<strong>枚举</strong><a href="Variables/Constants.htm">（常量</a>）的理想场所，因为将它们添加到函数之外的<span class="notranslate">script</span> 也意味着它们将在游戏代码实际开始运行之前被创建使用。下面是一个为游戏创建不同全局范围值的<span class="notranslate">script</span> 的例子。</p>
  <p class="code">/// Initialise All Global Scope Values And Constants<br />
    global.player_score = 0;<br />
    global.player_hp = 100;<br />
    global.pause = false;<br />
    global.music = true;<br />
    global.sound = true;<br />
    <br />
    enum rainbowcolors<br />
    {<br />
        red,<br />
        orange,<br />
        yellow,<br />
        green,<br />
        blue,<br />
        indigo,<br />
        violet<br />
    }<br />
    <br />
    #macro weapon_num 3<br />
    #macro weapon_gun 0<br />
    #macro weapon_bomb 1<br />
    #macro weapon_knife 2
  </p>
  <p>请注意，所有这些常量都是在任何函数调用之外设置的，这意味着它们将在其他一切之前被初始化，而且是在<em>全局 </em>范围内。这意味着，如果你想用脚本来初始化<em>实例 </em>范围内的变量，那么你必须把它们包在一个函数中，例如。</p>
  <p class="code">/// @function                init_enemy();<br />
    /// @description             Initialise enemy instance vars<br />
    <br />
    function init_enemy()<br />
    {<br />
        hp = 100;<br />
        dmg = 5;<br />
        mana = 50;<br />
    }
  </p>
  <p>因此，<span class="notranslate">scripts</span> ，可以用来在游戏开始前生成宏、枚举和全局变量，这样它们就可以随时使用，它们还可以用来创建 &quot;非绑定 &quot;方法（用户定义的函数），可以在你的游戏中像<span class="notranslate">GML</span> <span class="notranslate">runtime</span> 函数一样使用。</p>
  <p>关于<span class="notranslate">script</span> ，最后需要注意的是，如果你是为<strong>Web </strong>开发的（即：以<strong>HTML5</strong>为目标），那么在向<span class="notranslate">scripts</span> 添加函数时，可以使用一个额外的函数协议，即在函数名称前加上 <span class="inline">gmcallback_</span> ，例如。</p>
  <p class="code">gmcallback_create_button</p>
  <p>使用上述函数名称将意味着函数 <span class="inline">gmcallback_create_button()</span> ，不会被混淆，因此可以在JavaScript<span class="notranslate">extensions</span> 和你游戏的其他地方使用，例如，当使用 <a href="../GML_Reference/Web_And_HTML5/Web_And_HTML5.htm"><span class="inline">clickable_*</span></a>函数。</p>
  <h2>静态变量</h2>
  <p>函数也可以利用静态变量，这些变量在每次函数调用时都保持其值。请<a href="Functions/Static_Variables.htm">阅读本页</a>以了解更多信息。</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="GML_Overview.htm">GML概述</a></div>
        <div style="float:right">下一步。<a href="Method_Variables.htm">方法变量</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
function
gmcallback
-->
  <!-- TAGS
script_functions
-->
</body>
</html>