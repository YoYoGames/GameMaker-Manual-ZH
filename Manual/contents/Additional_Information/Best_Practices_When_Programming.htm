<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>编程时的最佳做法</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains some best practices when programming using GameMaker" />
  <meta name="rh-index-keywords" content="Best Practices When Programming" />
  <meta name="search-keywords" content="best practices" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>编程时的最佳做法</h1>
  <p>在这一页中，我们将介绍一些编程时的 &quot;最佳做法&quot;，同时解释一下<span data-keyref="GameMaker Name">GameMaker</span>的内部运作。然而，在继续之前，值得注意的是两个非常重要的点。</p>
  <ul class="colour">
    <li>这只是一个<em>指南</em>，而不是写游戏的万能方法，也不是100%完美的方法!这里提到的东西通常更多的是在组织和微观优化方面，当你对<span class="notranslate">GML</span> ，并认为它们是合适的时候，应该将其纳入你的编程习惯。</li>
    <li>如果你的游戏运行良好，而且你对现在的情况感到满意，那么就<em>不要急于改变一切，只是为了挤出一些额外的FPS</em>。你必须在可读的、灵活的和模块化的代码与改变事物所需的时间和精力之间取得平衡，以及最终的整体收益。基本上，如果它没有坏，就不要修复它，把你在这里学到的东西保留给你的下一个项目。</li>
  </ul>
  <p>说到这里，让我们继续往下看，写好<span class="notranslate">GML</span> 代码的一些一般提示，你可以在任何时候应用。</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">编程风格</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">当谈到写代码时，每个人都有自己的<em>风格</em>。你的编程风格是你放置括号的方式，你如何缩进行，以及你如何声明和命名变量等等，这对于使你的代码对其他人（以及你未来的自己，当你在其他事情上花了一段时间后不得不回到这个项目时）来说是至关重要的。</p>
    <p class="dropspot">有很多很多的<a href="http://en.wikipedia.org/wiki/Programming_style">编程风格</a>，有些人会争论说他们的风格是最好的，但事实是，几乎任何风格都可以，只要你在使用时<strong>保持一致 </strong>，并且<em>清楚 </em> <em>明了地 </em>说明一切是什么和做什么。</p>
    <p class="dropspot"><img>上面的图片是一个函数声明的例子，在<span class="notranslate">script</span> ，以说明上述观点。你可以看到，它使用了JSDoc风格的注释来清楚地解释它的作用，而且编码风格是一致的，有4个空格的缩进，本地变量使用下划线，记录输出等。</p>
    <p class="dropspot">还要注意的是，虽然<span class="notranslate">script</span> 编辑器允许你在每个开/闭括号处折叠代码，但你可以使用 <span class="inline">#region</span> 和 <span class="inline">#endregion</span> 标签来分割代码的一部分，大大增强可读性，特别是在处理包含多个功能的大型<span class="notranslate">scripts</span> 。区域也可以被注释--见手册中本页面的编辑部分）。</p>
    <p class="dropspot"><img>当你写代码时，你应该意识到在编译你的最终游戏时，<span data-keyref="GameMaker Name">GameMaker</span>会剥离注释，删除不必要的换行符和空白，替换常量/宏量/枚举值，并且通常作为过程的一部分压缩你的代码。这意味着你可以根据需要在你的代码周围添加尽可能多的空白，你不需要担心保持你的注释简短或只使用它们。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">使用本地变量</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">继续以上关于编程风格的观点，很多初学者做的一件事是尽可能多地将代码塞进一行。比如说。</p>
    <p class="code">draw_sprite(sprite_index, image_index, x + lengthdir_x(100, point_direction(x, y, mouse_x, mouse_y)), y + lengthdir_y(100, point_direction(x, y, mouse_x, mouse_y)));</p>
    <p class="dropspot">虽然不是完全不可读，但它的效率很低（例如， <span class="inline">point_direction()</span> 函数被调用了两次），而且它很乱，看起来很笨拙。它的表达方式要好得多。</p>
    <p class="code">var p_dir = point_direction(x, y, mouse_x, mouse_y);<br />
      var local_x = x + lengthdir_x(100, p_dir);<br />
      var local_y = y + lengthdir_y(100, p_dir);<br />
      draw_sprite(sprite_index, image_index, local_x, local_y);</p>
    <p class="dropspot">创建这些局部变量所需的内存和资源是可以忽略不计的，而你（或以后阅读代码的其他人）从代码的清晰性中得到的即时好处则远远超过了这些。同样的想法也应该应用到函数中，你应该为输入变量指定合理的名称，并在必要时使用清晰的格式和局部变量，使其尽可能具有可读性。</p>
    <p class="dropspot">本地变量在游戏中的处理速度很快，所以要充分利用它们。如果一个表达式在一个代码块或<span class="notranslate">script</span> 中出现了两次或更多次，就要考虑为它创建一个本地变量。当使用<a class="glossterm" data-glossterm="YoYo Compiler (YYC)" href="#">YoYo编译器（YYC）</a>目标时，如果你在一个函数或代码块中多次引用 <span class="inline">global</span> 或实例变量，那么在代码开始时将它们分配给一个局部变量，然后再引用该局部变量是特别有利的，因为这将带来更好的性能。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">数组</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">与数据结构相比，<a href="../GameMaker_Language/GML_Overview/Arrays.htm">数组</a>的使用速度快，需要的内存也少，但它们还可以进一步优化。当你创建一个数组时，内存是根据它的大小来分配的，所以你应该尽量先把数组初始化到它的最大尺寸，即使你在以后才打算填充它。例如，如果你知道你需要一个数组最多容纳100个值，你会直接将其初始化为100个槽，使用 <a href="../GameMaker_Language/GML_Reference/Variable_Functions/array_create.htm"><span class="inline">array_create()</span></a>函数。</p>
    <p class="code">array = array_create(100, 0);</p>
    <p class="dropspot">这将在一个 &quot;块 &quot;中为其分配内存，所有的数组值都被设置为默认值0，这有助于保持事情的快速性，否则每次你为数组添加一个新的值时，整个内存都必须再次被重新分配。</p>
    <p class="note"><span class="note">注意</span>在HTML5目标上，像这样分配数组是不适用的，对于这个目标，你的数组应该从0开始初始化!你可以通过检查os_browser变量来轻松处理这个问题，例如。</p>
    <p class="code"><span style="padding-left:1px;">if (os_browser == browser_not_a_browser)<br />
        {<br />
            array_create(100, 0);<br />
        }<br />
        else<br />
        {<br />
            for (var i = 0; i &lt; 100; ++i;)<br />
            {<br />
                array[i] = 0;<br />
            }<br />
        }</span></p>
    <p class="dropspot">你也可以通过设置所使用的变量为0来释放与数组相关的内存。 因此，要清除上面代码例子中的数组，你只需使用。</p>
    <p class="code">array = 0;</p>
    <p class="dropspot">还要注意的是，数组是<strong>通过引用传递</strong>的，但当有变化时，会复制整个数组（这种行为被称为<strong>写时复制</strong>）。因此，如果你把一个数组传递给一个函数，你就是在传递一个对原始数组的<em>引用 </em>，从数组中读取的任何数值都将来自原始来源。这很好，也很快速，但是如果你需要修改任何数组的值，数组本身就会在写的时候被复制，任何修改都<strong>需要从函数中返回，否则就会丢失</strong>。这要慢得多，而且消耗更多的内存，所以要注意在函数中使用数组的方式。</p>
    <p class="dropspot">然而，你可以通过使用特殊的数组<a href="../GameMaker_Language/GML_Overview/Accessors.htm">访问器</a> <span class="inline">@</span> ，来避免这种写时复制的行为，因为这可以直接访问底层数组。比如说。</p>
    <p class="code">// Call a function, passing our array<br />
      my_function(my_array);</p>
    <p class="code">// The function looks like this:<br />
      <br />
      function my_function(_a)<br />
      {<br />
          // The array will be copied and the copy modified,<br />
          // requiring you to use &quot;return _a&quot;, later<br />
          _a[0] = 100;<br />
      <br />
          // This will modify the ORIGINAL array directly and<br />
          // does not require it to be returned<br />
          _a[@ 0] = 100;<br />
      }
    </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">数据结构</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">在<span data-keyref="GameMaker Name">GameMaker</span>中，<a href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm">数据结构</a>已经被优化到比以前的<span class="notranslate">GameMaker</span> 版本快很多。它们仍然需要在不使用时被清理（销毁）以释放内存，而且它们仍然可能比数组等慢，但使用的便利性和处理它们所包含的数据的额外功能往往超过了最小的速度差异，所以不要害怕在你的游戏中使用它们。</p>
    <p class="dropspot">应该指出的是，在所有的数据结构中，DS地图特别是在读和写方面都非常快，这使得它们成为所有类型任务的最佳选择。</p>
    <p class="dropspot">之前我们提到了数组的<a href="../GameMaker_Language/GML_Overview/Accessors.htm">访问器</a>，但它们也可以用于数据结构，这可以帮助清理你的代码，使其更容易阅读。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">碰撞</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">在<span data-keyref="GameMaker Name">GameMaker</span>中，有<a href="../GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/Collisions.htm">多种方法来处理碰撞问题</a>，而其中大多数都附带了一些额外的CPU开销。 <span class="inline">collision_</span> 和 <span class="inline">point_</span> 函数、 <span class="inline">place_</span> 函数和 <span class="inline">instance_</span> 函数都依赖于对<span class="notranslate">room</span> 内所有给定类型的实例进行<a class="glossterm" data-glossterm="界限盒" href="#">边界框</a>检查，虽然引擎中内置了一些优化来限制这些检查，但碰撞从来不是最有效的处理方式。如果你开始使用精确碰撞，性能也会明显变差，因为你不仅要做边界框检查，还要做每像素检查，这确实很慢。</p>
    <ul class="dropspotlist">
    </ul>
    <p class="dropspot">这并不是说你不应该使用这些功能，因为它们可以非常方便。然而，你应该知道什么时候使用哪些函数，因为它们的工作方式略有不同，而且会有不同的速度。粗略的经验法则是， <span class="inline">place_</span> 功能比 <span class="inline">instance_</span> 功能快，而 <span class="inline">collision_</span> 和 <span class="inline">point_</span> 功能更快，所以请阅读手册中每一类功能的页面，并确保选择最适合每种情况的功能。</p>
    <p class="dropspot">另外，可以考虑创建一个<strong> 基于瓦片的碰撞系统</strong>，可以使用<a href="../GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/Tile_Map_Layers.htm">瓦片图功能</a>甚至是自定义的2D阵列或DS网格来创建。这些都会非常快，有助于提高你的游戏速度。然而，如果你使用的是不规则的地形或墙壁和<span class="notranslate">objects</span> ，不与网格对齐，它们可能不合适。你可以从下面的视频链接中找到一个非常简单的关于瓷砖地图碰撞的教程</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="https://youtu.be/UyKdQQ3UR_0"><span data-keyref="GameMaker Name">GameMaker</span>中的瓦片碰撞</a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">纹理互换和顶点批处理</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot">如果你在<span class="notranslate">switch</span> <a href="../GameMaker_Language/GML_Reference/Debugging/show_debug_overlay.htm"><strong>调试叠加</strong></a>，你会看到在测试时，屏幕上方的括号里有两个数字。第一个是正在进行的<strong>纹理交换 </strong>的数量，第二个是<strong>顶点批处理</strong>的数量。有很多因素会影响这些数字，你永远不会把它们降到（0）（0），因为引擎每一步都需要一个或两个，但你应该争取把这些值降到尽可能低。</p>
    <p class="dropspot"><img>对于<span class="notranslate">texture</span> 交换，最好和最有效的方法是优化你的<span class="notranslate">sprites</span> 和背景在<span class="notranslate">texture</span> 页面的存储方式。这可以从<a href="../The_Asset_Editors/Sprites.htm">精灵属性</a>中完成，你可以在<a href="../Settings/Texture_Groups.htm">纹理组编辑器</a>中创建<span class="notranslate">texture</span> 页面。如果你有一些只在主菜单中使用的图片（例如），那么就把它们放在一个单独的<a href="../Settings/Texture_Information/Texture_Pages.htm">纹理页</a>上。如果你有特定关卡的图像，或者玩家和敌人的图像，等等，也是如此。基本上，你想按用途来分组，这样可以尽可能地减少交换。此外，为了帮助保持<a class="glossterm" data-glossterm="VRAM" href="#">VRAM</a>的优化，你可以使用不同的<a href="../GameMaker_Language/GML_Reference/Drawing/Textures/Textures.htm">预取和冲洗</a>功能，根据需要从内存中加载和删除<span class="notranslate">textures</span> 。</p>
    <p class="note"><span class="note">注意</span>正如本页面开始时提到的，如果你的游戏运行正常，有一个体面的FPS，那么不要太担心<span class="notranslate">texture</span> ，尤其是在桌面目标上创建项目时。这些优化在大型游戏或低端移动设备上使用时是最好的，如果使用不当，实际上会对性能产生负面影响。</p>
    <p class="dropspot">顶点信息是以 &quot;批次 &quot;的形式发送到GPU进行绘制，一般来说，批次越大越好。所以在绘制时应避免 &quot;破坏 &quot;批次，因为这将增加发送到GPU的顶点批次的数量。有许多事情会破坏批处理，主要是<strong>混合模式</strong>、改变<strong>着色器</strong>、在绘制东西之前为<span class="notranslate">shader</span> ，以及使用内置形状和基元进行绘制。</p>
    <p class="dropspot">因此，如果你有一些使用 <span class="inline">bm_add</span> 混合模式绘制的子弹实例--例如--你将为每一个创建一个新的<span class="notranslate">vertex batch</span> ，这绝对是一件坏事!相反，在你的游戏中，有一个控制器<span class="notranslate">object</span> ，来代替绘制所有的子弹，像这样。</p>
    <p class="code">gpu_set_blendmode(bm_add);<br />
      <br />
      with (obj_BULLET)<br />
      {<br />
          draw_self();<br />
      }<br />
      <br />
      gpu_set_blendmode(bm_normal);
    </p>
    <p class="note"><span class="note">注意</span>这不仅仅适用于使用<span class="inline" style="font-size: 14px">bm_add</span>- 任何混合变化都会破坏批处理，并会带来性能上的影响。</p>
    <p class="dropspot">这样一来，所有的子弹都会在同一批中被画出来。谨慎地使用函数 <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendenable.htm"><span class="inline">gpu_set_blendenable()</span></a>, <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestref.htm"><span class="inline">gpu_set_alphatestref()</span></a>，和 <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestenable.htm"><span class="inline">gpu_set_alphatestenable()</span></a>可以极大地提高性能，并且可以在你的项目代码中根据需要启用/禁用，尽管它们可能不适合所有类型的图形或项目。</p>
    <p class="note"><span class="note">注意</span>如果你不要求实例在以这种方式使用控制器时绘制自己，那么你可以简单地在绘图事件中添加一个注释来抑制默认的绘图，或者使实例不可见（尽管这将阻止在所有绘图事件中为实例运行所有代码）。</p>
    <p class="dropspot">另一个减少这些数字的方法是，除非绝对必要，否则要禁用<strong> <span class="notranslate">Texture</span> </strong>页面的分离选项，<span class="notranslate">sprites</span> 。以这种方式存储的每张图片都会被发送到它自己的<span class="notranslate">texture</span> 页面，并以不同的方式分批发送，因此将这些图片放在一个普通的<span class="notranslate">texture</span> 页面上会更好。然后，你可以使用函数获得UVS坐标，并将其存储在变量中以备使用。 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_uvs.htm"><span class="inline">sprite_get_uvs()</span></a>函数获得UVS坐标，并将其存储在变量中供以后使用。这可能是少量的额外代码，但你将得到的提升是值得的。请注意，这种方法将不允许<span class="notranslate">texture</span> 重复!</p>
    <p class="dropspot">就像所有这些提示一样，如果改变它使你的生活更加困难，而你的游戏运行正常，就不要太担心......</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">粒子</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot"><a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm">粒子</a>为在你的游戏中创造动态效果提供了一种非常快速和有效的方法，而且一般来说，它们能提供良好的性能。然而，值得注意的是，在粒子上使用加成混合、阿尔法混合和颜色混合可能会降低性能，特别是在移动目标上，所以如果你不需要它，就不要使用它!特别是添加剂混合，可以大大增加顶点批次，应该谨慎使用。</p>
    <p class="dropspot">请注意，在非WebGL的HTML5目标上，拥有多色、渐变的粒子将需要大量的图像缓存，速度会非常慢。然而，由于粒子<span class="notranslate">sprites</span> ，你可以创建一个动画<span class="notranslate">sprite</span> ，其中的子图像会改变颜色，然后用它来代替粒子。它仍然会看起来像一个逐渐变化的颜色，但不需要不断地创建<span class="notranslate">cache</span> 。</p>
    <p class="dropspot">你可以从 "<a href="Guide_To_Using_Particles.htm">粒子使用指南</a>"页面上了解更多关于粒子的信息。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">表面</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">最后，我们要简单地谈谈使用<a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/Surfaces.htm">曲面的</a>问题，因为<span data-keyref="GameMaker Name">GameMaker</span>在游戏中使用曲面时有一个相当重要的优化：能够在<strong>深度缓冲区</strong> <span class="notranslate">switch</span> ，也可以关闭。</p>
    <p class="dropspot">当你像平常一样使用曲面时，<span data-keyref="GameMaker Name">GameMaker</span>实际上会创建一个曲面和一个伴随的深度<span class="notranslate">buffer</span> ，以确保在3D中绘制任何东西时都能进行适当的深度排序。然而，对于大多数2D游戏来说，这个额外的深度<span class="notranslate">buffer</span> ，只是不需要，所以占用了额外的内存空间和处理时间，可以用于其他事情。这就是函数 <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_depth_disable.htm"><span class="inline">surface_depth_disable()</span></a>发挥了作用...</p>
    <p class="dropspot">在创建曲面之前可以调用这个函数，禁用深度<span class="notranslate">buffer</span> ，之后创建的所有曲面都不会为其创建深度<span class="notranslate">buffer</span> 。你可以根据需要启用/禁用这个函数，甚至可以在游戏开始时调用一次，让所有后续的曲面调用都禁用深度<span class="notranslate">buffers</span> （在大多数2D游戏中，这样做是可以的）。它不会带来很大的性能提升，但如果你的游戏严重依赖曲面，它肯定是要记住的，并且可以阻止你的游戏在低规格设备上耗尽内存。</p>
  </div>
  <p> </p>
  <p>除了上面提到的主要事项外，还有其他更普遍的事项可以帮助提高性能，而且也被认为是 &quot;良好做法&quot;。</p>
  <ul class="colour">
    <li>不要害怕使用三角函数，因为（与流行的看法相反）它们是相当快的，特别是当与粒子、碰撞、<span class="notranslate">strings</span> 等相比。</li>
    <li>不要把不是用来画东西的代码放在Draw事件中。</li>
    <li>使用一个报警器来调用任何不必每一步都调用的代码（而不是直接将其添加到步骤事件中）。</li>
  </ul>
  <p>但是，正如我们在页面开头提到的，所有这些优化都是可选的，如果你的游戏在60个顶点批次、80个<span class="notranslate">texture</span> 交换、加法混合等情况下运行良好，那么就不要太担心！在为你的下一个游戏编程时，只要记住这些事情就可以了...</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Additional_Information.htm">其他信息</a></div>
        <div style="float:right">下一步。<a href="The_File_System.htm">文件系统</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Nest Practices
-->
  <!-- TAGS
best_practices
-->
</body>
</html>