<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Blendmodes使用指南</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how blendmodes work." />
  <meta name="rh-index-keywords" content="blendmodes,Guide To Using Blendmodes" />
  <meta name="search-keywords" content="blendmodes,blending,blend modes" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Blendmodes使用指南</h1>
  <p>如果你使用<span data-keyref="GameMaker Name">GameMaker</span>的时间很长，你几乎肯定会遇到<a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/GPU_Control.htm">混合模式</a>，甚至可能在你的游戏中使用它们。混合模式是一种改变东西的绘制方式的好方法，可以带来有趣的、特定的图形效果，但你知道它们是如何工作的吗，如何使用它们？这是一个可能使人困惑的问题，所以在本节中，我们希望能消除一些围绕混合模式的神秘感，使你能在游戏中充分地使用它们。</p>
  <p> </p>
  <h2>综述</h2>
  <p>混合模式基本上是告诉你的游戏将某些东西与事先已经画好的其他东西混合起来。你画在屏幕上的所有东西都是由四个部分组成的--红、绿、蓝和阿尔法--默认情况下，它们是用混合模式 <span class="inline">bm_normal</span> 。这种混合模式画出的所有像素的颜色和阿尔法值基本上是不变的（虽然，在本节后面你会看到这并不<em>完全正确</em>......），但<span data-keyref="GameMaker Name">GameMaker</span>有一些内置的混合模式，可以设置来改变这种行为。</p>
  <p>当<span data-keyref="GameMaker Name">GameMaker</span>去绘制一个像素时，有一个<strong>源颜色</strong>（你要绘制的像素的颜色）和一个<strong>目标颜色</strong>（我们要绘制的像素中已有的颜色）。在确定像素的新颜色时，<span class="notranslate">GameMaker</span> ，如上所述，将根据<strong>混合模式</strong>合并源色和目的色。颜色的每个分量都被存储为0到1之间的浮点值，新颜色的计算方法是将源颜色的每个分量乘以某个系数，将目标颜色的每个分量乘以另一个系数，然后将结果逐个分量相加。</p>
  <p> </p>
  <h2>基本混合模式</h2>
  <p><span data-keyref="GameMaker Name">GameMaker</span>使用函数<a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm">gpu_set_blendmode()</a>来改变你的游戏在绘制时使用的混合方式。你可以在绘制<span class="notranslate">sprite</span> （例如）之前调用这个函数，然后在之后再把它设置回来，类似这样。</p>
  <p class="code">gpu_set_blendmode(bm_add);<br />
    draw_self();<br />
    gpu_set_blendmode(bm_normal);</p>
  <p>该代码使用<strong>加法 </strong>混合模式绘制实例<span class="notranslate">sprite</span> 。加法混合模式是使用可用的<span class="notranslate">GML</span> 常数之一来设置的，其中有四个基本模式。</p>
  <p class="code">bm_normal<br />
    bm_add<br />
    bm_subtract<br />
    bm_max</p>
  <p>我们已经看到了 <span class="inline">bm_normal</span> ，因为这是所有东西的默认值！所以让我们继续看看其他三个的细节。- 因此，让我们继续看一下其他三个网站的细节...</p>
  <p><img alt="bm_normal example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmNormal.png" /></p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">bm_add</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">这种混合模式将源像素和目标像素的颜色加在一起（但不影响alpha值）。例如，如果你的背景图像是一个RGB值为(100,15,70)的纯色，然后你画一个RGB为(120,25,30)的矩形，那么（使用bm_add）矩形的每个像素的最终RGB值将是(220,40,100)。请注意，颜色值不能超过255（或低于0），所以任何加起来超过255的值都会被钳制。</p>
    <p class="dropspot"><img>使用这种混合模式是获得 &quot;霓虹灯光 &quot;外观的好方法，最常用于照明效果，或激光或任何你想看起来像发光或有发光效果的东西。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">bm_subtract</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">这种混合模式与之前的模式有些不同，因为它是以百分比为基础工作的，而不是直接的数值。这个百分比是将从目标颜色（被绘制的像素的颜色）中减去的东西。为了更好地解释这一点，让我们看一个例子。</p>
    <p class="dropspot"><img>想象一下，你想把<span class="notranslate">room</span> 的一个区域内所有像素的红色值减少25%。你首先需要得到255的25%，然后将其转换为RGB颜色值，最后与bm_subtract一起使用，在该区域绘制。就像这样。</p>
    <p class="code">var red = (25 / 100) * 255;<br />
      var col = make_colour_rgb(red, 0, 0);<br />
      gpu_set_blendmode(bm_subtract);<br />
      draw_rectangle_colour(0, 0, 128, 256, col, col, col, col, false);<br />
      gpu_set_blendmode(bm_normal);</p>
    <p class="dropspot">按照同样的规则，如果你想简单地把背景的亮度降低50%，那么你的颜色就是50%的红色、50%的绿色和50%的蓝色，即：RGB（128，128，128）。这种混合模式主要用于绘制阴影，或创造有趣的淡出效果。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">bm_max</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">这种混合模式解释起来比较复杂，但它基本上是将源颜色乘以源alpha，然后将它们加到目标颜色值上，再乘以逆源颜色值。bm_max（和其他混合模式）背后的实际数学原理，我们将在文章的第二部分介绍，但你需要知道的是，其结果将是一个更 &quot;饱和 &quot;和更明亮的颜色，而不会像使用 <span class="inline">bm_add</span> 那样导致纯白色的辉煌。</p>
    <p class="dropspot"><img>当你需要绘制重叠的图像时，这种混合模式可能很有用，因为它们不会变得太亮，以至于无法被看到。明亮的部分会变得更亮，但它们仍应保持一定的颜色和色调。但请注意，使用这种混合模式时，源图像的alpha值也会影响最终效果。</p>
  </div>
  <p> </p>
  <p>现在你知道在<span data-keyref="GameMaker Name">GameMaker</span>中使用混合模式的基本原理了。它获取源图像（正在绘制的内容）的RGB和alpha值，然后将其与目标图像（正在绘制的内容）的RGB和alpha值混合。这种混合是通过将每个像素的颜色和阿尔法的单独成分乘以不同的数量来完成的，这取决于我们希望实现的效果。有了这些知识，你就可以开始在你的游戏中使用混合模式来获得发光的激光、逼真的阴影或饱和的过渡效果，但这里仍有更多的东西需要学习下面我们来看看<strong>扩展的混合模式</strong>，以及探索它们背后的一些数学原理，这样你就可以创造出你自己的混合效果，比如相乘或叠加。</p>
  <p> </p>
  <h2>扩展混合模式</h2>
  <p>上面我们已经谈到了函数 <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode.htm"><span class="inline">gpu_set_blendmode()</span></a>，但现在我们要看的是 <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext.htm"><span class="inline">gpu_set_blendmode_ext()</span></a>.这是（顾名思义）一个扩展函数，用于设置<em>自定义 </em>混合模式，但这是如何工作的？在我们进一步讨论之前，让我们先看一下干巴巴的技术答案。</p>
  <ul class="colour">
    <li>该函数 <span class="inline">gpu_set_blendmode_ext</span><span class="inline">(src, dest)</span> ，指出对源色和目的色使用何种混合模式。新的颜色是某个因子乘以源颜色，另一个因子乘以目的颜色。这些因素是通过这个函数设置的。为了理解这一点，源和目标都有一个红色、绿色、蓝色和阿尔法成分。因此，<strong>源 </strong>是(<span class="inline">Rs, Gs, Bs, As</span>)，<strong>目的 </strong>是(<span class="inline">Rd, Gd, Bd, Ad</span>)。所有的值都被认为是在0和1之间。</li>
  </ul>
  <p>现在，虽然这段文字是正确的，并解释了混合模式的作用，但它并不是真正直观的......所以让我们更详细地解释这一切是怎么回事。</p>
  <p>当我们谈论<strong>源时 </strong>，我们谈论的是正在绘制的像素的颜色和阿尔法值，而当我们谈论<strong>目标 </strong>时，我们谈论的是它被绘制的像素的颜色和阿尔法值。为了方便起见，我们可以把源颜色写成它的组成部分，像这样。</p>
  <ul class="colour">
    <li><span class="inline">(Rs, Gs, Bs, As)</span> =你要画的颜色的RGB和Alpha。</li>
  </ul>
  <p>而目的地会是这样的。</p>
  <ul class="colour">
    <li><span class="inline">(Rd, Gd, Bd, Ad)</span> =你要画的颜色的RGB和Alpha。</li>
  </ul>
  <p>因此，当我们在屏幕上画东西时，我们的图形处理器实际上是在为每一个像素做以下工作。</p>
  <p class="code">final_pixel_colour =  (Rs,Gs,Bs,As) * source_blend_factor + (Rd,Gd,Bd,Ad) * destination_blend_factor</p>
  <p>上面提到的<strong>混合系数</strong>在<span data-keyref="GameMaker Name">GameMaker</span>中是由一些<span class="notranslate">GML</span> 常数定义的，每个常数代表一个系数，源或目的R、G、B和A值应乘以这个系数。可用的系数是：。</p>
  <ul class="colour">
    <li><span class="inline">bm_zero</span>:混合系数是（0，0，0，0）。</li>
    <li><span class="inline">bm_one</span>:混合系数是（1，1，1，1）。</li>
    <li><span class="inline">bm_src_colour</span>:混合系数为（Rs, Gs, Bs, As）。</li>
    <li><span class="inline">bm_inv_src_colour</span>:混合系数是（1-Rs, 1-Gs, 1-Bs, 1-As）。</li>
    <li><span class="inline">bm_src_alpha</span>:混合系数为（As, As, As, As）。</li>
    <li><span class="inline">bm_inv_src_alpha</span>:混合系数是（1-As, 1-As, 1-As, 1-As）。</li>
    <li><span class="inline">bm_dest_alpha</span>:混合因素是（Ad, Ad, Ad, Ad）。</li>
    <li><span class="inline">bm_inv_dest_alpha</span>:混合系数是（1-Ad，1-Ad，1-Ad，1-Ad）。</li>
    <li><span class="inline">bm_dest_colour</span>:混合因素是（Rd, Gd, Bd, Ad）。</li>
    <li><span class="inline">bm_inv_dest_colour</span>:混合系数为（1-Rd, 1-Gd, 1-Bd, 1-Ad）。</li>
    <li><span class="inline">bm_src_alpha_sat</span>:混合因子是（f，f，f，1）；f=min（As，1-Ad）。</li>
  </ul>
  <p><span data-keyref="GameMaker Name">GameMaker</span>拥有的四种 &quot;基本 &quot;混合模式实际上是这些混合因素中的两种的合成。</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">bm_normal如何工作的例子</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">是时候看一个实际的例子了，看看如何在<span data-keyref="GameMaker Name">GameMaker</span>中进行绘图。为此，我们要看一下bm_normal，这真的是。</p>
    <p class="code">gpu_set_blendmode_ext(bm_src_alpha, bm_inv_src_alpha);</p>
    <p class="dropspot">人们在使用混合模式时遇到的问题之一是可视化的结果，所以为了展示其背后的数学原理，我们将使用这种混合模式作为我们的测试对象，因为它是每个人使用最多的混合模式，而且我们清楚地知道从它那里会得到什么。想象一下，我们在一个颜色为(64, 128, 255, 64, 255)的背景上画一个矩形，其颜色为(128, 255, 64, 255)。</p>
    <p class="dropspot"><img>因此，我们的混合模式看起来像这样。</p>
    <p class="code">Source: (128, 255, 64, 255) = (0.5, 1, 0.25, 1)<br />
      Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br />
      bm_src_alpha (As, As, As, As) = (255, 255, 255, 255) = (1, 1, 1, 1)<br />
      bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) =  (0, 0, 0, 0)<br />
      (Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br />
      (0.5, 1, 0.25, 1) * (1, 1, 1, 1) + (0.25, 0.5, 1, 1) * (0, 0, 0, 0)<br />
      (0.5, 1, 0.25, 1) + (0, 0, 0, 0) = (0.5, 1, 0.25, 1) = (128, 255, 64, 255)</p>
    <p class="dropspot">正如你所看到的，我们把目标值乘以0，这样它们的值也是0，这意味着源颜色没有变化，所以我们的最终颜色值是<strong>（128, 255, 64, 255）</strong>。你可以看到阿尔法的加入也会影响这个值。</p>
    <p class="code">Source (128, 255, 64, 128) = (0.5, 1, 0.25, 0.5)<br />
      Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)<br />
      bm_src_alpha (As, As, As, As) = (128, 128, 128, 128) = (0.5, 0.5, 0.5, 0.5)<br />
      bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) = (0.5, 0.5, 0.5, 0.5)<br />
      (Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha<br />
      (0.5, 1, 0.25, 0.5) * (0.5, 0.5, 0.5, 0.5) + (0.25, 0.5, 1, 1) * (0.5, 0.5, 0.5, 0.5)<br />
      (0.25, 0.5, 0.125, 0.25) + (0.125, 0.25, 0.5, 0.5) = (0.375, 0.75, 0.625, 0.75) = (96, 192, 159, 192)</p>
    <p class="dropspot">这给出了最终的像素颜色（96，192，159，192），并将得到如下所示的图像。</p>
    <p class="dropspot"><img alt="bm_add example" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/BlendModes1_BmAdd.png" /></p>
    <p class="dropspot">希望你现在能清楚地看到混合模式因子的作用，以及如何结合它们来改变所画的东西，创造一些有趣的效果。现在我们将看一个实际的例子，看看如何结合这些因素来创建你自己的混合模式。</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p>现在你知道设置混合模式是如何工作的，并且已经看到了一个用于日常绘画的例子，让我们来看看更复杂的东西......。</p>
  <p> </p>
  <h2>创建你自己的混合模式</h2>
  <p>利用现有的不同因素，你可以创建自己的混合模式，以实现你通常无法获得的混合选项。在这个例子中，我们将创建一个类似于Photoshop中使用的<strong>倍增 </strong>效果。我们可以用上面提到的两个混合模式因子常数来模拟这种混合模式，像这样。</p>
  <p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);</p>
  <p>在我们实际使用这种混合模式画东西之前，让我们看看它在Photoshop中应该是什么样子。</p>
  <p><img>使用我们的扩展混合模式，我们得到以下结果。</p>
  <p class="code">(Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad) + (Rd, Gd, Bd, Ad) * (0,0,0,0) = (Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad)<br />
    Source colour * dest colour + dest colour * zero = source colour * dest colour</p>
  <p>混合系数 <span class="inline">bm_zero</span> ，有效地将目标色从方程中移除（因为零乘以任何东西都是零），所以我们剩下的是源色乘以目标色的混合系数，因此该模式被称为 &quot;乘法&quot;。要在<span data-keyref="GameMaker Name">GameMaker</span>中使用这个模式，你只需要在你的<strong>绘图事件</strong>中使用这样的东西。</p>
  <p class="code">gpu_set_blendmode_ext(bm_dest_colour, bm_zero);<br />
    draw_self();<br />
    gpu_set_blendmode(bm_normal);</p>
  <p>下一张图片取自<span class="notranslate">GameMaker</span> 中的一个测试项目，使用的正是这个代码。</p>
  <p><img>你能发现其中的差别吗？也许不能！但是，由于所使用的渲染工具不同，两者之间会有一些偏差。然而，由于所使用的渲染工具的不同，两者之间会有一些偏差，但这几乎和你所期望的完全一样。不过请注意，并不是所有艺术程序使用的混合模式都可以在<span data-keyref="GameMaker Name">GameMaker</span>中使用，因为有些混合模式实际上可以迫使颜色值超过255，从而产生特殊的效果，但这并不意味着你不能用它们来创建这些效果的合格模仿，甚至是全新的效果。</p>
  <p>值得一提的是，在<span data-keyref="GameMaker Name">GameMaker</span>中，你可以使用函数 <span class="inline"><a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendmode_ext_sepalpha.htm">gpu_set_blendmode_ext_sepalpha()</a></span> ，将这一做法更进一步。这允许你分离出不同混合模式因子的alpha成分，并单独使用它们来创造更多可能的组合。我们不会在这里介绍这个功能，因为它已经在手册中做了深入的解释，但值得一提的是，你知道它是可以使用的。</p>
  <p> </p>
  <h2>表面和阿尔法</h2>
  <p>关于混合模式，还有一件事值得注意，那就是它们如何影响颜色的<strong>阿尔法 </strong>成分。当简单地绘制到<a class="glossterm" data-glossterm="应用面" href="#">应用程序表面</a>或<a class="glossterm" data-glossterm="显示缓冲区" href="#">显示缓冲区</a>时，你真的不需要考虑目标alpha值，因为它<em>永远 </em>是1。然而，你自己制作的表面则不同，因为你可以清除一个表面，使其具有你希望的从0到1的任何alpha值。这导致了一些有趣的效果，与大多数人的期望相反。</p>
  <p>为了说明这一点，我们要看一下使用基本的默认 <span class="inline">bm_normal</span> 。大多数人认为，将一个表面清除为alpha 0，然后绘制一个alpha为0.5的东西，也会得到一个0.5的结果......<strong>但事实并非如此</strong>，许多人认为这是<span data-keyref="GameMaker Name">GameMaker</span>渲染东西的一个 &quot;bug&quot;。然而，正如你将看到的，这根本不是一个bug!</p>
  <p>假设你有一个表面，每个像素都是alpha 0，然后你用 <span class="inline">bm_normal</span> 混合模式在上面画一个alpha 0.5的圆。整个表面仍然是阿尔法0，但在圆圈里的阿尔法实际上是0.25，因为。</p>
  <p class="code">0.5 * 0.5 + 0 * 0.5 = 0.5 * 0.5 = 0.25</p>
  <p>如果你接着在现有的圆中再画一个圆，也是用0.5的alpha，那么圆外的alpha将是0，圆间的alpha是0.25，而小圆中的alpha将是0.375。</p>
  <p class="code">0.5 * 0.5 + 0.25 * 0.5 = 0.25 + 0.125 = 0.375</p>
  <p>如果你继续画一些0.5α的圆圈到一个α为0的表面，然后把这个表面画到<span class="notranslate">room</span> ，你就能清楚地看到这一点。</p>
  <p><img>如果你对阿尔法仍然有点困惑，试着把它想象成另一种颜色。它的行为就像一种颜色，对它的所有计算都是以类似的方式进行的。虽然它对其他颜色的影响是可见的，但它并不真正可见。这就给我们带来了使用曲面和混合模式（甚至是 <span class="inline">bm_normal</span> ）时需要注意的最后一点......</p>
  <p>即使表面的alpha值为0。 <em><strong>颜色成分仍然存在，并且会影响所有的混合操作。</strong></em>.因此，在一个被清除为零alpha的表面上画画，而这个表面已经被清除为红色（例如），将使源色与目标色混合，并产生与你想象的不同的效果。上面的图片是在黑色背景上被清除为黑色的表面上创建的，但如果我们把表面清除为红色，我们就会得到这样的结果。</p>
  <p><img>希望你现在能用我上面概述的公式自己找出发生这种情况的原因，并应用适当的数字， <span class="inline">bm_normal</span> 。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Additional_Information.htm">其他信息</a></div>
        <div style="float:right">下一步。<a href="Error_Reporting.htm">错误报告</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Blendmodes
Blending
Blend Modes
-->
  <!-- TAGS
using_blendmodes
-->
</body>
</html>