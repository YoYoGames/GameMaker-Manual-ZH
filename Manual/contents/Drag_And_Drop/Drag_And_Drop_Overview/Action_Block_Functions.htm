<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>动作块脚本功能</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Article explaining how to make action block script functions" />
  <meta name="rh-index-keywords" content="GML Visual Overview - Action Block Script Functions" />
  <meta name="search-keywords" content="GML Visual Scripts" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>动作块脚本功能</h1>
  <p><a href="../../Introduction/The_Asset_Browser.htm">资产浏览器</a>中最重要的一个<span class="notranslate">assets</span> ，就是<a href="../../The_Asset_Editors/Scripts.htm">脚本</a> <span class="notranslate">asset</span> 。<span class="notranslate">Scripts</span> 是特殊的<span class="notranslate">assets</span> ，因为它们基本上是用户定义函数的 &quot;容器&quot;，本身实际上并不由你在游戏中直接调用。所有的<span class="notranslate">scripts</span> 都是<strong>全局</strong>范围的，当你的游戏启动时，<span class="notranslate">GameMaker</span> 会自动运行，所以你可以用它们来定义你想在整个游戏中使用的全局变量和函数。</p>
  <p>每个<span class="notranslate">GML</span> Visual<span class="notranslate">script</span> ，可以有一个或多个用户定义的函数加入其中，这些函数是用<a href="../Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Declare A New Function</a>动作创建的。</p>
  <p><img>你在这里定义的函数在范围上将是全局性的，并且与任何内置的<span class="notranslate">GML</span> Visual动作一样，即：它们可以接受不同的值--或者根本没有--称为<span class="glossextra">参数</span>（或参数），然后执行一项任务，根据需要返回一个值或不返回。然后，你将在你的游戏中使用<a href="../Drag_And_Drop_Reference/Common/Function_Call.htm">函数调用</a> <img> 动作来调用该函数，它看起来像这样。</p>
  <p><img>要创建一个<span class="notranslate">GML</span> Visual<span class="notranslate">script</span> ，你只需在<span class="notranslate">Asset</span> 浏览器的任何地方使用鼠标右键<img> ，然后选择<strong>创建 </strong>，再选择<strong>脚本</strong>。这将创建一个新的<span class="notranslate">GML</span> Visual<span class="notranslate">script</span> ，并打开编辑窗口。</p>
  <p><img>你可以通过在<span class="notranslate">script</span> 浏览器中右键点击<img> ，选择<strong>重命名 </strong>（或者使用缓慢的左键双击<img> ）来命名<span class="notranslate">Asset</span> ，但是注意<span class="notranslate">script</span> 名称必须符合<span class="notranslate">assets</span> 的一般规则，所以它们必须以字母开头，并且只包含字母、数字或&quot;_&quot;下栏符号。你的<span class="notranslate">script</span> 也会预先填入一个<strong>声明新函数</strong>的动作，准备让你填写，你可以根据需要添加更多的函数声明（一个<span class="notranslate">script</span> 可以容纳多个函数，这对于将具有类似或相关用途的函数分组是很有用的）。</p>
  <p>如上所述，你可以向一个函数传递一些参数，它将使用这些参数来执行你所写的任务。为了更好地理解这一点，以任何一个内置的动作为例，想想它是如何工作的......你把它放在一个事件中并提供一些值，它将使你的实例做一些事情。用户定义的函数也是一样的，唯一的区别是由<em>你 </em>来编写。</p>
  <p>当定义一个新的函数时，你要给它一个名字，同时定义它所接受的任何参数的名称，如果它接受任何参数的话（函数可以不接受参数，也可以接受多个参数，这取决于你的要求）。如果你给了参数名称，那么这些参数将在函数调用的动作中作为<strong>局部变量 </strong>来保存函数的输入值。</p>
  <p>按照<a href="../../The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm">JS文档的规则</a>，在动作中加入注释，解释它的作用，也是一种好的做法。例如，考虑这个函数 <span class="inline">set_vec()</span> 。</p>
  <p><img>要调用上面的<span class="notranslate">script</span> ，你只需使用<strong>调用功能</strong>动作，像这样。</p>
  <p><img>你不仅可以向函数传递参数，而且还可以要求函数返回一个值（使用<a href="../Drag_And_Drop_Reference/Common/Return.htm">Return</a> <img> 动作），因此你可以用它们来（例如）建立计算方法或在复杂的碰撞检测后返回一个实例ID或任何事情。然而，请注意，使用return来<strong>结束函数</strong>，所以在它被使用后，任何行动都不会被执行，这意味着在你的函数的结构上必须要有一定的考虑。</p>
  <p>下面是一个<span class="notranslate">GML</span> Visual函数，它返回一个值。</p>
  <p><img alt="Declare A New Function Syntax" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Common/a_Common_Declare_Function.png" /></p>
  <p>上面的函数只是检查一个<span class="notranslate">room</span> 中的所有实例，看它们的 <span class="inline">object_index</span> 是什么，如果其中一个是玩家<span class="notranslate">object</span> ，该函数将返回 <span class="inline">true</span> （结束函数调用）或 <span class="inline">false</span> 。你将这样调用这个函数。</p>
  <p><img>因此，我们调用这个函数，让它创建一个临时（局部）变量来存储返回值（在本例中是 <span class="inline">true</span> 或 <span class="inline">false</span> ），然后检查这个变量并采取相应的行动。</p>
  <p>你也可以让参数成为可选项，并定义一个默认值，这样万一在函数调用中没有提供参数，就会使用默认值来代替。更多信息请参见动作的<a data-xref="{text}" href="../Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm#h">扩展示例2</a>。</p>
  <p>当为你的<span class="notranslate">GML</span> Visual<span class="notranslate">scripts</span> 制作函数时，你可以使用所有相同的动作，就像你将动作添加到<span class="notranslate">object</span> 事件中一样，你甚至可以从函数中调用函数，并以这种方式创建更加 &quot;模块化 &quot;的动作代码。以这种方式用函数构建<span class="notranslate">scripts</span> ，可以为你节省大量的时间来创建相同的动作<span class="notranslate">sequences</span> ，也可以帮助你的动作<span class="notranslate">sequences</span> ，更容易阅读和调试。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回:<a href="../../Content.htm">索引</a></div>
        <div style="float:right">下一步。<a href="Changing_DnD_To_Code.htm">将<span class="notranslate">GML</span> Visual改为代码</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
GML Visual Scripts
-->
  <!-- TAGS
drag_and_drop_scripts
-->
</body>
</html>