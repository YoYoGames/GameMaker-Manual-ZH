<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>虽然</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains the While action" />
  <meta name="rh-index-keywords" content="GML Visual Action - While" />
  <meta name="search-keywords" content="While" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><img> 虽然</h1>
  <p><b>While</b>动作用于执行<span class="notranslate">loops</span> ，只在特定条件返回时终止 <span class="inline">true</span> 。例如，你可以使用一个变量并将其设置为 <span class="inline">false</span> ，然后运行While<span class="notranslate">loop</span> ，让它检查这个变量，然后在
    在<span class="notranslate">loop</span> 中的某个时间，你将变量设置为 <span class="inline">true</span> ，然后<span class="notranslate">loop</span> 就会终止了。请注意，无论你在While<span class="notranslate">loop</span> 中设置了什么条件，<span class="notranslate">loop</span> 中的<i>所有</i>动作都会在脚本的其他部分继续之前运行到最后。
    或事件继续进行，改变条件并不会立即脱离<span class="notranslate">loop</span> 。</p>
  <p>当你在代码中添加一个While动作时，你需要提供要检查的变量，执行哪种检查（小于、大于、等于等），以及要检查变量的值（你也可以<span class="notranslate">flag</span> ，<i>不要</i>让While
    <span class="notranslate">loop</span> 检查，以确定条件<i>是否</i>为真）。然后在While<span class="notranslate">loop</span> 内添加要执行的动作，就像在 &quot;if &quot;中添加动作一样，即：把它放在动作的旁边而不是下面。</p>
  <p><img>所有添加到边上的动作都将包括在While中，并在事件或脚本继续进行之前执行。
    下继续添加动作（如下例所示）。注意，如果你调用<a href="Break.htm">Break</a>动作，你可以提前结束任何<span class="notranslate">loop</span> 。</p>
  <p> </p>
  <h4>行动语法。</h4>
  <p><img alt="While Icon" class="icon" src="../../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Loops/i_Loops_While.png" /></p>
  <h4>争论。</h4>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="notranslate">Variable</span></td>
        <td>检查中要使用的变量</td>
      </tr>
      <tr>
        <td><span class="notranslate">Is</span></td>
        <td>要执行的评价类型（小于、大于、等于、大于或等于和小于或等于）。</td>
      </tr>
      <tr>
        <td><span class="notranslate">Value</span></td>
        <td>用来检查变量的值</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>例子。</h4>
  <p><img>上面的动作块代码创建了一个临时的局部变量并将其设置为 <span class="inline">false</span> 。
    然后在While<span class="notranslate">loop</span> 动作中检查，当它返回false时，<span class="notranslate">loop</span> 将运行。在<span class="notranslate">loop</span> ，我们得到两个临时的局部变量，用于在<span class="notranslate">room</span> 中的一个随机的x/y位置，然后我们检查该位置是否有碰撞。如果没有发现碰撞，初始
    变量被设置为 <span class="inline">true</span> ，结束<span class="notranslate">loop</span> 。在<span class="notranslate">loop</span> 结束后，在我们发现没有碰撞的随机位置创建一个新实例。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Loop_Actions.htm">循环行动</a></div>
        <div style="float:right">下一步。<a href="For.htm">对于</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Action - While
-->
  <!-- TAGS
action_while_loop
-->
</body>
</html>