<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>如果碰撞的形状</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains the If Collision Shape action" />
  <meta name="rh-index-keywords" content="GML Visual Action - If Collision Shape" />
  <meta name="search-keywords" content="If Collision Shape" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><img> 如果碰撞的形状</h1>
  <p>这个动作用来检查并查看在一个给定的形状区域内或沿着一条线是否与一个给定的<span class="notranslate">object</span> 的实例发生了碰撞。你给出形状（矩形、椭圆或直线）、要检查的<span class="notranslate">object</span> ，然后提供形状的左上角和右下角的坐标。
    被使用的形状的左上角和右下角的坐标，或者在直线的情况下，起始和结束的位置。这些可以是游戏中的绝对位置<span class="notranslate">room</span> ，也可以是相对于执行动作的实例的位置。你可以看到
    这在下面的图片中是如何工作的。</p>
  <p><img>正如你所看到的，结果将取决于被检查的实例的碰撞掩码。
    被检查，这意味着你要找的<span class="notranslate">object</span> 的实例<i>必须</i>有一个分配给 <span class="inline">sprite_index</span> 的<span class="notranslate">sprite</span> ，或者一个分配给 <span class="inline">mask_index</span> 的<span class="notranslate">sprite</span> 。如果没有，那么它将不会被这些函数检测到。
    不管它是否正在绘制一个<span class="notranslate">sprite</span> 。值得注意的是，任何完全落在为椭圆或矩形形状设置的边界内的实例也将返回一个碰撞。如果检测到碰撞，该动作将评估为 <span class="inline">true</span> 。
    如果检测到碰撞，动作将评估为 <span class="inline">true</span> ，否则评估为 <span class="inline">false</span> ，尽管你也可以检查<b>Not</b> <span class="notranslate">flag</span> ，以检查是否<i></i>与给定的形状区<i></i>域没有碰撞，如果没有碰撞，动作将评估为 。
    否则它将评估为 <span class="inline">false</span> 。你也可以设置<b>Exclude Self</b>选项，将调用实例从碰撞检查中排除。</p>
  <p>接下来你可以勾选/不勾选<b>返回列表</b>的选项。勾选这个选项意味着这个动作将创建并填充一个<a href="../Data_Structures/Data_Structure_Actions.htm">列表</a><span> </span>数据结构，其中包含与形状相撞的<i>所有</i>物质，并将目标变量设置为DS列表ID。
    形状，并将<b>目标</b>变量设置为DS列表ID。如果不勾选，它只会在没有检测到碰撞时将<b>目标</b>变量设置为一个小于0的值，或者在碰撞中的<i>一个</i>实例的唯一ID值
    (注意，如果有多个实例发生碰撞，那么在不使用列表的情况下，你就没有办法知道哪个实例的ID会被返回）。</p>
  <p>如果你选择了返回一个列表--并且目标变量<i>没有</i>设置为<b>Temp</b>--那么你也可以选择<b>Free Target</b>选项。当设置为 <span class="inline">true</span> ，那么目标变量中包含的列表将被销毁，并在每次调用动作时创建一个新的列表（并返回到目标变量）。
    每次调用动作时，都会创建一个新的列表（并返回到目标变量）。通过这种方式，你可以重复使用同一个变量，而不用担心内存泄漏，因为如果你<i>不</i>检查<b>Free Target</b>选项，你就得负责在使用前销毁列表。
    在动作中再次使用该变量之前，你要负责销毁该列表。请注意，<i>不管</i>这个选项是否被选中，如果你把动作设置为<b>返回列表</b>，那么目标变量将<i>总是包含一个列表ID</i>。
    因此，当实例被销毁或<span class="notranslate">room</span> 结束时，这个变量需要被释放（你可以使用 <a href="../../../The_Asset_Editors/Object_Properties/Object_Events.htm"><b>清理</b></a>事件，例如，与<a href="../Data_Structures/Free_Data_Structure.htm">Free Data Structure</a><span> </span>动作一起使用）。
    值得注意的是，你可以将<b>自由目标</b>选项设置为使用一个预定义的变量或表达式，这样就可以通过在其他地方设置变量（或对表达式有不同的结果）来控制列表数据结构被释放的时间
    只要它被评估为 <span class="inline">true</span>/<span class="inline">false</span> 。</p>
  <p>最后，你提供你想保存返回值或列表ID的<b>目标</b>变量。<span class="notranslate">flag</span> 如果你将保存返回值的目标变量作为一个<b>Temp</b>（本地）变量，那么动作将创建这个变量来保存返回值，直到事件结束。
    返回值<i>，</i>直到事件结束，在这种情况下，Free Target选项没有任何作用，如果该选项被选中，你将负责销毁DS列表。如果没有提供目标变量并且勾选了<b>Return List</b>选项，则不会创建列表。</p>
  <p class="note"><b>重要的是!</b> <span class="notranslate">sprite</span> <span class="inline">mask_index</span> <span class="notranslate">sprite</span> 碰撞将只登记那些具有有效碰撞掩码的实例，即：它们有一个分配给 <span class="inline">sprite_index</span> ，或一个分配给<span class="notranslate">object</span> 。
    的实例没有碰撞掩码，那么碰撞将不会被检测到，无论该实例当时正在画什么。</p>
  <p>请注意，要把动作添加到 &quot;<span class="inline">if</span>&quot; 块中，它们应该被丢到动作的<i>一侧</i>，如下图所示。</p>
  <p><img alt="If Collision Shape Icon" class="icon" height="32" src="../../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Collisions/i_Collision_Shape.png" width="32" /></p>
  <p> </p>
  <h4>行动语法。</h4>
  <p><img alt="Example of different collision shapes" class="center" src="../../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Collisions/collision_shape_example.png" /></p>
  <h4>争论。</h4>
  <table>
    <tbody>
      <tr>
        <th>争论</th>
        <th>描述</th>
      </tr>
      <tr>
        <td><span class="notranslate">Shape</span></td>
        <td>要使用的形状</td>
      </tr>
      <tr>
        <td><span class="notranslate">Object</span></td>
        <td><span class="notranslate">object</span> ，以检查是否存在以下情况</td>
      </tr>
      <tr>
        <td><span class="notranslate">x1</span></td>
        <td>从哪一个位置开始？</td>
      </tr>
      <tr>
        <td><span class="notranslate">y1</span></td>
        <td>要从的Y位置开始</td>
      </tr>
      <tr>
        <td><span class="notranslate">x2</span></td>
        <td>结束时的X位置</td>
      </tr>
      <tr>
        <td><span class="notranslate">y2</span></td>
        <td>结束时的y位置</td>
      </tr>
      <tr>
        <td><span class="notranslate">Free Target</span></td>
        <td>可以设置为一个变量或表达式，或者设置为 <span class="inline">true</span>/<span class="inline">false</span> ，以控制重新使用列表变量时释放列表内存的情况</td>
      </tr>
      <tr>
        <td><span class="notranslate">Target</span></td>
        <td>作为动作返回值的目标变量</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>例子。</h4>
  <p><img>上面的动作块代码检查是否与任何<span class="notranslate">object</span> &quot;
   <span class="inline">obj_Enemy</span>&quot;的实例在调用实例位置周围100px的范围内发生碰撞。该动作生成一个所有被发现有碰撞的实例的列表，并将列表中的ID存储在目标变量中。如果该动作的评估值为
    <span class="inline">true</span> 那么这个列表就会被循环，每一个ID存储在列表中的实例的&quot;<span class="inline">hp</span>&quot;变量就会被减少1。然后释放DS列表。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">回来了。<a href="Collision_Actions.htm">碰撞行动</a></div>
        <div style="float:right">下一个。<a href="If_Collision_Point.htm">如果碰撞点</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Action - If Collision Shape
-->
  <!-- TAGS
action_if_collision_shape
-->
</body>
</html>