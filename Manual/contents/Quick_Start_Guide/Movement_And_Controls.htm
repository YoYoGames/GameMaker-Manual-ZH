<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>运动和控制</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Some basic code and GML Visualto show people how to move things around within a game." />
  <meta name="rh-index-keywords" content="Quick Start - Movement And Controls" />
  <meta name="search-keywords" content="movement,controls" />
  <meta name="robots" content="NOODP" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>运动和控制</h1>
  <p>本快速入门指南的<a href="Drawing.htm">上一节</a>给出了一些在屏幕上画东西的例子，但如果你不能移动它们，仅仅画东西是没有什么用的......所以在这一节中，我们将为你提供一些移动的例子，<span class="notranslate">objects</span> ，以及一些不同类型游戏的基本控制方案。所有的例子都是用<span class="notranslate">GML</span> 视觉以及<span class="notranslate">GML</span> 代码给出的，所以你可以使用你觉得更合适的方式。请注意，我们不会在这里进行太深入的解释，因为我们希望你能尽快开始制作东西，所以我们鼓励你在使用过程中探索任何链接，并使用手册中的 &quot;搜索 &quot;功能来寻找你不确定的其他信息。</p>
  <p>在进行任何进一步的工作之前，你可能想从 "<a href="../Introduction/The_Start_Page.htm">开始页</a>"中创建一个新的项目（<span class="notranslate">GML</span> 或<span class="notranslate">GML</span> Visual），并添加（或创建）一些<span class="notranslate">sprites</span> 以及一两个<span class="notranslate">object</span> - 因为我们将给你一些代码，你可以使用这些代码进行测试 - 并确保该项目有一个<span class="notranslate">room</span> 来放置实例。不要太担心你做的<span class="notranslate">sprites</span> 是什么样子的，因为即使是一个简单的白色方块也可以，一旦你准备好了一切，你就可以开始处理下面列出的例子。</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="#">朝着鼠标的方向移动</a></p>
  <div class="droptext" data-targetname="drop_down">
    <p class="dropspot">让<span class="notranslate">object</span> 移动并与玩家互动的最简单方法之一是使用鼠标，在这个例子中，我们将向你展示如何使用一些基本的代码来让<span class="notranslate">object</span> 向用户点击了鼠标左键的地方移动<img> 。</p>
    <p class="dropspot">首先，打开一个<span class="notranslate">object</span> ，给它分配一个<span class="notranslate">sprite</span> ，然后给它一个<strong>全局鼠标左键下移事件</strong>。</p>
    <p class="dropspot"><img alt="LMB Icon" class="icon" src="../assets/Images/Icons/Icon_LMB.png" /></p>
    <p class="dropspot">我们使用<strong>全局 </strong>鼠标事件，因为它们可以检测到<span class="notranslate">room</span> ，而普通的鼠标事件只有在鼠标实际在实例<a class="glossterm" data-glossterm="界限盒" href="#">边界框</a>内点击的情况下才会检测到点击。在这个事件中，我们要添加这些动作或代码。</p>
    <p class="dropspot"><img alt="Adding The Mouse Left Button Down Event" class="center" src="../assets/Images/QS_Guide/QS_Add_GlobalLMBDownEvent.png" /></p>
    <p class="code">move_towards_point(mouse_x, mouse_y, 2);</p>
    <p class="dropspot">这里我们要告诉实例向屏幕上的某个位置移动，在这里是 &quot;<span class="inline">mouse_x</span>&quot; 和 &quot;<span class="inline">mouse_y</span>&quot; 的位置（&quot;<span class="inline">mouse_x</span>&quot; 和 &quot;<span class="inline">mouse_y</span>&quot; 是<strong>内置 </strong><span class="glossextra">变量</span>，总是保持当前鼠标光标的位置）。<span class="notranslate">GML</span> Visual通过设置 &quot;<span class="inline">direction</span>&quot; 和 &quot; <span class="inline">speed</span>&quot; 来实现这一目标。 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/Instance_Variables.htm"><strong>实例变量</strong></a>来实现，而<span class="notranslate">GML</span> 则使用函数 <a href="../GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_towards_point.htm"><span class="inline">move_towards_point()</span></a>(这也设置了 <span class="inline">speed </span>和 <span class="inline">direction </span>变量，只是在一个单一的、易于使用的函数中）。</p>
    <p class="dropspot">将这个<span class="notranslate">object</span> 的一个实例放在一个<span class="notranslate">room</span> ，然后点击播放按钮<img> ，然后点击<img> 周围的<span class="notranslate">room</span> ，使这个实例向鼠标移动。</p>
    <p class="dropspot"><img>很好!<span class="notranslate">object</span> 的实例现在向你点击的地方移动，如果你按住按钮，实例就会一直跟着鼠标指针移动。然而，有一个问题...在你点击一次并释放后，实例将继续移动，并最终离开<span class="notranslate">room</span>!我们有很多方法可以解决这个问题，你选择哪种方法取决于你想做什么，但现在最简单的解决方法是简单地添加一个<strong>全局鼠标按钮释放</strong>事件，所以现在添加到<span class="notranslate">object</span> ，并给它这样的代码。</p>
    <p class="dropspot"><img alt="GML VisualTo Move Instance Towards Mouse" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_1_1.png" /></p>
    <p class="code">speed = 0;</p>
    <p class="dropspot">有了这个方法，只要按住鼠标按钮，实例就会跟随鼠标光标移动，而当你松开按钮时，它就会停止移动。按播放键<img> ，现在就可以测试了。</p>
    <p class="dropspot">在我们离开这个例子之前，有一个最后的问题需要解决......如果你点击并<em>按住 </em>鼠标按钮，但不移动光标，那么实例就会向光标移动，然后围绕光标 &quot;振动&quot;。这是因为实例每次移动的速度超过了1个像素，所以 &quot;过冲 &quot;了位置，然后试图向后移动，然后又过冲，等等......（如果不是很明显的话，把移动速度设为5或类似的速度，就可以看到这个问题）。</p>
    <p class="dropspot"><img>为了解决这个问题，我们需要用这段代码在<span class="notranslate">object</span> ，添加一个<strong>步骤事件</strong>。</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="code">var _dist = point_distance(x, y, mouse_x, mouse_y);<br />
      <br />
      if _dist &lt;= speed<br />
      {<br />
          speed = 0;<br />
      }
    </p>
    <p class="dropspot">在这里，我们只是检查实例到鼠标位置的距离，如果它与当前速度相同或小于当前速度，我们就将速度设置为0。这使得实例在足够接近鼠标位置时停止，而且我们不会出现那种讨厌的 &quot;振动 &quot;问题。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="#">键盘的4向和8向运动</a></p>
  <div class="droptext" data-targetname="drop_down1">
    <p class="dropspot"><a href="What_Is_Programming_.htm">就在本指南的开头</a>，我们向你展示了以下动作和代码，以使一个实例在每个游戏步骤中向右移动两个像素。</p>
    <p class="dropspot"><img alt="LMB Icon" class="icon" src="../assets/Images/Icons/Icon_LMB.png" /></p>
    <p class="code">x = x + 2;</p>
    <p class="dropspot">这种类型的移动被称为<strong>位置 </strong>移动，因为我们基本上是在每次运行代码时将实例拿起并在一个新的位置上再次放置。在这个例子中，我们要做的是向你展示如何使用这种类型的运动来在四个方向上移动一个实例：上、下、左、右。</p>
    <p class="dropspot">首先，打开一个<span class="notranslate">object</span> ，并给它分配一个<span class="notranslate">sprite</span> 。现在，我们可以在这一点上添加各种<strong>键盘事件</strong>，并在每一个事件中让实例向所需的方向移动，然而，我们只希望玩家能够一次向一个方向移动，而且只用键盘事件来做这件事比用代码做这件事要复杂一些。取而代之的是，我们将使用<strong>Step事件</strong>--你现在应该把它添加到<span class="notranslate">object</span> --用以下动作或代码来使用箭头键移动。</p>
    <p class="dropspot"><img alt="Animation Of Instance Moving Towards Mouse" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_1_1.gif" /></p>
    <p class="code">if keyboard_check(vk_left)<br />
      {<br />
          x = x - 2;<br />
      }<br />
      else if keyboard_check(vk_right)<br />
      {<br />
          x = x + 2;<br />
      }<br />
      else if keyboard_check(vk_up)<br />
      {<br />
          y = y - 2;<br />
      }<br />
      else if keyboard_check(vk_down)<br />
      {<br />
          y = y + 2;<br />
      }</p>
    <p class="dropspot">我们使用 &quot; <span class="inline">if... else if... else if...</span>&quot; 结构来确保实例每次只向一个方向移动，因此实例应该只能向上、向下、向左或向右移动，但不能向对角线移动。将一个<span class="notranslate">object</span> 的实例放在一个<span class="notranslate">room</span> ，然后按下<strong>播放按钮 </strong> <img> ，现在就可以进行测试了!如果一切正常，你应该有这样的东西。</p>
    <p class="dropspot"><img alt="GML VisualTo Set The Instance Speed" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_1_2.png" /></p>
    <p class="dropspot">我们也可以很容易地修改这段代码，将4向运动转换为8向运动......只需从代码块中删除 &quot; <span class="inline">else</span>&quot; 命令，这样一切就看起来像这样。</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="code">if keyboard_check(vk_left)<br />
      {<br />
          x = x - 2;<br />
      }<br />
      if keyboard_check(vk_right)<br />
      {<br />
          x = x + 2;<br />
      }<br />
      if keyboard_check(vk_up)<br />
      {<br />
          y = y - 2;<br />
      }<br />
      if keyboard_check(vk_down)<br />
      {<br />
          y = y + 2;<br />
      }</p>
    <p class="dropspot">现在，当你按下<strong>播放按钮 </strong>时，<img> ，它会看起来像这样。</p>
    <p class="dropspot"><img alt="Animation Showing Instance Vibrating" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_1_2.gif" /></p>
    <p class="dropspot">最后一件事值得用<span class="notranslate">GML</span> 编码的用户注意 ...当使用<span class="notranslate">GML</span> Visual时，你可以从一个下拉列表中选择你想使用的键盘键，但使用<span class="notranslate">GML</span> ，就没有那么简单了。有一些你可以使用的<a href="../GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm">键盘常量</a>--比如上面代码中显示的方向键常量--但<em>没有 </em>字母数字键的常量。这些处理方式略有不同，需要你使用函数 <a href="../GameMaker_Language/GML_Reference/Strings/ord.htm"><span class="inline">ord()</span></a>.下面的代码显示了如何使用WASD而不是方向键来工作。</p>
    <p class="code">if keyboard_check(ord(&quot;A&quot;))<br />
      {<br />
          x = x - 2;<br />
      }<br />
      if keyboard_check(ord(&quot;D&quot;))<br />
      {<br />
          x = x + 2;<br />
      }<br />
      if keyboard_check(ord(&quot;W&quot;))<br />
      {<br />
          y = y - 2;<br />
      }<br />
      if keyboard_check(ord(&quot;S&quot;))<br />
      {<br />
          y = y + 2;<br />
      }</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="#">游戏手柄运动</a></p>
  <div class="droptext" data-targetname="drop_down2">
    <p class="dropspot">我们已经介绍了鼠标的移动和键盘的移动，所以这意味着现在是介绍<strong>游戏 </strong>手柄移动的时候了。现在，我们不会讨论D-pad，因为它的工作原理与使用键盘一样（只需将上述例子中的键盘功能改为 <a href="../GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_check.htm"><span class="inline">gamepad_button_check()</span></a>或<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Gamepad/If_Gamepad_Button_Down.htm">If Gamepad button Down</a>），所以在这个例子中，我们将讨论使用模拟摇杆进行移动。</p>
    <p class="dropspot">首先，我们需要检测正在使用的游戏板。游戏板被赋予一个从0到11的ID值，所以我们将使用&quot; <span class="inline">for</span>&quot;<span class="notranslate">loop</span> 来检测任何连接的游戏板的ID，并将这个ID值存储在一个变量中供将来使用。由于我们只想设置检测第一个连接的游戏板，而不是所有的游戏板，我们将在检测到一个游戏板后使用 &quot; <span class="inline">break</span>&quot; 命令，以便它 &quot;打破 &quot;<span class="notranslate">loop</span> （例如，如果连接的第一个游戏板的ID是4，那么<span class="notranslate">loop</span> 将只运行5次，检查ID值0-4，然后在遇到游戏板时打破<span class="notranslate">loop</span> ）。因此，制作（或打开）一个<span class="notranslate">object</span> ，给它分配一个<span class="notranslate">sprite</span> ，然后添加一个<strong>创建事件</strong>，内容如下。</p>
    <p class="dropspot"><img alt="GML VisualActions For The Step Event" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_1_3.png" /></p>
    <p class="code">gamepad_id = -1;<br />
      <br />
      for (var i = 0; i &lt; 12; i += 1;)<br />
      {<br />
          if gamepad_is_connected(i)<br />
          {<br />
              gamepad_id = i;<br />
              gamepad_set_axis_deadzone(gamepad_id, 0.2);<br />
      <br />
              break;<br />
          }<br />
      }
    </p>
    <p class="dropspot">请注意，在上面的代码中，我们将 <strong> <a class="glossterm" data-glossterm="死区" href="#">死区</a> </strong>为游戏板设置了死区。这是因为不同品牌的游戏板上的模拟杆会有不同的敏感度，有时它们会非常敏感，如果你不设置死区，那么它们会在你的游戏中引起不必要的运动。所以我们把死区设置为一个类似0.2的值，告诉<span data-keyref="GameMaker Name">GameMaker</span>忽略任何低于这个<a class="glossterm" data-glossterm="绝对的" href="#">绝对值</a>的游戏手柄数值。</p>
    <p class="dropspot">为了添加实际的运动，我们需要一个<strong>步骤事件</strong>，所以现在就添加它，并给它添加以下<span class="notranslate">GML</span> Visual或GML。</p>
    <p class="dropspot"><img alt="GML VisualExample" class="center" src="../assets/Images/QS_Guide/QS_DnD_Example.png" /></p>
    <p class="code">if gamepad_id &gt; -1<br />
      {<br />
          var _h = gamepad_axis_value(gamepad_id, gp_axislh);<br />
          var _v = gamepad_axis_value(gamepad_id, gp_axislv);<br />
          x += _h * 4;<br />
          y += _v * 4;<br />
      }</p>
    <p class="dropspot">这里我们要检查<em>左 </em>摇杆的水平或垂直运动。轴函数返回一个介于-1和1之间的值，所以对于横轴来说，-1是左，0是不动，1是右，而对于纵轴来说，-1是向上，0是不动，1是向下。还要注意的是，这些值在-1和1<em>之间 </em>，所以--例如--横轴可以返回一个0.5的值，意味着杆子在 &quot;休息 &quot;位置和完全推到右边之间的一半。出于这个原因，我们再把这个值乘以4（你可以乘以任何数值，这取决于你希望实例移动的速度）--这意味着实例的速度将取决于在杆轴上做了多少运动。</p>
    <p class="dropspot"><span class="notranslate">object</span> 将这个<span class="notranslate">room</span> ，并按下<strong>播放按钮 </strong>。 <strong> <img></strong>然后用你连接的游戏手柄的左摇杆来回移动。你应该看到像这样的东西。</p>
    <p class="dropspot"><img alt="GML VisualStep Event Movement Actions" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_2_1.png" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down3" href="#">先进的8向运动</a></p>
  <div class="droptext" data-targetname="drop_down3">
    <p class="dropspot">在这最后一个例子中，我们将重新审视我们的8向运动代码，并解决它的一个问题，即对角线运动实际上比上/下/左/右运动要快。这只是因为在对角线上移动时，你是沿着由x/y移动值创建的直角三角形的斜边移动。</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="dropspot">为了更清楚地说明发生了什么，让我们去掉所有的文字和<span class="notranslate">sprites</span> ，简单地显示同一运动线旋转45°，使其成为水平的。</p>
    <p class="dropspot"><img alt="Animation Showing 4-Way Keyboard Movement" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_2_1.gif" /></p>
    <p class="dropspot">正如你所看到的，差异是非常明显的，如果实例每一步移动超过1或2个像素，那么就会变得非常明显，对角线的移动要<em>快得多 </em>!那么，我们如何限制这种情况呢？有很多方法可以做到这一点，但我们将专注于其中的一个，因为它引入了几个函数和概念，对你以后的游戏会很有用。</p>
    <p class="dropspot">为了处理这个问题，我们必须把独立按下的键的输入值存储在<span class="glossextra">变量</span>中，然后检查它们，并根据按下的键的组合来移动。因此，为此你需要一个<span class="notranslate">object</span> ，并分配一个<span class="notranslate">sprite</span> ，你需要给它一个带有以下动作或代码的<strong>步骤事件</strong>。</p>
    <p class="dropspot"><img alt="GML VisualStep Event Movement Actions" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_2_2.png" /></p>
    <p class="note"><span class="note">注意</span>我们将上面的视觉动作分成两列，以使它更容易被视觉化，但在视觉编辑器中，它将被连续放置。</p>
    <p class="code">var _left = keyboard_check(vk_left);<br />
      var _right = keyboard_check(vk_right);<br />
      var _up = keyboard_check(vk_up);<br />
      var _down = keyboard_check(vk_down);<br />
      var _hspd = _right - _left;<br />
      var _vspd = _down - _up;</p>
    <p class="dropspot">我们还需要添加一些代码来实际移动，但在这之前，我们先解释一下。我们想把左/右/上/下转换为等效的水平和垂直速度值，所以要做到这一点，我们要得到每个键的值，然后对它进行一些基本的数学运算，以得到速度值。这是因为如果一个键被按下，那么检查动作或函数将返回 &quot;1&quot;，如果它<em>没有 </em>被按下，那么函数将返回0。所以，如果--例如--右键被按下，你的 &quot; <span class="inline">_hspd</span>&quot;是 &quot;1-0=1&quot;，如果左键被按下，你的 &quot; <span class="inline">_hspd</span>&quot;是 &quot;0-1=-1&quot;（如果它们都被按下，那么就是 &quot;1-1=0&quot;，所以实例不会移动）。记住，在<span data-keyref="GameMaker Name">GameMaker</span> <span class="notranslate">room</span> 中，要向右移动，我们要加到 <span class="inline">x </span>的位置，要向左移动，我们要减去，所以这段代码会给我们一个正值或负值，我们可以根据键盘输入的情况，加或减去水平或垂直移动。</p>
    <p class="dropspot">现在我们可以添加实际移动实例的代码，所以--仍然在<strong>步骤事件</strong>中，在上述代码之后--添加这个。</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="code">if (_hspd != 0 || _vspd != 0)<br />
      {<br />
          var _spd = 4;<br />
          var _dir = point_direction(0, 0, _hspd, _vspd);<br />
          var _xadd = lengthdir_x(_spd, _dir);<br />
          var _yadd = lengthdir_y(_spd, _dir);<br />
          x = x + _xadd;<br />
          y = y + _yadd;<br />
      }</p>
    <p class="dropspot">上面的代码首先检查两个<span class="glossextra">表达式</span>中的一个是否为真，即：如果水平或垂直速度变量不是0。注意 &quot; <span class="inline">if</span>&quot;<span class="notranslate">GML</span> 检查如何使用符号 &quot; <span class="inline">||</span>&quot; 。这在编程时意味着 &quot; <span class="inline">or</span>&quot;，所以--用普通语言来说--你在检查</p>
    <p class="code">if the variable _hspd does not equal zero<br />
      <strong>or</strong><br />
      if the variable _vspd does not equal zero
    </p>
    <p class="dropspot"><span class="notranslate">string</span> 你可以通过这种方式在 &quot; <span class="inline">if</span>&quot; 检查中把多个表达式放在一起，这些表达式有多种不同的评估方式（更多信息请见<a href="../GameMaker_Language/GML_Overview/Expressions_And_Operators.htm">这里的</a> <strong>表达式</strong>部分）。</p>
    <p class="dropspot">下一节代码在一个变量中存储了一个实际运动速度的值，然后使用 <span class="inline">_hspd </span>和 <span class="inline">_vspd </span>的值获得一个方向，这些值可以是-1、0或1。方向函数从（0，0）开始检查，因为我们没有使用<span class="notranslate">room</span> 坐标，相反，我们希望它根据变量值评估为一个从0°到360°的方向。下图说明了正在发生的事情，比试图用语言来解释要好。</p>
    <p class="dropspot"><img alt="Animation Showing 8-Way Keyboard Movement" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_2_2.gif" /></p>
    <p class="note"><span class="note">注意</span> <span data-keyref="GameMaker Name">GameMaker</span>中的方向是<strong>逆时针</strong>计算的，所以0°和360°是向右，90°是向上，180°是向右，270°是向下。</p>
    <p class="dropspot">最后，我们用 <a href="../GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/lengthdir_x.htm"><span class="inline">lengthdir_x()</span></a>和 <a href="../GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/lengthdir_y.htm"><span class="inline">lengthdir_y()</span></a>函数来实际移动该变量。这些是 <strong> <a class="glossterm" data-glossterm="向量" href="#">向量</a>  </strong>函数，它获取一个长度（距离）和一个方向，然后根据这些值计算出给定轴上的新位置（更深入的解释见函数描述）。</p>
    <p class="dropspot">这有很多东西需要一下子接受，如果你不太明白，也不要担心！你会慢慢明白的。你会慢慢明白的!现在要做的就是将这个<span class="notranslate">object</span> 的实例添加到一个<span class="notranslate">room</span> ，然后按下<strong>播放按钮 </strong>。 <strong> <img></strong>，你就会得到如丝般顺滑的8向运动，而不会出现任何与对角线移动有关的问题。</p>
    <p class="dropspot"><img alt="Getting Gamepad ID Using DnD" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_3_1.png" /></p>
  </div>
  <p> </p>
  <p>通过这些例子--以及之前的绘图例子--我们希望你已经有了足够的了解，可以开始制作你自己的项目了本快速入门指南的最后一页包含了对你所学到的一些东西的总结，以及其他学习材料的链接。</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回:<a href="../Content.htm">索引</a></div>
        <div style="float:right">下一步。<a href="Summary.htm">摘要</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Movement
Controls
Movement and Controls
Movement Examples
Controls Examples
-->
  <!-- TAGS
qs_movement_controls
-->
</body>
</html>