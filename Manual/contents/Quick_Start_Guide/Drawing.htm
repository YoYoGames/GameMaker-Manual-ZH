<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>绘图</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Some basic code to show people how things are drawn." />
  <meta name="rh-index-keywords" content="Quick Start - Drawing" />
  <meta name="search-keywords" content="drawing,draw event,GUI layer" />
  <meta name="robots" content="NOODP" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>绘图</h1>
  <p>本节（以及接下来的<a href="Movement_And_Controls.htm">运动和控制</a>部分）旨在为你提供<span class="notranslate">GML</span> 或<span class="notranslate">GML</span> Visual的实际例子，使你能够尽快开始制作你的第一个游戏项目。我们不会对事情做太深入的解释，因为我们希望你能尽快开始制作东西，所以我们鼓励你在进行过程中探索任何链接，并使用手册的 &quot;搜索 &quot;功能来寻找你不确定的额外信息。</p>
  <p>在这一节中，我们将专注于简单地将信息绘制到屏幕上，包括文本和图像，同时还将解释一下不同的<strong>绘图事件</strong>，特别是主<strong>绘图</strong>事件和<strong>绘图GUI </strong>事件（注意，在一些例子中，你将需要添加其他事件，但我们会在谈到这些事件时解释）。</p>
  <p><img alt="The Draw Events" class="center" src="../assets/Images/QS_Guide/QS_DrawEvents.png" /></p>
  <p>在做任何进一步的工作之前，你可能想从 "<a href="../Introduction/The_Start_Page.htm">开始 "页</a>上做一个新的项目（<span class="notranslate">GML</span> 或<span class="notranslate">GML</span> Visual），并添加（或创建）一些<span class="notranslate">sprites</span> 以及一两个<span class="notranslate">object</span> ，因为我们将给你一些代码，你可以用这些代码进行测试。即使是一个白色的正方形，现在也可以作为我们的<span class="notranslate">sprite</span> 的<span class="notranslate">object</span>!</p>
  <p>现在，正如在 "<a href="Objects_And_Instances.htm">对象和实例</a>"一节中提到的，如果你不给<span class="notranslate">object</span> ，那么<span data-keyref="GameMaker Name">GameMaker</span>将默认绘制，也就是说，如果<span class="notranslate">object</span> 有一个分配给它的<span class="notranslate">sprite</span> ，这个<span class="notranslate">sprite</span> 将被绘制，并完成任何已经添加的变换。我们所说的变换是什么意思？嗯，每个<span class="notranslate">object</span> 都有一些内置的<a class="glossterm" data-glossterm="变量" href="#">变量</a>，这些变量将控制<span class="notranslate">object</span> 的实例在默认绘制时如何绘制其<span class="notranslate">sprite</span> ，你可以在游戏运行时改变这些变量，以改变<span class="notranslate">sprite</span> 的绘制方式。</p>
  <p class="note"><strong>注意</strong>：你可以<a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/Sprite_Instance_Variables.htm">在这里</a>找到所有可用于转换实例的内置变量的列表<span class="notranslate">sprites</span> 。 <span class="notranslate">GML</span> Visual用户有一些影响这些变量的专门操作，你可以<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Drawing_Actions.htm">在这里</a>找到，你也可以使用实际的变量本身，以及<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Variable.htm">Get Instance Variable</a>和<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Set_Instance_Variable.htm">Set Instance Variable</a>操作。</p>
  <p>让我们看看一些例子。</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="#">改变Alpha（透明度）。</a></p>
  <div class="droptext" data-targetname="drop_down">
    <p class="dropspot"><strong>α </strong>值是控制正在绘制的东西的透明度，在<span data-keyref="GameMaker Name">GameMaker</span>中，你可以使用 <span class="inline">image_alpha</span> 内置变量来改变指定的<span class="notranslate">sprite</span> 的透明度。要看这是如何工作的，打开（或创建）一个<span class="notranslate">object</span> ，给它分配一个<span class="notranslate">sprite</span> ，然后给<span class="notranslate">object</span> 一个<strong>创建事件</strong>。在创建事件中，只需添加以下<span class="notranslate">GML</span> Visual或GML。</p>
    <p class="dropspot"><img alt="GML VisualDraw Example For Transparency" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_1.png" /></p>
    <p class="code">var _val = random(1);
      <br />
      image_alpha = _val;
    </p>
    <p class="dropspot">图像阿尔法的计算值从0到1，其中0是完全透明的，1是完全不透明的（默认情况下，它被设置为1）。所以在这个例子中，我们所做的就是把图像alpha设置为一个从0到1的随机十进制值。将这个<span class="notranslate">object</span> 的几个实例放在一个<span class="notranslate">room</span> ，然后点击<span class="notranslate">IDE</span> 顶部的<strong>播放按钮 </strong> <img> 。</p>
    <p class="dropspot">你应该看到，<span class="notranslate">object</span> 的每个实例都以不同的透明度绘制其<span class="notranslate">sprite</span> ，例如。</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="#">改变颜色的混合（着色）。</a></p>
  <div class="droptext" data-targetname="drop_down1">
    <p class="dropspot">当你的<span class="notranslate">object</span> 默认画出一个<span class="notranslate">sprite</span> ，这个<span class="notranslate">sprite</span> 实际上是被画出了一个颜色的<strong>混合 </strong>（或<strong>着色</strong>），这个颜色值被存储在 <span class="inline">image_blend</span> 内置变量中。默认情况下，这个颜色是白色的，这基本上意味着当<span class="notranslate">sprite</span> 在屏幕上显示时，不会有任何颜色被加入。然而，你可以使用其他颜色来实现特殊效果，例如，使用红色来显示实例受到了一些伤害。</p>
    <p class="dropspot">在这个例子中，我们要在按住一个键的时候用<span class="notranslate">sprite</span> 混合不同的颜色，因此你需要打开（或创建）一个<span class="notranslate">object</span> ，给它分配一个<span class="notranslate">sprite</span> ，然后给这个<span class="notranslate">object</span> 一个<strong>向下键&lt;Space&gt;事件</strong>。</p>
    <p class="dropspot"><img alt="Example Of Sprites Drawn With Different Alpha Values" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_1.png" /></p>
    <p class="dropspot">在这个按键事件中，添加以下<span class="notranslate">GML</span> Visual或GML。</p>
    <p class="dropspot"><img alt="Add Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_Add_SpaceKeyPressEvent.png" /></p>
    <p class="code">var _col = choose(c_red, c_green, c_blue, c_yellow, c_fuchsia, c_orange);
      <br />
      image_blend = _col;
    </p>
    <p class="dropspot"><span class="notranslate">object</span> 在一个<span class="notranslate">room</span> ，然后点击<span class="notranslate">IDE</span> 顶部的 "播放 "按钮<img> ，并测试按住和松开<em>空格键 </em>。你应该看到，在按住键的时候，每个实例都会迅速地改变它的颜色，而当它被释放的时候，就会停止改变。</p>
    <p class="dropspot"><img alt="GML VisualExample Using Key Down Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_2.png" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="#">变化的规模</a></p>
  <div class="droptext" data-targetname="drop_down2">
    <p class="dropspot">我们可以为我们的<span class="notranslate">sprite</span> ，另一个属性是<strong>比例 </strong>值，允许我们在任何时候把它画大或画小。比例是由两个独立的变量，即 <span class="inline">image_xscale</span> 和 <span class="inline">image_yscale</span> 变量沿X和Y轴独立计算的。默认情况下，这两个变量被设置为1，它们的作用类似于<strong>乘数</strong>，所以0.5的值是一半的比例，2的值是两倍的比例。</p>
    <p class="note"><strong>重要的是! </strong>使用这些变量改变指定的<span class="notranslate">sprite</span> 规模，<strong>也将改变边界框的大小</strong>，使之<strong>相匹配</strong>，这意味着<span class="notranslate">sprite</span> 的碰撞检测区域也将扩大。</p>
    <p class="dropspot"><span class="notranslate">sprite</span> 在这个例子中，我们将使用一些简单的数学方法来使一个实例在<span class="notranslate">loop</span> 中上下缩放。首先，打开（或创建）一个<span class="notranslate">object</span> ，给它指定一个<span class="notranslate">sprite</span> ，然后给<span class="notranslate">object</span> 一个<strong>创建事件</strong>。在这个事件中添加以下内容。</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="code">timer = 0;</p>
    <p class="dropspot">现在用这个添加一个<strong>步骤事件</strong>到<span class="notranslate">object</span> 。</p>
    <p class="dropspot"><img alt="Example Showing Colour Blending" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_2.png" /></p>
    <p class="code">timer = timer + 1;
      <br />
      var _val = dsin(timer);
      <br />
      image_xscale = 1 + _val;
      <br />
      image_yscale = 1 + _val;
    </p>
    <p class="dropspot">这里我们使用数学函数 <a href="../GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/dsin.htm"><span class="inline">dsin()</span></a>来生成一个介于-1和1之间的值，然后将其应用于刻度变量。在将一些实例放入<span class="notranslate">room</span> ，并按下<strong>播放按钮 </strong> <img> ，你应该看到这些实例是如何从0的比例上升到2的比例，然后再返回。</p>
    <p class="dropspot"><img alt="GML VisualSet Variable Example" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_3_1.png" /></p>
    <p class="dropspot">最后一件事......将 &quot; <span class="inline">image_yscale</span>&quot;部分改为 &quot; <span class="inline">1 - _val</span>&quot;，看看会发生什么。</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p>上面的例子只是说明了当<span data-keyref="GameMaker Name">GameMaker</span>默认绘制时，你可以操作<span class="notranslate">object</span> <span class="notranslate">sprite</span> ，但如果你想为一个<span class="notranslate">object</span> ，绘制不止一个东西呢？在这些情况下，你需要使用<strong>Draw Event</strong>来明确告诉<span data-keyref="GameMaker Name">GameMaker</span>要绘制什么，这就是我们在下面的例子中要做的。</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down3" href="#">将两个（或多个）<span class="notranslate">Sprites</span> 。</a></p>
  <div class="droptext" data-targetname="drop_down3">
    <p class="dropspot">对于这个例子，你需要两个<span class="notranslate">sprites</span> 和一个<span class="notranslate">object</span> 。将<span class="notranslate">sprites</span> 称为 &quot; <span class="inline">spr_One</span>&quot; 和 &quot; <span class="inline">spr_Two</span>&quot; ，然后将 &quot; <span class="inline">spr_One</span>&quot; 的原点设为中心，将 &quot; <span class="inline">spr_Two</span>&quot; 的原点设为左中部。</p>
    <p class="dropspot"><img>将第一个<span class="notranslate">sprite</span> （&quot; <span class="inline">spr_One</span>&quot;与中心原点）分配给你所创建的<span class="notranslate">object</span> ，然后添加一个<strong>创建事件</strong>。在创建事件中，添加以下<span class="notranslate">GML</span> Visual或GML。</p>
    <p class="dropspot"><img alt="GML VisualActions To Change Sprite Scale" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_3_2.png" /></p>
    <p class="code">draw_angle = 0;</p>
    <p class="dropspot">我们将使用这个变量来旋转 &quot; <span class="inline">spr_Two</span>&quot; ，并将其覆盖在分配给<span class="notranslate">sprite</span> 的<span class="notranslate">object</span> 上（&quot; <span class="inline">spr_One</span>&quot;）。要做到这一点，我们需要给<span class="notranslate">object</span> 添加一个<strong>绘图事件 </strong>。通过这样做，我们告诉<span data-keyref="GameMaker Name">GameMaker</span>，我们要接管这个实例的绘图，这意味着我们的代码将包括调用 <a href="../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_self.htm"><span class="inline">draw_self()</span></a>函数或 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Drawing/Draw_Self.htm"><strong>绘制自我</strong></a>动作。这个动作简单地复制了<span class="notranslate">object</span> 在没有Draw Event的情况下所做的事情，它是默认绘制指定的<span class="notranslate">sprite</span> 。然后我们将绘制第二个<span class="notranslate">sprite</span> ，我们想用它作为旋转的覆盖<span class="notranslate">sprite</span> 。<span class="notranslate">GML</span> 视觉和<span class="notranslate">GML</span> 看起来像这样。</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="code">draw_self();
      <br />
      draw_angle = draw_angle + 0.5;
      <br />
      draw_sprite_ext(spr_Two, 0, x, y, 1, 1, draw_angle, c_red, 1);
    </p>
    <p class="dropspot"><span class="notranslate">object</span> 在<span class="notranslate">room</span> 编辑器中添加一些实例，然后按下<a class="glossterm" data-glossterm="IDE" href="#">IDE</a>顶部的<strong>播放按钮 </strong> <img> 。如果一切正常，你现在应该看到类似这样的东西。</p>
    <p class="dropspot"><img class="center" src="../assets/Images/QS_Guide/QS_DrawExample_3.gif" title="Animation Showing Sprite Scaling" /></p>
    <p class="dropspot">在我们离开这个例子之前，让我们稍微调整一下，不要让&quot; <span class="inline">spr_Two</span>&quot;简单地旋转，我们要让它指向鼠标的位置。为此，我们需要改变绘图事件<span class="notranslate">GML</span> Visual或<span class="notranslate">GML</span> ，使其看起来像这样。</p>
    <p class="dropspot"><img alt="Show Origins For Sprites" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_1.png" /></p>
    <p class="code">draw_self();
      <br />
      draw_angle = point_direction(x, y, mouse_x, mouse_y);
      <br />
      draw_sprite_ext(spr_Two, 0, x, y, 1, 1, draw_angle, c_red, 1);
    </p>
    <p class="dropspot">再次运行该项目，这一次你会看到非常不同的东西!</p>
    <p class="dropspot"><img>现在<span class="notranslate">sprite</span> ，不管你把它移到哪里，它都会指向鼠标!正如你所看到的，分层<span class="notranslate">sprites</span> 是一个很好的方法，可以为一个<span class="notranslate">object</span> 添加细节，或者让某些东西独立于分配给<span class="notranslate">sprite</span> 的 &quot;基础 &quot;<span class="notranslate">object</span> ，而且它是一个强大的工具，你可能会在你自己的项目中经常使用。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down4" href="#">绘制精灵以外的东西</a></p>
  <div class="droptext" data-targetname="drop_down4">
    <p class="dropspot">你也可以在Draw Event中绘制<span class="notranslate">sprites</span> 以外的东西，比如文本，或者形状。在这个例子中，我们将使用<span class="notranslate">GML</span> Visual 或<span class="notranslate">GML</span> <span class="inline">draw_self()</span> 函数来绘制<span class="notranslate">object</span> <span class="notranslate">sprite</span> ，但我们也将绘制一些其他东西，首先是一些<strong>文本</strong>。在这个例子中，你需要一个<span class="notranslate">sprite</span> 和一个<span class="notranslate">object</span> （将<span class="notranslate">sprite</span> 分配给它）。在<span class="notranslate">object</span> ，首先用这个<span class="notranslate">GML</span> Visual或GML添加一个<strong>创建事件</strong>。</p>
    <p class="dropspot"><img alt="Set Draw Angle Variable In DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_1.png" /></p>
    <p class="code">name = choose(&quot;Fred&quot;, &quot;Jonas&quot;, &quot;Sharon&quot;, &quot;Kate&quot;, &quot;Frank&quot;, &quot;John&quot;, &quot;Monica&quot;, &quot;Amanda&quot;);
      <br />
      number = irandom(100);
    </p>
    <p class="dropspot">所有这一切都告诉<span data-keyref="GameMaker Name">GameMaker</span>从列出的名字中选择一个，并将其分配给一个变量，以及为每个实例生成一个从0到100的随机数<span class="notranslate">object</span> 。 我们想把这些值画到屏幕上，因此，为此你现在需要添加一个<strong>Draw Event</strong>，并在其中添加以下<span class="notranslate">GML</span> Visual或GML。</p>
    <p class="dropspot"><img alt="Draw Two Sprites With DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_2.png" /></p>
    <p class="code">draw_self();
      <br />
      draw_set_halign(fa_center);
      <br />
      draw_text(x, y + 32, &quot;My name is &quot; + name);
      <br />
      draw_text(x, y + 48, &quot;My number is &quot; + string(number));
    </p>
    <p class="dropspot">你会注意到在上面的代码中，我们使用了 <a href="../GameMaker_Language/GML_Reference/Strings/string.htm"><span class="inline">string()</span></a>函数或 <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Data_Types/Number_To_String.htm"><strong>数字到字符串</strong></a>动作在我们要绘制的 &quot;数字 &quot;变量上。这是因为所有的文本都必须由<em>字符</em>组成，而不是由数值组成，所以我们需要使用这个函数/动作将数字值转换成我们想要绘制的那些字符。在这种情况下，我们要把我们生成的随机数变成一个可以绘制的字符 &quot;字符串&quot;。还请注意，我们设置了文本<strong>对齐方式</strong>。这只是告诉<span data-keyref="GameMaker Name">GameMaker</span>相对于给定的位置从哪里开始绘制文本，在这种情况下，我们希望文本沿着X轴居中。</p>
    <p class="dropspot"><span class="notranslate">object</span> 在<span class="notranslate">room</span> 编辑器中添加一些实例，然后按下<span class="notranslate">IDE</span> 顶部的播放按钮<img> 。你应该看到像这样的东西。</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="dropspot">在到目前为止的所有例子中，我们一直在绘制分配给实例的<span class="notranslate">sprite</span> ，但这并不总是这样的。<strong>你可以</strong>在draw事件中<strong>绘制任何你想要的东西</strong>，而不管分配的<span class="notranslate">sprite</span> 。为了说明这一点，我们将改变目前的代码，去掉 <span class="inline">draw_self()</span> 的调用，用一个函数来画一个彩色的椭圆，像这样。</p>
    <p class="dropspot"><img alt="Animation Drawing Two Sprites Together" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_2.gif" /></p>
    <p class="code">draw_ellipse_colour(x - 50, y - 32, x + 50, y + 32, c_fuchsia, c_lime, false);
      <br />
      draw_set_halign(fa_center);
      <br />
      draw_text(x, y + 32, &quot;My name is &quot; + name);
      <br />
      draw_text(x, y + 48, &quot;My number is &quot; + string(number));
    </p>
    <p class="dropspot">再次运行该项目，你应该看到这个。</p>
    <p class="dropspot"><img alt="Edited Draw Code For Drawing Two Sprites With DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_4_3.png" /></p>
    <p class="dropspot">关于这一点，需要注意的是，即使我们没有绘制指定的<span class="notranslate">sprite</span> ，<strong>它仍然会被用于碰撞检测</strong>。因此，当你可能正在绘制一个东西时，碰撞仍然会根据指定的<span class="notranslate">sprite</span> ，就像它和实例一起被放置在<span class="notranslate">room</span> ，即使它不可见。这实际上是很方便的，因为它意味着你可以绘制不同的<span class="notranslate">sprites</span> ，但保持一个基于指定的<span class="notranslate">sprite</span> 的单一<strong>碰撞掩码</strong>。还要注意的是，你仍然可以应用不同的变换，比如X/Y比例，并且碰撞将基于改变后的尺寸，尽管没有任何东西被画出来显示这一点。</p>
  </div>
  <p> </p>
  <p> </p>
  <h1>GUI层</h1>
  <p>我们在页面顶部提到，我们将讨论<strong>绘制GUI事件</strong>以及绘制事件，所以现在让我们看看。绘制GUI事件在一个叫做<strong> <a class="glossterm" data-glossterm="GUI" href="#">GUI</a></strong>层的东西上工作，它是一个特殊的绘图层，具有固定的宽度和高度，在<span class="notranslate">room</span> 。GUI层的好处是<em> 它不随<span class="notranslate">room</span> 相机移动</em>，所以它是添加静态GUI项目的理想场所，如分数、健康条和其他你的游戏需要传达给用户的信息。你可以从手册的 "<a href="../The_Asset_Editors/Object_Properties/Draw_Events.htm">绘图事件</a>"部分找到更多关于GUI层的信息。</p>
  <p class="note"><strong>注意</strong>：<span class="notranslate">Rooms</span> 可以大于屏幕尺寸，所以你可以有大的关卡让玩家在其中移动。这意味着在<span class="notranslate">Room</span> 编辑器中（或在代码中），你需要定义一个跟随你游戏动作的<strong>摄像机 </strong>。这基本上是一种设置屏幕固定区域的方式，以根据--例如--玩家在<span class="notranslate">room</span> 中的位置来显示更大的<span class="notranslate">room</span> 的不同部分，并在很多游戏中使用。想想在经典游戏如《马里奥》或《塞尔达》中，视角总是跟随主角的方式。这是用摄像机完成的。更多信息见手册中<span class="notranslate">Room</span> 编辑部分的<a href="../The_Asset_Editors/Room_Properties/Room_Properties.htm">房间属性</a>一节。</p>
  <p>下面的例子都将使用<strong>Draw GUI</strong>事件，所以你需要创建一个<span class="notranslate">object</span> ，并将该事件添加到其中。注意，这个<span class="notranslate">object</span> 不需要分配一个<span class="notranslate">sprite</span> ，因为我们不想默认绘制任何东西，也不需要它来检测碰撞。像这样的<span class="notranslate">Objects</span> ，只为绘制东西或控制游戏的某些方面而设计，通常被称为<strong>控制器对象</strong>。还要注意的是，我们将在所有的例子中使用相同的<span class="notranslate">object</span> ，所以我们建议你一个接一个地去看（尽管这并不是严格意义上的必要）。</p>
  <p><img> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down5" href="#">绘图文本</a></p>
  <div class="droptext" data-targetname="drop_down5">
    <p class="dropspot">当绘制到GUI层时，左上角是原点位置，向右是+X，向下是+Y。这使得文本和图形的定位非常容易，正如你在这个例子中看到的。我们在这里要做的是画一个代表玩家分数的值，所以在我们的<span class="notranslate">object</span> ，我们需要添加一个<strong>创建事件 </strong>来初始化一个变量来保存这个值，像这样。</p>
    <p class="dropspot"><img alt="Animation Drawing Two Sprites Pointing At Mouse" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_4_3.gif" /></p>
    <p class="code">player_score = 0;</p>
    <p class="dropspot">我们还想在<span class="notranslate">object</span> ，因为我们要用它来增加每次按空格键时的分数，所以要添加一个<strong>键盘向下&lt;空格&gt;事件</strong>。</p>
    <p class="dropspot"><img alt="Setting Variables Using DnD" class="center" height="506" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_1_1.png" width="317" /></p>
    <p class="dropspot">在这个事件中，添加以下内容。</p>
    <p class="dropspot"><img alt="Drawing Text Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_1.png" /></p>
    <p class="code">var _val = irandom(100);
      <br />
      player_score = player_score + _val;
    </p>
    <p class="dropspot">最后，让我们在Draw GUI事件中绘制分数值，像这样。</p>
    <p class="dropspot">在这个事件中，添加以下内容。</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="code">draw_set_halign(fa_left);
      <br />
      draw_set_colour(c_yellow);
      <br />
      draw_text(32, 32, &quot;SCORE:&quot;);
      <br />
      draw_set_colour(c_white);
      <br />
      var _str = string(player_score);
      <br />
      draw_text_transformed(32, 48, _str, 2, 2, 0);
    </p>
    <p class="dropspot">你会注意到我们是如何使用<a class="glossterm" data-glossterm="硬编码" href="#">硬编码</a>（或固定）值来绘制文本的x/y位置的，因为我们不需要它是相对于任何实例的，因为我们正在绘制到GUI层。我们还使用了 &quot;设置颜色 &quot;函数来改变文本的颜色，以及 &quot;转换 &quot;函数来使实际的分数值变大，这说明了你可以在你自己的游戏中定制文本元素。</p>
    <p class="dropspot">现在把这个<span class="notranslate">object</span> 的一个实例添加到你的<span class="notranslate">room</span> ，然后按下<strong>播放按钮 </strong> <img> 。当游戏运行时，按下并释放 <span class="inline">&lt;Space&gt;</span> ，你应该看到分数值增加。</p>
    <p class="dropspot"><img alt="Sprites Being Drawn Along With Text" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_5_1.png" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down6" href="#">绘制精灵</a></p>
  <div class="droptext" data-targetname="drop_down6">
    <p class="dropspot">在这个例子中，我们将使用GUI层来绘制一些<span class="notranslate">sprites</span> 。最明显的用途是绘制玩家的生活，所以让我们继续做下去吧在这个例子中，你需要一个<span class="notranslate">sprite</span> ，它应该是64x64像素，但它不应该被分配到<span class="notranslate">object</span> ，因为我们将自己画它。</p>
    <p class="dropspot">首先，我们需要在<strong>创建事件</strong>中添加一些新的变量到<span class="notranslate">object</span> （如果你已经做了前面的例子，在已经有的下面添加以下内容）。</p>
    <p class="dropspot"><img alt="Drawing Shapes Along With Text Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_5_2.png" /></p>
    <p class="code">player_lives = 3;
      <br />
      gui_w = display_get_gui_width();
    </p>
    <p class="dropspot">在这段代码中，我们为玩家的生命初始化了一个变量，但我们也创建了一个变量来保持GUI层的宽度，这样我们就可以相对于屏幕的右边正确定位。我们可以在代码中硬编码一个值并使用它，但这将意味着如果我们对<span class="notranslate">room</span> ，或者如果我们以后添加摄像机等的尺寸做任何改变，那么我们就需要通过代码并改变所有的值。使用 <a href="../GameMaker_Language/GML_Reference/Cameras_And_Display/display_get_gui_width.htm"><span class="inline">display_get_gui_width()</span></a>函数，意味着我们不需要担心任何未来的变化，因为代码会自动适应GUI层最终的尺寸。</p>
    <p class="dropspot">接下来，我们要在<span class="notranslate">object</span> ，因为我们要用它来改变每次按下回车键时的生命数量，所以要添加一个<strong>键盘按下&lt;Enter&gt;事件</strong>。</p>
    <p class="dropspot"><img alt="Example Of Drawing Shapes And Text Together" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_5_2.png" /></p>
    <p class="dropspot">在这个事件中，添加以下内容。</p>
    <p class="dropspot"><img alt="Draw GUI Event In An Object" class="center" src="../assets/Images/QS_Guide/QS_DrawGUIObject.png" /></p>
    <p class="code">player_lives = player_lives - 1;
      <br />
      <br />
      if player_lives &lt; 0
      <br />
      {
      <br />
      player_lives = 3;
      <br />
      }
    </p>
    <p class="dropspot">最后，我们需要将<span class="notranslate">sprites</span> 绘制到显示器上。为此，我们将使用 &quot; <span class="inline">for</span>&quot;<span class="notranslate">loop</span> (<a href="../GameMaker_Language/GML_Overview/Language_Features/for.htm">这里</a>使用<span class="notranslate">GML</span> 的信息，<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Loops/For.htm">这里</a>使用<span class="notranslate">GML</span> 的视觉信息)，以及 GUI 宽度变量，将所有内容定位在屏幕的右上角。所以，把这个添加到Draw Gui事件中（在之前的例子中可能有的任何其他动作之后）。</p>
    <p class="dropspot"><img alt="Defining A Variable Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_1.png" /></p>
    <p class="code">for (var i = 0; i &lt; player_lives; i += 1)
      <br />
      {
      <br />
      var _xx = gui_w - 48 - (i * 70);
      <br />
      draw_sprite(spr_Heart, 0, _xx, 48);
      <br />
      }
    </p>
    <p class="dropspot">如果你还没有把这个<span class="notranslate">object</span> 的实例添加到<span class="notranslate">room</span> ，现在就去添加吧（只有一个！），然后按下<strong>播放按钮 </strong> <img> 。一旦游戏运行，就按下 <span class="inline">&lt;Enter&gt;</span> 键的各种时间，以看到生命的变化。</p>
    <p class="dropspot"><img alt="Adding A Space Key Pressed Event" class="center" src="../assets/Images/QS_Guide/QS_Add_SpaceKeyPressEvent.png" /></p>
    <p class="dropspot">在你离开这个例子之前，你应该试验一下生命的数量，看看会发生什么。目前，它被设置为3，但改变创建事件和按键事件，将数值设置为5，或10......如果你做的一切都正确，那么代码应该适应并正确地绘制它们</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down7" href="#">绘制健康栏</a></p>
  <div class="droptext" data-targetname="drop_down7">
    <p class="dropspot">这最后一个例子包括在GUI层上绘制一个健康条。有很多方法可以做到这一点，但<span data-keyref="GameMaker Name">GameMaker</span>有一个内置的功能，专门用来做健康条，所以这就是我们在这里要使用的，尽管你也可以用<span class="notranslate">sprites</span> 或形状来创建你自己的。首先，和以前一样，我们需要初始化一个变量来保存健康值，所以在<span class="notranslate">GML</span> Visual或<span class="notranslate">GML</span> ，添加到<span class="notranslate">object</span> 的<strong>创建事件</strong>中（在任何其他可能已经存在的代码之后）。</p>
    <p class="dropspot"><img alt="GML VisualActions In The Space Key Event" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_2.png" /></p>
    <p class="code">player_health = 100;</p>
    <p class="dropspot">我们想使用箭头键来改变健康值的高低，这取决于哪个箭头键被按下，我们可以通过添加两个<strong>键盘按压&lt;箭头&gt;</strong>事件来实现，然而，使用一个<strong>步骤事件</strong>和一些代码来检查按键可能更容易，所以现在继续添加一个<strong>步骤事件</strong>，用以下<span class="notranslate">GML</span> Visual或GML。</p>
    <p class="dropspot"><img alt="Drawing Text To The GUI Layer Using DnD" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_DnD_6_3.png" /></p>
    <p class="code">if keyboard_check(vk_up)<br />
      {<br />
          if player_health &lt; 100<br />
          {<br />
              player_health = player_health + 1;<br />
          }<br />
      }<br />
      <br />
      if keyboard_check(vk_down)<br />
      {<br />
          if player_health &gt; 0<br />
          {<br />
              player_health = player_health - 1;<br />
          }<br />
      }
    </p>
    <p class="dropspot">完成这些后，我们就可以开始绘制健康条了，这是在Draw GUI事件中完成的，添加以下内容（在其他已经存在的内容之后）。</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="code">var _xx = display_get_gui_width() / 2;<br />
      <br />
      draw_healthbar(_xx - 50, 24, _xx + 50, 40, player_health, c_black, c_red, c_lime, 0, true, true);
    </p>
    <p class="dropspot">如果你还没有这样做的话，将这个<span class="notranslate">object</span> 的实例添加到一个<span class="notranslate">room</span> （虽然只有一个！），然后按下<strong>播放按钮 </strong> <img> 。一旦游戏开始运行，就按下 <span class="inline">&lt;Up Arrow&gt;</span> 和 <span class="inline">&lt;Down Arrow&gt;</span> 键，看健康状况的变化。</p>
    <p class="dropspot"><img alt="Animation Showing Text Being Drawn To The GUI Layer" class="center" src="../assets/Images/QS_Guide/QS_DrawExample_6.gif" /></p>
  </div>
  <p> </p>
  <p>我们希望在做完这些例子后，你在使用<span data-keyref="GameMaker Name">GameMaker</span>时有了更多的信心，对它的工作原理有了更多的了解。下一节将探讨如何让你所画的这些东西在<span class="notranslate">room</span> ，以及接受--和响应--用户输入。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回:<a href="../Content.htm">索引</a></div>
        <div style="float:right">下一步。<a href="Movement_And_Controls.htm">运动和控制</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Drawing
Drawing Examples
Quick Start Drawing
-->
  <!-- TAGS
qs_drawing
-->
</body>
</html>