<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>什么是编程？</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="A brief description of what makes a program, generally and specifically using GameMaker." />
  <meta name="rh-index-keywords" content="Quick Start - What Is Programming?" />
  <meta name="search-keywords" content="programming" />
  <meta name="robots" content="NOODP" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>什么是编程？</h1>
  <p>在<a href="Quick_Start_Guide.htm">上一节</a>中，我们概述了<span data-keyref="GameMaker Name">GameMaker</span>是如何工作的，以创建你的游戏，但无论你添加了什么<span class="notranslate">sprites</span> 、<span class="notranslate">objects</span> 或<span class="notranslate">rooms</span> ，除非你<strong>编程 </strong>，否则一切都不会发生。但是，什么是程序？</p>
  <p>在一般意义上，一个程序只是一组指令（或 <strong> <a class="glossterm" data-glossterm="声明" href="#">声明</a></strong><span class="glossextra">s</span>），你把它交给计算机，告诉它执行某些任务。这些任务可以有很大的不同，从简单地告诉计算机在屏幕上画一些东西，到根据一些用户的输入计算一个值，然后对它作出反应，但在所有情况下，它都是一个逻辑结构，会产生一些结果。在上一页中，我们谈到了将一个<span class="notranslate">object</span> 的实例向右移动2个像素，所以让我们看一下实际的程序，它可以做到这点。</p>
  <p>在<span data-keyref="GML_Visual">GML Visual</span>中，它看起来像这样。</p>
  <p><img alt="GML VisualExample" class="center" src="../assets/Images/QS_Guide/QS_DnD_Example.png" /></p>
  <p>而使用<span data-keyref="GML_Code">GML代码</span>，它将看起来像这样。</p>
  <p class="code">x = x + 2;</p>
  <p>为了理解上面的内容，我们必须首先谈论<strong>变量</strong>，然后我们将继续讨论<strong>函数 </strong>，最后是<strong>条件 </strong>，因为这三样东西通常是构成任何程序的主体。</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="What_Is_Programming_.htm#">变量</a></p>
  <div class="droptext" data-targetname="drop_down">
    <p class="dropspot">变量是编程的基石，另外还有<strong>函数 </strong>（我们稍后会简单介绍）。变量是一个简单的<em>命名值</em>，在上面的例子中，变量被称为 &quot;<span class="inline">x</span>&quot;。现在，&quot;<span class="inline">x</span>&quot;可以是任何数值，比如-126，或者583，甚至1.56378，但是 &quot;<span class="inline">x</span>&quot;的实际数值并不重要，因为它可以变化（因此被称为 &quot;变量&quot;）。重要的是，我们把 &quot;<span class="inline">x</span>&quot; 加到2上。值得注意的是，在这种情况下，&quot;<span class="inline">x</span>&quot; 是一个<strong>内置变量</strong>，这意味着它是由<span data-keyref="GameMaker Name">GameMaker</span>为所有<span class="notranslate">objects</span> ，但你也可以创建自己的变量。</p>
    <p class="dropspot">要创建一个变量，必须在它被使用之前<strong>声明 </strong>它。声明一个变量就是告诉<span data-keyref="GameMaker Name">GameMaker</span>这个新变量的存在，并且它有一个初始值。要声明一个变量，你只需要做这样的事情。</p>
    <p class="dropspot"><img alt="Declare GML VisualVariables" class="center" src="../assets/Images/QS_Guide/QS_DnD_Declare.png" /></p>
    <p class="dropspot">或。</p>
    <p class="code">points = 0;</p>
    <p class="dropspot">一旦一个变量被声明，那么它就可以在进一步的程序代码或行动中使用。变量的伟大之处在于它允许你在多个地方 &quot;重复使用 &quot;一个值，而实际上不必担心这个值是什么。例如，假设你有一个 &quot;<span class="inline">damage</span>&quot; 变量，你在不同的地方使用它来告诉<span data-keyref="GameMaker Name">GameMaker</span>对游戏中的其他<span class="notranslate">objects</span> 造成一定的伤害。我们可能声明 &quot;<span class="inline">damage</span>&quot; 为20，但后来决定这个值太大了，想把它改成10。如果我们使用20这个值而不是一个变量，我们就需要翻阅所有的代码或动作，将20改为10，这既费时又容易出错。然而，使用一个变量意味着我们只需在声明时将其改为10<em>一次 </em>，其余的代码或动作将使用这个新值。</p>
    <p class="dropspot">值得注意的是，有许多不同类型的变量，每个变量的使用方式都略有不同。我们不会在这里讨论这个问题，但你可以从手册的<a href="../GameMaker_Language/GML_Overview/Variables_And_Variable_Scope.htm">GameMaker语言概述</a>部分找到更多信息。</p>
    <p class="dropspot">然而，变量仅仅是故事的第一部分。下一个部分是函数的使用...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="What_Is_Programming_.htm#">职能</a></p>
  <div class="droptext" data-targetname="drop_down1">
    <p class="dropspot">编程的下一个主要重要部分是与变量一起使用<strong>函数 </strong>。一个函数只是向计算机发出的做某事的指令，它可以有输入值，也可以有输出值（即：你可以给它一个值，它将做一些操作，然后返回一个不同的值），尽管不是所有的函数都需要输入，也不是有输出的。为了更好地理解这一点，让我们看一下<span data-keyref="GameMaker Name">GameMaker</span>中的一个内置函数。</p>
    <p class="dropspot">我们要看的函数是 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>，在<span class="notranslate">GML</span> Visual中是<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Count.htm">获取实例数</a>的动作。这个函数/动作将检索一个给定的<span class="notranslate">object</span> 在游戏中的实例数量<span class="notranslate">room</span> ，你将这样使用它。</p>
    <p class="dropspot"><img alt="Get Instance Count GML VisualAction" class="center" src="../assets/Images/QS_Guide/QS_DnD_GetInstanceCount.png" /></p>
    <p class="dropspot">或。</p>
    <p class="code">number = instance_number(obj_Enemy);</p>
    <p class="dropspot">在上述两个例子中，该函数将一个<span class="notranslate">object</span> ID作为其输入值（即 <strong> <a class="glossterm" data-glossterm="争论" href="#">参数</a></strong><span class="notranslate">object</span> 或<strong>参数</strong>），并将给出一个输出值（<strong>返回值 </strong>），即当函数/动作被调用时，<span class="notranslate">room</span> 中存在的实例的数量。注意，我们使用一个变量来存储返回值，即变量&quot;<span class="inline">number</span>&quot;。这个变量可以在这段代码运行前声明，或者在代码运行时被认为已经声明，并将函数/动作的返回值分配给它。</p>
    <p class="dropspot">值得注意的是，你不仅仅局限于使用内置的<span class="notranslate">GameMaker Language</span> 或<span class="notranslate">GML</span> Visual动作，你实际上可以构建自己的函数，用来扩展编程时的可能（你可以<a href="../GameMaker_Language/GML_Overview/Script_Functions.htm">在这里</a>找到更多关于<span class="notranslate">GML</span> ，在<a href="../Drag_And_Drop/Drag_And_Drop_Overview/Action_Block_Functions.htm">这里</a>找到<span class="notranslate">GML</span> Visual）。</p>
    <p class="dropspot">你可以用函数和变量做很多事情，但是如果没有编程故事的最后一个重要部分--<strong>条件反射</strong>，它们就几乎毫无用处。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="What_Is_Programming_.htm#">条件式</a></p>
  <div class="droptext" data-targetname="drop_down2">
    <p class="dropspot">编程的很大一部分是由提出问题组成的。这些问题通常是简单的问题，可以评估为真或假，被称为<strong>条件 </strong>（而 <span class="inline">true </span>和 <span class="inline">false </span>的值被称为<strong>布尔值 </strong>）。最常见和最广泛使用的条件式是问题 &quot;<span class="inline">if</span>&quot;，它用于检查某些东西是 <span class="inline">true </span>还是 <span class="inline">false </span>，然后采取相应的行动。一个简单的例子是，如果一个角色的健康状况低于零，就将其从游戏中移除，用通俗的语言表达就是。</p>
    <p class="code">if the character variable &quot;hp&quot; is less than or equal to zero, then destroy it.</p>
    <p class="dropspot">为了将上述内容变成代码，我们会有这样的内容。</p>
    <p class="dropspot"><img alt="GML VisualConditional" class="center" src="../assets/Images/QS_Guide/QS_DnD_Conditional.png" /></p>
    <p class="dropspot">或。</p>
    <p class="code">if (hp &lt;= 0)<br />
      {<br />
      <br />
          instance_destroy();<br />
      <br />
      }
    </p>
    <p class="dropspot">所以，上面我们问了一个问题 &quot;如果hp变量小于或等于0&quot;，然后如果评估结果为真，我们就调用函数 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_destroy.htm"><span class="inline">instance_destroy()</span></a>或动作<a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Destroy_Object_Instance.htm">Destroy<span class="notranslate">Object</span> Instance</a>。请注意，&quot;<span class="inline">then</span>&quot;（如果某事......则某事......）是<em>隐含的 </em>，你不需要添加它，还请注意，在<span class="notranslate">GML</span> 代码中，我们使用大括号 <span class="inline">{} </span>来 &quot;阻止 &quot;我们希望在 &quot; <span class="inline">if</span>&quot;评估为 <span class="inline">true </span> 时执行的代码（在<span class="notranslate">GML</span> Visual 中，这被象征为将动作放在 &quot;<span class="inline">If</span>&quot; 动作<em>右边 </em>）。在大括号之间添加的任何内容只有在 &quot; <span class="inline">if</span>&quot; 评估为 <span class="inline">true</span> 时才会运行，因此你可以在一个 &quot;块 &quot;中运行多个语句。</p>
    <p class="dropspot">在使用 &quot;<span class="inline">if</span>&quot; 条件时，还有一点需要注意的是，我们也可以给它添加一个 &quot;<span class="inline">else</span>&quot; 语句，这样条件就变成了 &quot;如果有东西被评估为 <span class="inline">true </span>，那么就做什么，<em>否则 </em>就做什么&quot;。这样就可以处理一个返回 <span class="inline">true </span> <em>或 </em> <span class="inline">false</span> 的条件表达式。让我们也举个例子。</p>
    <p class="dropspot"><img alt="GML VisualIf... Else.. Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_IfElse.png" /></p>
    <p class="dropspot">或。</p>
    <p class="code">if (countdown &lt;= 0)<br />
      {<br />
      <br />
          instance_create_layer(x, y, &quot;Instances&quot;, obj_Bullet);<br />
      <br />
          countdown = 30;<br />
      <br />
      }<br />
      else<br />
      {<br />
      <br />
          countdown = countdown - 1;<br />
      <br />
      }
    </p>
    <p class="dropspot">上述代码翻译成普通语言为：。</p>
    <p class="code">if the countdown variable is less than or equal to zero then:<br />
      <br />
          create an instance of the object &quot;obj_Bullet&quot; at the current x/y position on the layer &quot;instances&quot;,<br />
      <br />
          reset the countdown variable to 30.<br />
      <br />
      else:<br />
      <br />
          subtract one from the countdown variable.
    </p>
    <p class="dropspot">不要太担心上述代码中实际的实例创建部分，因为我们将在下面的章节中详细介绍。这里需要理解的重要事情是，你可以创建条件表达式，检查某些东西是 <span class="inline">true </span>还是 <span class="inline">false </span>，并让你的程序以不同的方式作出反应。这似乎是一件非常简单的事情，但它实际上是非常强大的，并且将构成你在<span data-keyref="GameMaker Name">GameMaker</span>中编程时几乎所有工作的基础。</p>
  </div>
  <p> </p>
  <p>因此，为了回答我们的问题 &quot;什么是编程？&quot;，我们可以说，<strong>编程 </strong>是使用<strong>语句 </strong>的组合<strong>-- </strong>可以使用 <strong> <a class="glossterm" data-glossterm="变量" href="#">变量</a></strong><span class="glossextra">s</span><strong> </strong>来形成 <strong> <a class="glossterm" data-glossterm="表情" href="#">表达式</a></strong><span class="glossextra">s</span>、<strong>函数 </strong>来执行任务，以及 <strong><a class="glossterm" data-glossterm="有条件的" href="#">有条件的</a></strong><span class="glossextra">s</span>来提出问题--然后并发地运行这些语句来实现一个目标。下面你可以看到一个稍微复杂的程序，在<span class="notranslate">GML</span> Visual和<span class="notranslate">GML</span> 。你能猜到它是做什么的吗？</p>
  <p><img alt="GML VisualFinal Code Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_FinalCode.png" /></p>
  <p>或。</p>
  <p class="code">if mouse_check_button_pressed(mb_left) == true<br />
    {<br />
    <br />
        x = mouse_x<br />
    <br />
        y = mouse_y<br />
    <br />
        image_blend = c_red;<br />
    <br />
    }<br />
    else<br />
    {<br />
    <br />
        if mouse_check_button_released(mb_left) == true<br />
        {<br />
    <br />
            image_blend = c_white;<br />
    <br />
        }<br />
    <br />
    }
  </p>
  <p><a class="expandspot" data-rhwidget="ExpandSpot" data-target="expanding" href="What_Is_Programming_.htm#">扰流板</a><span class="expandtext" data-targetname="expanding">上述代码首先检查是否有鼠标按钮被按下（鼠标<strong>左键 </strong>，用常量 &quot; <span class="inline">mb_left</span>&quot; 定义）。
      如果它被按下，那么它将运行代码的实例移动到当前的鼠标位置（用内置变量 &quot; <span class="inline">mouse_x</span>&quot; 和 &quot; <span class="inline">mouse_y</span>&quot; 定义），并且
      也将实例的混合颜色设置为<strong>红色</strong>。如果鼠标按钮没有被按下，那么它将检查鼠标按钮是否被<strong>释放</strong>，如果被释放，它将把实例的混合颜色重置为白色（注意
      我们再次使用一些内置的<strong>常量--&quot; </strong> <span class="inline">c_red</span>&quot;和&quot; <span class="inline">c_white</span>&quot;--来轻松定义颜色）。</span></p>
  <p> </p>
  <p>希望你现在对编程有了更多的了解，所以让我们继续探索<span data-keyref="GameMaker Name">GameMaker</span> <a class="glossterm" data-glossterm="IDE" href="#">IDE</a>，看看如何添加<span class="notranslate">assets</span> ，如<em>精灵 </em>和<em>物体 </em>以及其他你的游戏所需要的重要资源。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回:<a href="../Content.htm">索引</a></div>
        <div style="float:right">下一步。<a href="Creating_Sprites.htm">创建精灵</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
What is Programming?
Quick Start: Programming
-->
  <!-- TAGS
qs_programming
-->
</body>
</html>