<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>着色器</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how the shader editor works" />
  <meta name="rh-index-keywords" content="Shader Editor" />
  <meta name="search-keywords" content="shaders,shader,open GL,open GL ES" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>The<span class="notranslate">Shader</span> 编辑</h1>
  <p><img>着色器是一个非常强大的工具，可以用来操纵你的游戏渲染到屏幕上的图形，允许令人难以置信的快速效果，范围可以从，例如，添加一个微妙的颜色色调到<span class="notranslate">sprite</span> ，直到全屏幕的扭曲效果。但什么是<span class="notranslate">shader</span> ？</p>
  <p><span class="notranslate">shader</span> 基本上是一个由两部分组成的程序，直接在显卡本身上运行，由于GPU在做所有的工作，所以速度非常快，并为你的游戏代码释放了CPU周期。完整的<span class="notranslate">shader</span> 是由一个<span class="notranslate">vertex</span> <span class="notranslate">shader</span> 程序，和一个片段<span class="notranslate">shader</span> 程序（也被称为像素<span class="notranslate">shader</span> ）组成的。这两个小程序一起工作，以操纵显卡渲染到屏幕上的内容。这样，你就可以实时地操纵实际<a class="glossterm" data-glossterm="呈现的" href="#">渲染</a>到<a class="glossterm" data-glossterm="显示缓冲区" href="#">显示缓冲区</a>的位置、颜色和阿尔法值。</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">顶点着色器</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot"><span class="notranslate">Vertex</span> <span class="notranslate">Shader</span> 是渲染管道中可编程的<span class="notranslate">shader</span> 阶段，它处理单个顶点（用于渲染任何图像的三角形的点），当你在渲染一个几何体时--如<span class="notranslate">sprite</span> 或一个表面
      -<span data-keyref="GameMaker Name">GameMaker</span>创建了一个顶点流--称为<strong>Vertex Buffer-- </strong>定义了这些三角形的几何图形。例如，一个<span class="notranslate">sprite</span> ，它的几何体是两个三角形（通常称为<em>多边形</em>），它们被渲染成
      一起形成一个 &quot;四边形&quot;。来自<span class="notranslate">vertex</span> <span class="notranslate">Vertex</span> 的这个<span class="notranslate">Buffer</span> 流被作为输入输入到<span class="notranslate">Vertex</span> <span class="notranslate">Shader</span> ，它可以以可编程的方式处理顶点数据。<span class="notranslate">Vertex</span> <span class="notranslate">Shader</span> 的输出被GPU用来组装三角形。
      然后，这些三角形会被适当地剪切和剪裁到视图端口和视图摄像头，然后被发送到GPU的光栅化器块，该块产生一个新的输出流，由称为 "<strong>碎片</strong>"的东西构成。这些是微小的数据
      结构，每一个都是相对于屏幕上出现的一个像素的。</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">片段着色器</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">片段<span class="notranslate">Shader</span> ，是渲染管道中处理 &quot;片段 &quot;的可编程<span class="notranslate">shader</span> ，即用于<span class="notranslate">texture</span> 任何特定多边形的插值像素，它们负责输出每个
      渲染的三角形像素的最终颜色。基本上它是这样工作的：片段<span class="notranslate">Shader</span> ，作为它的输入，所有这些片段（正在渲染的三角形的单个像素）已经被<span class="notranslate">Vertex</span> <span class="notranslate">Shader</span> ，沿着管道传递。然后它可以
      处理这些片段，以改变将被绘制到屏幕上的最终目标像素的颜色和alpha。</p>
  </div>
  <p> </p>
  <p>关于<span class="notranslate">shaders</span> 的真正工作方式以及它们在图形管道中的地位的完整概述超出了本文的范围，但你可以在这里找到一个简短的指南。</p>
  <ul class="colour">
    <li><a href="../Additional_Information/Guide_To_Using_Shaders.htm">着色器使用指南</a></li>
  </ul>
  <p> </p>
  <h2>语言支持</h2>
  <p><span data-keyref="GameMaker Name">GameMaker</span>支持以下<span class="notranslate">shader</span> 语言。</p>
  <table>
    <tbody>
      <tr>
        <th>着色器语言</th>
        <th>目标平台</th>
      </tr>
      <tr>
        <td><strong>GLSL ES 1.0</strong></td>
        <td>所有目标平台</td>
      </tr>
      <tr>
        <td><strong>ǞǞǞ</strong></td>
        <td>Mac和<span class="notranslate">Ubuntu</span> (<span class="notranslate">Linux</span>)</td>
      </tr>
      <tr>
        <td><strong>HLSL 11</strong></td>
        <td>Windows, UWP, Xbox One &amp; Series S/X</td>
      </tr>
      <tr>
        <td><strong>PSSL</strong></td>
        <td>PlayStation 4 &amp; 5</td>
      </tr>
    </tbody>
  </table>
  <p>在编写GLSL ES<span class="notranslate">shaders</span> 时，建议尽量遵循<a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/GLSL_ES_Specification_1.00.pdf" title="GLSL ES 1.0 Specification">官方语言规范</a>以避免错误，因为一些目标平台可能比其他平台更严格（比如HTML5和Opera GX目标，在语言限制方面可能比其他平台更严格，如<span class="notranslate">Windows</span> 、<span class="notranslate">macOS</span> ，等等）。</p>
  <p> </p>
  <h2>创建一个着色器</h2>
  <p>要创建一个<span class="notranslate">shader</span> 资源，只需在<a href="../Introduction/The_Asset_Browser.htm">资产浏览器</a>中右击<img> ，并选择<em>创建-&gt;着色器</em>。一旦你创建了基础<span class="notranslate">shader</span> ，你就可以在新资源上使用鼠标右键<img> ，在继续编辑代码之前选择<span class="notranslate">shader</span> 。</p>
  <p><img>当你创建一个新的<span class="notranslate">Vertex</span> ，代码编辑器本身被分成两个 &quot;程序&quot;--<span class="notranslate">shader</span> 和 Fragment，每个程序都可以从编辑器顶部的标签中找到。两者都是同时创建的，因为<em>如果没有这两部分</em>，你<em>就不能创建一个<span class="notranslate">shader</span> </em> 。即使你只想使用片段<span class="notranslate">shader</span> ，你也必须先创建一个 &quot;通过 &quot;<span class="notranslate">vertex</span> <span class="notranslate">shader</span> ，这就是为什么在默认情况下，任何正在创建的新<span class="notranslate">shader</span> 将有一个<span class="notranslate">vertex</span> 和片段通过<span class="notranslate">shader</span> 已经为你编码（在页面顶部的屏幕截图中，你可以看到我们已经使用代码编辑器窗格视图来显示这两个并排的程序...在一起处理两个<span class="notranslate">shader</span> 程序时非常有用）。</p>
  <p>值得注意的是，你可以在<em>所有 </em>目标平台上使用GLSL ES<span class="notranslate">shaders</span> ，但要让它们在<strong>HTML5 </strong>目标平台上工作，你必须在<a href="../Settings/Game_Options/HTML5.htm">HTML5游戏选项</a>中启用WebGL，否则它们将无法工作。</p>
  <p>有关<span class="notranslate">shader</span> 功能和如何在<span data-keyref="GameMaker Name">GameMaker</span>中使用这些功能的进一步细节，请参见以下页面。</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm">着色器功能</a> <span class="notranslate">GML</span> <a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm"></a>-<span class="notranslate">shaders</span> 的参考部分。</li>
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm">Shader Constants</a>-<span data-keyref="GameMaker Name">GameMaker</span>内置的常量，可以在编写<span class="notranslate">shaders</span> 。</li>
    <li><a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/GLSL_ES_Specification_1.00.pdf">GLSL ES 1.0 规格</a>-<span data-keyref="GameMaker Name">GameMaker</span>使用的 OpenGL ES 1.0<span class="notranslate">Shader</span> 语言的 PDF 文件。</li>
    <li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-reference">HLSL语言参考</a>- 微软使用HLSL的参考页面。</li>
    <li><a href="http://twvideo01.ubm-us.net/o1/vault/gdceurope2013/Presentations/825424RichardStenson.pdf">PSSL语言演示</a>- PSSL语言的演示格式概述。</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="The_Asset_Editors.htm">资产编辑部</a></div>
        <div style="float:right">下一步。<a href="Sounds.htm">声音</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
The <span class="notranslate">Shader</span> Editor
Shaders
OpenGL ES
HLSL
PSSL
-->
  <!-- TAGS
shader_editor
-->
</body>
</html>