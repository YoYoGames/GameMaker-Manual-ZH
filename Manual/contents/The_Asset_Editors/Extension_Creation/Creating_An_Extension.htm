<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>创建一个扩展</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how to create a generic extension" />
  <meta name="rh-index-keywords" content="Extensions - Creating An Extension" />
  <meta name="search-keywords" content="creating extensions" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>创建一个扩展</h1>
  <p>要创建一个<span class="notranslate">extension</span> ，你首先需要在<a href="../../Introduction/The_Asset_Browser.htm">资产浏览器</a>的任何地方右击<img> ，并选择<strong>创建-&gt;扩展</strong>。<span class="notranslate">Extension</span> 这将在工作区中为你新创建的<span class="notranslate">asset</span> 属性打开。</p>
  <p><img>如果你没有看到这一点，你可以在<span class="notranslate">Extension</span> 浏览器中双击你的<span class="notranslate">asset</span> <span class="notranslate">Asset</span> ，打开它的属性窗口，或者在它已经打开的情况下关注它。</p>
  <p>现在已经准备好让你添加所需的文件和功能，你也可以在这里给<span class="notranslate">extension</span> 一个名字（按照通常的惯例，只有字母/数字，除了下划线&quot;_&quot;之外没有特殊符号）。如果你愿意，你也可以为<span class="notranslate">extension</span> ，设置版本号。</p>
  <p>在 &quot;复制到 &quot;下，你可以选择这个<span class="notranslate">extension</span> 输出到哪些平台。对于一个简单的<span class="notranslate">GML</span> <span class="notranslate">extension</span> ，你不需要担心这个问题，因为它将在所有平台上运行，然而，如果你正在创建一个特定平台的<span class="notranslate">extension</span> （如为<span class="notranslate">Android</span> ），那么你需要确保它<em>不会</em>被导出到任何不兼容的平台（如<span class="notranslate">iOS</span> ，游戏机等）。</p>
  <h2>占位符文件</h2>
  <p>要将文件添加到新的<span class="notranslate">extension</span> ，你需要点击菜单图标<img> ，并选择一个占位文件（&quot;添加占位&quot;）或导入目标平台所需的实际文件（&quot;添加文件&quot;）。</p>
  <p class="dropspot"><img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" /></p>
  <p>一个 &quot;通用 &quot;占位符是一个可以是任何类型的文件，除了那些特定平台所要求的（所以没有 <span class="inline">DLL</span> 或 <span class="inline">SO </span>文件，例如），它不会被使用，除了作为一个 &quot;链接器 &quot;文件来连接一组函数或常量与给定的<span class="notranslate">extension</span> （通常它只用于<span class="notranslate">iOS</span> 和<span class="notranslate">Android</span> <span class="notranslate">extensions</span> ，这将在下面的章节为这些目标解释）。你还可以添加 &quot;GML &quot;和 &quot;JS &quot;占位符文件，以便更具体地使用。</p>
  <h2>添加文件</h2>
  <p>通常你不需要使用占位符，除非你是为<span class="notranslate">iOS</span> 和<span class="notranslate">Android</span> ，所以你会选择 &quot;添加文件 &quot;选项，根据他们的目标平台，添加以下任何一个文件。</p>
  <ul class="colour">
    <li class="dropspot"><span class="inline">.gml</span>:这是一个只用<span class="notranslate">GameMaker Language</span> 的文件，与所有平台兼容。</li>
    <li class="dropspot"><span class="inline">.js</span>:这是一种JavaScript<span class="notranslate">extension</span> 格式，只与HTML5目标兼容。</li>
    <li class="dropspot"><span class="inline">.dll</span>:这是一种动态链接库<span class="notranslate">extension</span> 格式，只与<span class="notranslate">Windows</span> 、UWP和Xbox目标兼容（每个目标将需要一个与其规格兼容的不同的 <span class="inline">*.dll</span> 文件）。</li>
    <li class="dropspot"><span class="inline">.dylib</span>:这相当于Mac的DLL，只与Mac的目标兼容（不是<span class="notranslate">iOS</span> ）。</li>
    <li class="dropspot"><span class="inline">.so</span>:这是一个相当于DLL的<span class="notranslate">Linux</span> ，只与<span class="notranslate">Ubuntu</span> (<span class="notranslate">Linux</span>)目标兼容。</li>
    <li class="dropspot"><span class="inline">.prx</span>:这是为PlayStation目标添加功能的文件格式（每个目标都需要一个与其规格兼容的不同的 <span class="inline">*.prx</span> 文件）。</li>
  </ul>
  <p>你会注意到没有<strong>安卓 </strong>或<strong>iOS</strong>的文件类型，这是因为它们的设置略有不同。再往下看，你可以找到关于如何设置它们的解释，但首先让我们看看为任何一个目标平台创建一个一般的<span class="notranslate">GML</span> <span class="notranslate">extension</span> ，因为这个过程对所有这些平台都是一样的。</p>
  <h2>创建一个<span class="notranslate">GML</span> 扩展</h2>
  <p>首先，你需要创建将被使用的文件。对于<span class="notranslate">GML</span> <span class="notranslate">extension</span> ，这将是一个文本文件（与 <span class="inline">.gml</span> <span class="notranslate">extension</span> 一起保存），其格式是这样的。</p>
  <p class="code">#define c_alice_blue<br />
    return make_color_rgb(240,248,255);<br />
    <br />
    <br />
    #define instance_create_colour<br />
    var i = instance_create_layer(argument0, argument1, argument2, argument3);<br />
    with (i)<br />
    {<br />
        image_blend = argument3;<br />
    }<br />
    return i;
  </p>
  <p>正如你所看到的，我们在每一节的开头都有一个 <span class="inline">#define</span> 的调用，在上面的例子中，它被用来定义两个函数。让我们来看看定义函数的每一部分。</p>
  <ul class="colour">
    <li> <span class="inline">#define</span> 语句被用来定义一个具有给定名称的新函数。</li>
    <li>该语句之后是函数代码，当函数被调用时，它使用 <span class="inline">argument0</span>, <span class="inline">argument1</span>, 等变量来访问传入函数的参数。</li>
    <li>在最后，我们有一个 <a href="../../GameMaker_Language/GML_Overview/Language_Features/return.htm"><span class="notranslate">return</span></a>语句，用于将数据从<span class="notranslate">extension</span> 返回到调用该函数的<span class="notranslate">GML</span> 代码中。</li>
  </ul>
  <p>如果你要写一个 <span class="inline">DLL</span> 或 JavaScript<span class="notranslate">extension</span> ，那么这个过程将是类似的，但要用正确的语言来写扩展的文件格式。</p>
  <p>一旦你完成了这一工作，你需要将文件添加到<span class="notranslate">extension</span> （使用 &quot;添加文件 &quot;选项），这将在<span class="notranslate">Extensions</span> &quot;属性 &quot;中链出一个新的窗口，用于文件属性。</p>
  <p class="dropspot"><img alt="Extension Properties" class="center" height="519" src="../../assets/Images/Asset_Editors/Editor_Extensions.png" width="486" /></p>
  <p>在这里，你将为<span class="notranslate">extension</span> （对于GML，你将选择它们全部）选择目标平台，以及重命名<span class="notranslate">extension</span> 文件，并设置其他一些细节，我们稍后会介绍这些。</p>
  <p class="note"><strong>注意</strong>：将一个文件添加到<span class="notranslate">extension</span> ，将其复制到项目目录中，这意味着任何进一步的修改都必须在该副本中进行，以便在游戏中可见。你可以在<span class="notranslate">extension</span> 浏览器中右击你的<span class="notranslate">Asset</span> ，选择 &quot;在资源管理器中打开 &quot;来找到该副本。</p>
  <h2>添加功能</h2>
  <p>编辑器应该自动填入我们的<span class="notranslate">GML</span> 文件中的函数，但如果没有，你可以通过点击函数菜单按钮<img> ，选择你需要的函数，手动添加它们。</p>
  <p class="dropspot"><img alt="Estension Options Icon" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png" /></p>
  <p>选择 &quot;添加函数 &quot;将允许你添加一个函数到<span class="notranslate">extension</span> ，然后可以在<span data-keyref="GameMaker Name">GameMaker</span>中与任何内置函数一样被调用。<span>一旦函数被添加，下面的窗口将打开，让你定义函数属性（或者你可以双击函数来打开它）。</span></p>
  <p class="dropspot"><img alt="Add Files To An Extension" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_Files.png" /></p>
  <p>在上图中，我们用我们在<span class="notranslate">GML</span> <span class="notranslate">extension</span> 文件中定义的函数 <span class="inline">instance_create_colour()</span> 的细节填充了函数编辑器（注意，这个函数编辑器窗口不只是用于定义<span class="notranslate">GML</span> 函数 -- 它在所有<span class="notranslate">extension</span> 类型中都是一样的）。让我们来看看可以为一个函数定义的每个选项。</p>
  <ul class="colour">
    <li>你可以看到，我们给了函数一个<em>名称</em>，这是你在你的项目中调用该函数时使用的名称；注意，这个名称不一定要与<span class="notranslate">extension</span> 中使用的名称一致 -- 你可以给它起任何你喜欢的名称，然后使用<em>外部名称</em>字段将其与扩展中定义的实际名称联系起来。<img></li>
    <li>在这下面有一个定义<em>帮助 </em>文本的部分，也就是将显示在代码完成弹出窗口和代码编辑器底部的帮助文本中的文本。</li>
    <li>接下来你可以定义<em>返回类型</em>，它可以是一个<strong>双数 </strong>（实数<a class="glossterm" data-glossterm="浮动点" href="#">浮点</a>值）或一个<strong>字符串</strong>；如果外部函数没有返回任何东西，那么这并不重要。</li>
    <li>在这之下，你可以定义函数要接受的参数。这些参数可以是<strong>双数 </strong>，也可以是<strong>字符串</strong>，你可以通过点击添加按钮添加它们，<img> ，通过点击删除按钮删除它们，<img> 。<br>
      <br>
      如果你的函数可以接受可变数量的参数（意味着它有一些可选的参数），你应该确保选中底部的 &quot;可变长度参数 &quot;复选框。
    </li>
  </ul>
  <p class="note"><strong>注意</strong>：如果该函数是<span class="notranslate">extension</span> 、Mac或<span class="notranslate">Windows</span> （分别为<span class="inline">dll</span> 、 <span class="inline">dylib</span> 或<span class="inline">so</span> ）的本地<span class="notranslate">Ubuntu</span> 的一部分，并且它有四个以上的参数，<strong>所有参数必须是相同的类型</strong>。</p>
  <p>一旦你完成了这一切，那么这个函数就可以在项目中使用了；它现在会在自动完成中显示出来，并以颜色编码。</p>
  <p><img>定义的函数也可以被设置为<strong>初始函数</strong>或<strong>最终函数</strong>，这意味着当游戏开始（初始）和游戏结束（最终）时，它们将被自动调用。</p>
  <p class="note"><strong>重要的是!</strong>所有平台都支持Init函数调用，<strong>但不是所有平台都会执行Final函数调用。</strong>这是因为某些平台会直接关闭应用程序，而不给任何通知或时间让这个函数被调用。受此影响的平台主要是<strong>iOS</strong>、<strong>Android</strong>、<strong>HTML5</strong>、<strong>PlayStation </strong>和<strong>Xbox</strong>。</p>
  <h2>巨集</h2>
  <p>你有的另一个选择是创建一个<strong>宏</strong>。一个宏可以是一个<a class="glossterm" data-glossterm="常数" href="#">常量</a>值，也可以是一个简短的代码片段（关于宏的更多信息，请看<a href="../../GameMaker_Language/GML_Overview/Variables/Constants.htm">这里</a>）。例如，我们可以从我们先前定义的<span class="notranslate">GML</span> 扩展中删除<span class="inline">c_alice_blue</span> 函数，将其改为宏。要创建一个宏，你可以简单地点击<span class="notranslate">Extension</span> 属性中的 &quot;宏 &quot;按钮，这将打开以下窗口。</p>
  <p class="dropspot"><img alt="File Property Window" class="center" height="553" src="../../assets/Images/Asset_Editors/Editor_Extensions_FileProperties.png" width="1050" /></p>
  <p>这里的编辑器几乎是不言自明的：你给出宏的名称和它的常量值，或者是一行简短的代码。请注意，如果该宏是一行代码，那么<strong>每次调用该宏时都会被评估</strong>。</p>
  <h2 id="h1">创建<span class="notranslate">Extension</span> 选项</h2>
  <p>点击<strong>&quot;扩展选项</strong>&quot;旁边的齿轮图标，创建或修改你的扩展选项。</p>
  <p><img>在确认提示上点击<strong>&quot;是</strong>&quot;后，你会看到一个新的窗口，在那里你可以添加新的<span class="notranslate">extension</span> 。</p>
  <p><img>你可以给每个<span class="notranslate">extension</span> 选项一个名称，一个默认值，和一个数据类型。名称是你在你的<span class="notranslate">extension</span> 代码中内部使用的，用来检索选项的值。</p>
  <p>除了使用 &quot;添加选项 &quot;添加选项之外，你还可以使用 &quot;添加章节 &quot;添加章节。一个部分<strong>不是</strong>一个选项，而只是一个显示在<span class="notranslate">Extension</span> 编辑器主窗口的标题。如果你有很多选项，想清理最终用户看到的选项列表，可以使用这个方法。</p>
  <p>可以创建以下类型的选项。</p>
  <ul class="colour">
    <li><strong>布尔型</strong>。这将创建一个真/假复选框。</li>
    <li><strong>数字</strong>。这是个实数。</li>
    <li><strong>字符串</strong>。这是一个文本<span class="notranslate">string</span> 。</li>
    <li><strong>FilePath</strong>。这是一个<span class="notranslate">path</span> ，指向一个文件。它允许你使用你的操作系统的资源管理器来浏览一个文件。</li>
    <li><strong>FolderPath</strong>。这是一个<span class="notranslate">path</span> ，指向一个文件夹/目录。它允许你使用你的操作系统的资源管理器来浏览一个文件夹。</li>
    <li><strong>列表</strong>。这是一个下拉菜单，可以从预定义的项目列表中选择一个单一项目。</li>
  </ul>
  <p>你也可以点击一个选项旁边的<img> cog图标，给它一个可选的<strong>显示名称</strong>和<strong>描述</strong>（悬停在显示名称上的时候会以工具提示的形式出现）。</p>
  <p>在额外窗口中，你也可以选择将这个选项导出到与游戏捆绑的<strong>options.ini</strong>文件中。</p>
  <p>最后，你可以选择从编辑器中隐藏该选项，使使用<span class="notranslate">extension</span> 的终端用户看不到它。</p>
  <h3>使用<span class="notranslate">Extension</span> 选项</h3>
  <p>你可以通过使用<a href="../../GameMaker_Language/GML_Reference/Asset_Management/Extensions/Extensions.htm">扩展函数</a>在<span class="notranslate">runtime</span> ，检索一个扩展的选项的值。</p>
  <p>你也可以通过使用<span class="inline2">YYEXTOPT_&lt;ExtensionName&gt;_&lt;OptionName&gt;</span>的名称在你的<a data-xref="{title}" href="../../Settings/Runner_Details/Compiler_Batch_Files.htm">编译器批处理文件/脚本</a>中检索你的<span class="notranslate">extension</span> 选项。</p>
  <p>如果<span class="notranslate">runtime</span> 有在<span class="notranslate">extension</span> 使用的功能，扩展选项将只能在<span class="notranslate">runtime</span> 。然而，无论扩展的使用情况如何，选项将始终被导出到INI文件（如果选项被启用）和批处理<span class="notranslate">scripts</span> 。</p>
  <h2>代理文件</h2>
  <p>当使用多个目标平台时，值得注意的是，你可以创建一个只有一套函数/宏的单一<span class="notranslate">extension</span> ，它将在<em>所有 </em>平台上工作。这可以通过在你的游戏中只添加一个链接库作为<span class="notranslate">extension</span> ，并将其他链接库放入<strong>扩展属性</strong>窗口的<strong>代理文件</strong>列表中来实现。</p>
  <p><img>例如，假设你有一个<span class="notranslate">Windows</span> <span class="notranslate">extension</span> ，其中的 <span class="inline"> <strong>dll </strong></span>&quot;<span class="inline">Haggis.dll</span>&quot;。你可以简单地将这个 <span class="inline"> <strong>dll</strong></span> 复制为一个 Mac <span class="inline"> <strong>DyLib</strong></span> ，将其命名为 &quot;<span class="inline"><strong>libHaggis.dylib</strong></span>&quot; 并确保内部函数名称与原始<span class="notranslate">Windows</span> <span class="inline"> <strong>dll</strong></span> 相符。这 <strong> <span class="inline">DyLib</span> </strong>然后将其添加到代理文件中，并在游戏在Mac目标上运行时设置为导出，<span data-keyref="GameMaker Name">GameMaker</span>将在调用<span class="notranslate">extension</span> 功能时自动使用它。</p>
  <p>要添加一个代理文件，你可以简单地点击所选资源文件的属性窗口中的<img> 按钮，然后浏览到文件位置。一旦它被添加，你可能需要更新扩展的目标以添加适当的模块，当你下次运行你的游戏时，它将作为该平台的代理被包括在内。你也可以通过点击<img> 按钮来删除代理文件，这将删除所选的代理文件。</p>
  <p><span class="notranslate">Extensions</span> 一旦你添加了你的代理文件，它们将被复制到你的项目的<span class="notranslate">extension</span> 文件夹中（你可以通过右键点击<img> 在<em>资源管理器中</em>选择<em>打开来</em>找到它们），所以如果你需要编辑它们，你应该编辑与游戏捆绑的复制文件而不是导入的源文件，因为<span data-keyref="GameMaker Name">GameMaker</span>将使用项目中的文件来编译。</p>
  <h2 id="h">命名规则</h2>
  <p>非常重要的是，你的代理文件要遵循下面列出的命名惯例，因为<span data-keyref="GameMaker Name">GameMaker</span>会解析这些名称，并根据文件的<span class="notranslate">extension</span> 和名称为其分配目标模块，并自动为你链接文件。如果你不遵循这些惯例，你的游戏可能无法工作，<span class="notranslate">runtime</span> ，因为<span data-keyref="GameMaker Name">GameMaker</span>将无法确定使用哪个文件，所以它将无法正确加载文件。</p>
  <p>下面给出了每个目标平台的命名惯例。</p>
  <table>
    <colgroup>
      <col style="width: 173px;" />
      <col style="width: 715px;" />
    </colgroup>
    <tbody>
      <tr>
        <th>平台</th>
        <th>名称</th>
      </tr>
      <tr>
        <td>Windows 32位运行时间</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.dll, lib&lt;<em>Name</em>&gt;.dll</span></td>
      </tr>
      <tr>
        <td>Windows 64位运行时间</td>
        <td><span class="inline">&lt;<em>N</em><em>ame</em>&gt;_x64.dll, lib&lt;<em>Name</em>&gt;_x64.dll</span></td>
      </tr>
      <tr>
        <td>UWP</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_x86.dll, &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_arm.dll, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_x86.dll, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_arm.dll</td>
      </tr>
      <tr>
        <td>Ubuntu (<span class="notranslate">Linux</span>)</td>
        <td><span class="inline">&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;.so，lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;.so。<br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux.so。<br>
            <br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_arm.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_arm.so。<br>
            <span class="inline">lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux_arm.so。<br>
            <br>
            &lt;<em>名称&gt;_arm64</em>.so, lib&lt;<em>名称&gt;_arm64</em>.so, lib&lt;名称&gt;_<em>linux_arm64</em>.so。<br>
            <br>
            &lt;<em>名&gt;_arm64-v8</em>.so。<br>
            lib&lt;Name&gt;<em>_arm64-v8</em>.so, lib&lt;Name&gt;_linux_arm64-v8.so。<br>
            <br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_armeabi-v7a.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_armeabi-v7a.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux_armeabi-v7a.so</td>
      </tr>
      <tr>
        <td>macOS</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.dylib, lib&lt;Name&gt;.dylib</span></td>
      </tr>
      <tr>
        <td>HTML5</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.js</span></td>
      </tr>
      <tr>
        <td>淘宝网</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt;<em>Name</em>&gt;.prx, &lt;<em>Name</em>&gt;_ps4.prx, lib&lt;<em>Name</em>&gt;_ps4.prx</span></td>
      </tr>
      <tr>
        <td>PS5</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt;<em>Name</em>&gt;.prx, &lt;<em>Name</em>&gt;_ps5.prx, lib&lt;<em>Name</em>&gt;_ps5.prx</span></td>
      </tr>
      <tr>
        <td>Xbox One</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, </span>&lt;<em>名称&gt;_xboxone</em>.dll</td>
      </tr>
      <tr>
        <td>X系列X和S</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, </span>&lt;<em>名称&gt;_xboxseriesxs</em>.dll</td>
      </tr>
    </tbody>
  </table>
  <p>使用上述惯例，你将把 <span class="inline">&lt;<em>Name</em>&gt;</span> 部分换成你要添加代理文件的基础文件的名称。</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="../Extensions.htm"> <span class="notranslate">Extension</span> 编辑</a></div>
        <div style="float:right">下一步。<a href="Android_Extensions.htm">安卓扩展</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Creating Extensions
-->
  <!-- TAGS
extensions_create
-->
</body>
</html>