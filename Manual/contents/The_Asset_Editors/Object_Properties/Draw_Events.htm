<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>抽奖活动</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing the draw event." />
  <meta name="rh-index-keywords" content="Objects - Draw Events" />
  <meta name="search-keywords" content="draw event,draw begin,draw end,pre-draw,post draw,draw GUI,draw order" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <script src="../../assets/scripts/main_script.js"></script>
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>抽奖活动</h1>
  <p><img>绘制事件类别是拥有所有事件的类别，这些事件制约着你在运行游戏时在屏幕上看到的东西。它被分割成各种
    独立的事件，以更好地处理游戏的不同绘图要求，下面的图片说明了每个事件的执行顺序。</p>
  <p><img>正常的绘图事件分为三种子类型。<strong>绘图开始</strong>、标准<strong>绘图</strong>和
   <strong>绘制结束</strong>事件。一般来说，你只需要使用标准绘图事件，你应该知道<span class="notranslate">room</span> 中的所有实例在游戏的每一步都会触发这个事件，所以这个事件会一直被调用，只要
    实例的<strong>可见 </strong>标志设置为 "true"，这个事件就会被调用。重要的是要明白，即使你在<span class="notranslate">object</span> 属性中没有为这个子事件定义任何东西（即：没有代码也没有动作），<em>如果<span class="notranslate">object</span> 已经分配了一个<span class="notranslate">sprite</span> ，它仍然会有一个将被触发的绘制事件</em>。
    这是因为<span data-keyref="GameMaker Name">GameMaker</span>在Draw事件中有两种方法来绘制东西。</p>
  <ul class="colour">
    <li><strong>默认绘制</strong>，也就是你在<span class="notranslate">sprite</span> 属性中定义<span class="notranslate">object</span> ，并在正常的绘制事件中不放置任何动作或代码，在这种情况下<span data-keyref="GameMaker Name">GameMaker</span>会自动绘制指定的<span class="notranslate">sprite</span> 。请注意，任何转换
      只要绘制事件是空的，你在其他事件中执行的改变图像比例、索引、混合等的转换也会被反映出来。</li>
    <li><strong>自定义绘制</strong>，也就是当你在绘制事件中放置代码或动作。这是在告诉<span data-keyref="GameMaker Name">GameMaker</span> <em>&quot;我想控制你对这个对象的实例的绘制</em>&quot;，它完全覆盖了默认的
      绘制。这意味着，例如，你可以有一个指定了<span class="notranslate">object</span> 的<span class="notranslate">sprite</span> ，然后将draw事件设置为draw text，文本将被绘制在屏幕上，但<span class="notranslate">sprite</span> 将<em>不会 </em>被绘制，因为你没有告诉<span data-keyref="GameMaker Name">GameMaker</span>将其与文本一起绘制。
      与文本一起绘制。</li>
  </ul>
  <p>其余的抽奖活动将在下面列出的章节中解释。</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">绘图开始和绘图结束</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">除了主要的绘制事件，你还有一个<strong> 绘制开始</strong>和<strong>绘制结束</strong>事件。这些事件的作用与标准的绘图事件完全相同（即：它们会在游戏的每一步和所有视口中绘制你所输入的东西）。
      所有的视口），但是如果它们没有被明确地添加到<span class="notranslate">object</span> ，它们不会 &quot;默认绘制 &quot;任何东西，而且它们总是在标准绘制事件之前/之后运行。所以，当游戏运行时，你将<em>总是</em>有
      所有实例的Draw Begin事件，然后是所有实例的Draw事件，最后是所有实例的Draw End事件。</p>
    <p class="dropspot">通过这种方式，你可以在一个实例中的Draw Begin步骤中绘制东西或设置绘制属性，并确保所有具有标准Draw事件或Draw End事件的实例将使用这些属性或在第一个实例绘制的内容上绘制。基本上
      它是保证某些东西在特定时间被绘制的一种可靠方式，就像<strong>Begin Step</strong>和<strong>End Step </strong>事件一样。</p>
    <p class="dropspot">在<span data-keyref="GameMaker Name">GameMaker</span>中画东西的时候，有几件事需要注意，不管你画的是<span class="notranslate">sprite</span> ，还是<span class="notranslate">shader</span> ，还是3D缓冲区。</p>
    <ul class="colour">
      <li class="dropspot">绘制事件是一个非常密集的事件，因为它是占用时间和资源最多的事件之一......为此，在绘制事件中除了绘制之外做任何事情都不是一个好主意。因此，把你的大型代码或复杂动作
        所以，把你的大型代码或复杂的动作留给步骤事件或警报或其他适合的事件，但把绘图事件留给绘图，因为这是它最擅长的。</li>
      <li class="dropspot">如果你的<span class="notranslate">object</span> 已经将可见参数设置为<em>关闭 </em>（这样<span class="notranslate">object</span> 的实例就不会被绘制），那么<strong>所有的绘制事件都会被跳过 </strong>（除了<strong>调整大小 </strong>的事件）。这意味着，让一个实例
        不可见将阻止所有放置在这些事件中的代码运行，所以如果它们不可见，就不要把重要的代码放在绘制事件中。</li>
      <li class="dropspot">你画的东西与你选择的碰撞引擎（传统或物理）无关，因为那是由<span class="notranslate">object</span> 属性和<span class="notranslate">sprite</span> （或掩码）定义的，<span class="notranslate">object</span> 已经被赋予。</li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">绘制图形用户界面</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">绘制GUI事件类型属于绘制事件类别，是专门为绘制不受视图摄像机比例或旋转影响的<a class="glossterm" data-glossterm="GUI" href="#">GUI</a>元素而设计的。这意味着你
      可以让一个实例为你的<a class="glossterm" data-glossterm="HUD" href="#">HUD</a>或用户界面绘制所有的元素，而不必将所有元素的定位建立在实例在<span class="notranslate">room</span> 中的位置或当前摄像机视图的位置上。
      中的位置或当前摄像机视图的位置。</p>
    <p class="dropspot">在这些事件中绘图时，重要的是你要明白，即使相机视图处于活动状态，绘图坐标也不会改变，(0,0)<em>总是 </em>应用程序表面或显示器的左上角（见本节底部的注释
      本节底部的注释），默认的宽度和高度与应用表面是1：1。深度排序仍然保持在不同层的不同实例之间（所以高一层的实例会被画在低一层的实例下面）。
      在事件本身中也是如此，因为<strong>Draw GUI Begin</strong>事件将首先绘制所有的实例，然后标准的<strong>Draw GUI</strong>将绘制上面的所有实例，最后<strong>Draw Gui End </strong>事件
      被触发了。</p>
    <p class="dropspot">通过这种方式，你可以在一个实例中绘制东西或在Draw GUI Begin中设置绘制属性，并确保所有具有标准Draw GUI或Draw GUI End事件的实例将使用这些属性或在第一个实例绘制的东西上绘制。基本上
      这是一个保证某些东西在特定时间被绘制的可靠方法，就像<strong>Begin Step</strong>和<strong>End Step</strong>事件一样。</p>
    <p class="dropspot">这些事件也可以和正常的Draw事件一起使用（这些事件会像正常一样受到摄像机视图位置、比例和旋转的影响）。如果你没有绘制事件，但你有一个绘制GUI事件，那么<span data-keyref="GameMaker Name">GameMaker</span>仍然会
      默认为实例绘制<span class="notranslate">sprite</span> （如果它有的话），就像平常一样。</p>
    <p class="dropspot">关于其他的绘制事件，Draw GUI事件将总是在正常绘制事件中绘制的任何东西之上绘制。因此，如果你有一个在较低层的实例有一个Draw GUI事件，它将在较高层的实例上绘制
      的实例，它就会在具有普通绘制事件的上一层绘制。如果两个实例都有一个Draw GUI事件，那么层的顺序将被尊重。</p>
    <p class="note"><strong>注意</strong>：默认情况下，该事件将与应用程序的表面尺寸成1:1，这通常是<span class="notranslate">room</span> 或视口的尺寸。这意味着，当你在游戏选项中打开了<strong>高宽比校正</strong>功能时
      GUI不会被画在 &quot;字母框 &quot;游戏的黑条上。这种行为可以用 <a href="../../GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_gui_maximise.htm"><span style="font-size:14px;"> <span class="inline" style="font-size: 14px">display_set_gui_maximise()</span></span></a>功能关闭。
      你也可以将GUI事件锁定为一个特定的尺寸，然后通过使用函数自动缩放以适应显示器或应用程序的表面尺寸。 <a href="../../GameMaker_Language/GML_Reference/Cameras_And_Display/display_set_gui_size.htm"><span class="inline" style="font-size: 14px">display_set_gui_size()</span></a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">抽签前和抽签后</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">绘制前和绘制后事件是绘制事件类别的一部分。然而，与其他绘图事件不同的是，这些事件<em>直接 </em>绘制到<a class="glossterm" data-glossterm="显示缓冲区" href="#">显示缓冲区</a>，其尺寸为
      所有视口当前可见的屏幕空间的总和，如果只使用一个视口或根本不使用视口，<em>则 </em>是窗口的大小。下面的图片说明了这一点。</p>
    <p class="dropspot"><img>因此，如果你使用Pre或Post draw事件，你是在向全屏渲染目标(display<span class="notranslate">buffer</span>)绘图，它将具有
      与所有视口都适合的窗口大小相同。如果你没有激活任何视口，这将被设置为窗口本身的大小。</p>
    <p class="dropspot">预绘制事件在任何其他绘制事件之前被触发，在其中你可以设置值，设置绘制属性，甚至绘制东西而不用担心视口或GUI层的大小（GUI层的大小可能与屏幕相同
     <span class="notranslate">buffer</span> 但也可能不是，因为你可以在代码中设置GUI的分辨率）。</p>
    <p class="dropspot"><span class="notranslate">buffer</span> 值得注意的是，这个事件发生<em>在 </em>显示<span class="notranslate">switch</span> 为常规绘图清除<em>之前 </em>，这意味着如果你不在<span class="notranslate">room</span> 编辑器中关闭视图清除，那么在预绘制事件中绘制的东西将不会被看到，因为
      第一次视口绘制将清除它。如果你想看透视口本身，或者你根本不使用视口，那么你也应该在......中把背景颜色设置为alpha值为0。 <strong><a href="../Rooms.htm">房间编辑器</a></strong>.</p>
    <p class="note"><strong>注意</strong>：如果你<span class="notranslate">switch</span> 关闭这些选项，你可能会注意到在游戏测试时屏幕上会出现不需要的人工制品（比如来自实例的 &quot;痕迹&quot;）。这是因为你是直接在前一帧
      显示<span class="notranslate">buffer</span> ，而没有清除它。不过你可以用 <span class="inline" style="font-size: 14px"><a href="../../GameMaker_Language/GML_Reference/Drawing/Colour_And_Alpha/draw_clear_alpha.htm">draw_clear_alpha()</a> </span>来做这个
      自己。</p>
    <p class="dropspot">绘制后事件是<em>在 </em>所有标准的绘制事件<em>之后 </em>触发的，但<em>在 </em>绘制GUI事件<em>之前 </em>。像预绘制事件一样，它是基于显示的大小<span class="notranslate">buffer</span> ，并被置于绘制GUI事件之前，以使你能够
      在全屏的基础上简单而容易地执行后处理效果和其他事情，而不干扰任何<a class="glossterm" data-glossterm="HUD" href="#">HUD</a>/<a class="glossterm" data-glossterm="GUI" href="#">GUI</a>元素。
      你在游戏中可能有的任何HUD/GUI元素。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">窗口调整大小</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">这个事件类型属于绘制事件类别，虽然它实际上没有绘制任何东西，但它确实对显示<span class="notranslate">buffer</span> 的变化做出反应--具体来说，它被设计用来对UWP显示<span class="notranslate">buffer</span> 的尺寸变化做出反应，当
      游戏窗口被 &quot;捕捉 &quot;时，它被设计用来对UWP显示尺寸的变化做出反应。</p>
    <p class="dropspot">在UWP目标平台上，很重要的一点是，你要从游戏窗口的 &quot;抓取&quot;（例如，当用户将窗口拖到显示器的一侧时）中捕捉到任何显示的大小调整<span class="notranslate">buffer</span> 。这个事件就可以做到这一点，并且
      每次改变窗口时都会被触发，允许你在这里添加自定义代码，在必要时调整视图的大小或重新定位<a class="glossterm" data-glossterm="HUD" href="#">HUD</a>元素。这个函数是作为一种方便的
      提供了一个方便的方法来避免一直检查这些东西的步骤事件代码。</p>
    <p class="note"><strong>注意</strong>：你不能在这个事件中画画！它是由调整窗口大小触发的，只是为了捕捉这个变化。它是由调整窗口大小触发的，并且只用于捕捉这种变化......任何应该进行的绘制仍然必须在其他的绘制事件中进行。</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="Object_Events.htm">对象事件</a></div>
        <div style="float:right">下一步。<a href="Async_Events.htm">异步事件</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Draw Events
Pre Draw Event
Post Draw Event
Draw Begin Event
Draw End Events
Draw GUI Events
Draw GUI Begin Event
Draw GUI End Event
Pre Draw Event
Post Draw Event
Window Resize Event
-->
  <!-- TAGS
draw_events
-->

</body></html>