<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>对象事件</title>
    <meta name="generator" content="Adobe RoboHelp 2020" />
    <meta name="rh-authors" content="Mark Alexander" />
    <meta name="topic-comment" content="Page detailing the events system and the different events in an object" />
    <meta name="rh-index-keywords" content="Objects - Events" />
    <meta name="search-keywords" content="events,object events,events list" />
    <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
    <script src="../../assets/scripts/main_script.js"></script>
  </head>
  <body><!--<div class="body-scroll" style="top: 150px;">-->
    <h1>对象事件</h1>
    <p>那么，什么是<span class="notranslate">object</span> <strong>事件</strong>？基本上，这些是游戏中的谨慎时刻<span class="notranslate">loop</span> ，在这里，事情会根据你的编程而发生。<span data-keyref="GameMaker Name">GameMaker</span>用这些事件的循环来工作--从一个<span class="notranslate">room</span> 开始到结束的那一刻，有一个游戏<span class="notranslate">loop</span> ，每一步都<strong>有 </strong>一系列的事件被运行或检查，你可以选择在你的<span class="notranslate">GML</span> 中放置代码或<span class="notranslate">objects</span> 视觉动作来响应这些事件（一个步骤是游戏时间的一个时刻，由<span class="notranslate">room</span> 速度设置来控制，也可以称为一个<strong>框架</strong>）。</p>
    <p>让我们看看一个典型的带有事件和代码的<span class="notranslate">object</span> 设置。</p>
    <p><img>正如你在我们的例子<span class="notranslate">object</span> 中所看到的，有许多事件被列出，它应该对这些事件作出反应，但最初当你创建一个<span class="notranslate">object</span> ，这个列表是空的，你必须决定你需要哪些事件，以及当这些事件被触发时，<span class="notranslate">object</span> 的实例应该做什么。要将事件添加到<span class="notranslate">object</span> ，你可以按事件列表底部的<em>添加事件</em>按钮，会出现以下窗口。</p>
    <p><img>这是一个<span class="notranslate">object</span> 可以响应的所有基本事件和事件类别的列表，在每个类别中都有子事件来进一步细化行为。例如，如果你点击<strong>按键</strong> <img> 事件类别，你将得到一个弹出的进一步窗口，允许你选择<span class="notranslate">object</span> 应该对<em>哪个 </em>键作出反应的事件。</p>
    <p>一旦你选择了你的事件，事件的编辑器窗口就会被链接到它，并在右边打开。</p>
    <div data-conref="../../assets/snippets/Visual_Code_Choice.hts"> </div>
    <p>你现在可以编辑<span class="notranslate">GML</span> 代码（或块），给你的<span class="notranslate">object</span> 一个特定的行为或对该事件的反应。</p>
    <p>你可以在任何已经添加到<span class="notranslate">object</span> 的事件上点击鼠标右键<img> ，以获得以下菜单选项。</p>
    <p><img>这些选项是：。</p>
    <ul class="colour">
      <li><strong>添加事件</strong>- 从事件列表中添加一个新的事件。</li>
      <li><strong>剪切/ </strong> <strong>复制/ </strong> <strong>粘贴事件</strong>- 剪切、复制或粘贴选定的事件。你也可以使用标准的键盘快捷键。 <img> /<img> + <span class="inline">X</span>,<img> /<img> + <span class="inline">C</span>, 和<img> /<img> + <span class="inline">V</span> 。</li>
      <li>复制<strong>事件</strong>- 复制选择的事件。这将采取所选事件的内容，并将它们复制到你指定的另一个事件中。</li>
      <li><strong>改变事件</strong>- 改变事件。这将提示您选择另一个事件类别，一旦选定，当前事件的内容将被改变为新的事件（在此过程中删除原事件）。</li>
      <li><strong>转换为<span class="notranslate">GML</span> Visual / Code</strong>-<span class="notranslate">Object</span> 事件将使用你创建项目时选择的方法创建，可以使用代码或使用<span class="notranslate">GML</span> Visual动作。有了这个选项，你可以从一个转换到另一个，不管项目类型如何。</li>
      <li><strong>删除事件</strong>- 删除该事件（或事件）。</li>
    </ul>
    <p>当删除事件时，你可以使用<img> +<img> 来选择多个事件，然后一起删除它们。你创建的每个<span class="notranslate">object</span> 都有它自己的谨慎的事件列表，从<strong>对象编辑器</strong>添加到其中。这些事件分为两类。</p>
    <ul class="colour">
      <li>那些运行每一个游戏步骤的人</li>
      <li>那些由游戏事件 &quot;触发 &quot;的事件，如实例到达<span class="notranslate">room</span> 边缘或按下键盘或鼠标。</li>
    </ul>
    <p>活动的完整清单如下。</p>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">创建</a></p>
    <div class="droptext" data-targetname="drop-down8">
      <p class="dropspot">这个事件发生在第一次创建<span class="notranslate">object</span> 的实例时，也是通过<span class="notranslate">room</span> 编辑器进入<span class="notranslate">Room</span> ，放置在<span class="notranslate">room</span> 的实例中发生的第一件事。这意味着该事件是初始化<span class="glossextra">变量</span>、启动<a href="../Timelines.htm">时间线</a>、设置<a href="../Paths.htm">路径</a>等......以及其他任何通常只需要做一次或只在<span class="notranslate">room</span> 中首次创建实例时做的事情的理想场所。如果你的<span class="notranslate">object</span> 在<span class="notranslate">Object</span> 编辑器或<span class="notranslate">Room</span> 编辑器中添加了任何<strong>对象变量</strong>或<strong>实例变量</strong>，那么这些变量将首先被初始化，然后<strong>创建事件</strong>将被运行。</p>
      <p class="dropspot">请记住，你可以从<span class="notranslate">Room</span> 编辑器中的<a href="../Room_Properties/Layer_Properties.htm">实例创建代码</a>中修改你在创建事件中设置的任何东西，因为那是在实例的创建事件之后直接运行的，可以用来创建<strong>实例变量</strong>或覆盖作为<span class="notranslate">Object</span> 变量或在实际创建事件中添加的任何变量。</p>
      <div data-conref="../../assets/snippets/Instance_creation_order_warning.hts"> </div>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">销毁</a></p>
    <div class="droptext" data-targetname="drop-down9">
      <p class="dropspot">这个事件是一个实例被摧毁时要执行的事件。<span class="notranslate">objects</span> 在添加行为到<span class="notranslate">object</span> ，它经常被忽视，但它可以非常有用，例如，当敌人被杀死时创建爆炸或粒子效果，或在<span class="notranslate">room</span> 的另一个地方重新生成一个新的实例，甚至在分数上加分。</p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#">清理</a></p>
    <div class="droptext" data-targetname="drop-down10">
      <p class="dropspot"><span><span class="notranslate">object</span>该事件将在任何从<span class="notranslate">room</span> 中删除实例的事件之后被调用。因此，它将在以下情况下被触发。</span></p>
      <ul class="dropspotlist">
        <li class="dropspot"><span>该实例被销毁</span></li>
        <li class="dropspot"><span><span class="notranslate">room</span> 结束</span></li>
        <li class="dropspot"><span>游戏结束</span></li>
      </ul>
      <p class="dropspot"><span>它被设计用来 &quot;清理 &quot;你在游戏中可能拥有的任何动态资源（如表面、数据结构等......），或者执行任何你需要在实例以任何方式从游戏中移除时执行<em>一次的 </em>任务。</span></p>
      <p class="dropspot"><span>请注意，这个事件将在触发它的事件之后<em>立即 </em>被调用，但这个实例实际上不会被从游戏中删除<strong>，直到当前事件结束</strong>。例如，如果你在步骤事件中调用 <span class="inline">instance_destroy()</span> ，那么销毁事件将被调用，然后是清理事件，然后<em>步骤事件的其余部分将完成运行</em>。这意味着你在调用 <span class="inline">instance_destroy()</span> 之后的任何代码仍然会被运行，如果你清理了一个数据结构或其他一些代码所需的资源，就会成为出错的潜在原因，所以使用这个事件时必须小心。</span> </p>
      <p> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">警报</a></p>
    <div class="droptext" data-targetname="drop-down11">
      <p class="dropspot">报警类别被分成12个事件，每个事件对应一个实例中可能设置的报警。因此，当你点击<em>添加报警 </em>类别时，你会看到这个窗口。</p>
      <p class="dropspot"><img>在这里，你选择你想创建的警报，一旦完成，你会看到它已经被添加到事件窗口，允许你像平常一样向它添加代码。但什么是报警？嗯，它是一个特殊的事件，除非事先设置了警报，否则它不会做任何事情，然后它将等待警报倒计时到0，然后再运行你添加到它的动作或代码。</p>
      <p class="dropspot">一旦警报达到0并运行代码，它就会倒数到-1，在那里它将保持到再次设置（意味着你可以检查警报的值是否大于-1，这将告诉你它是否正在运行）。所以，假设你在<span class="notranslate">object</span> 的创建事件中把 <span class="inline">alarm[0]</span> 设置为30，这意味着<span data-keyref="GameMaker Name">GameMaker</span>将在运行放在 <span class="inline">alarm[0]</span> 事件中的动作或代码之前倒数30个游戏步骤。注意，将报警器设置为0<em>不会 </em>运行报警器代码，因为事件被触发了，但报警器被立即设置为-1，所以代码被跳过。如果你需要一个警报来运行下一步，那么你应该把它设置为1。</p>
      <p class="dropspot">这可能非常有用，因为它允许你在精确的时刻设置事物的运动，你甚至可以让它们重复，因为没有什么可以阻止你在它自己的事件中设置一个警报。想象一下，你有一个怪物，你想让它每三秒钟向右转......好吧，你可以在它的创建事件中设置一个警报，以<span class="notranslate">room</span> 速度*3（如果<span class="notranslate">room</span> 速度是30，那就是每秒30步，所以乘以3，你就得到了3秒！）然后在警报事件中，你会有代码或动作来设置它的方向，以及动作（或代码）来再次设置其警报为<span class="notranslate">room</span> 速度*3。通过这种方式，你可以设置简单的游戏<span class="notranslate">loops</span> ，其中事情只在特定的时间间隔发生。</p>
      <p class="dropspot">值得注意的是，一个没有任何动作或代码的报警器将<em>不会 </em>倒计时。然而，即使只有一个注释，没有代码或动作，那么警报将继续倒计时，并可以像正常情况下那样进行设置和检查。</p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#">步骤</a></p>
    <div class="droptext" data-targetname="drop-down12">
      <p class="dropspot"><span data-keyref="GameMaker Name">GameMaker</span>将时间分成<strong>几步 </strong>，<span class="notranslate">room</span> 速度定义了每秒钟应该有多少步（一步也可以称为<strong>一帧</strong>）。一个步骤，基本上就是<span class="notranslate">loop</span> ，在游戏运行时，所有的事件都被检查并在必要时被触发，所以你可以想象，<strong>步骤事件 </strong>是一个事件，在游戏的每一个步骤都被检查，同时实例存在。</p>
      <p class="dropspot">步骤事件实际上由三个子事件组成，概述如下。</p>
      <p class="dropspot"><img>对于大多数事情来说，使用标准的步骤事件就可以了，但有时你想对什么代码在什么时间运行有更多的控制，所以你提供了<strong>开始 </strong>和<strong>结束 </strong>步骤事件。这三个事件每一步都会被检查，但它们的顺序永远不会改变，即使<span data-keyref="GameMaker Name">GameMaker</span>引擎的未来更新改变了其他事件，这意味着这是唯一可靠的方法，以确保某些事情总是发生在其他事情之前。</p>
      <p class="dropspot">步骤事件可以用来做什么？嗯，它可以用于需要连续执行的动作或代码。例如，如果一个<span class="notranslate">object</span> 应该跟随另一个，在这里你可以对我们所跟随的<span class="notranslate">object</span> 的运动方向进行调整，以保持它在后面平稳地移动。不过要注意这个事件，不要在<span class="notranslate">objects</span> 的步骤事件中放很多复杂的动作，特别是如果你打算在你的游戏中拥有很多<span class="notranslate">object</span> 的实例<span class="notranslate">room</span> ，因为这可能会使游戏变慢。许多事情都可以放在报警器中，或者使用一些<strong>其他 </strong>事件来设置触发，而不是一直发生。</p>
      <p class="dropspot"> </p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down13" href="#">碰撞</a></p>
    <div class="droptext" data-targetname="drop-down13">
      <p class="dropspot">显然，在制作游戏时，你必须知道两个（或多个）<span class="notranslate">object</span> 的实例发生了碰撞，为此我们有<strong>碰撞事件</strong>。这是一个你放在<span class="notranslate">object</span> 中的事件，然后指定你应该针对哪个其他的<span class="notranslate">object</span> 来检查碰撞。</p>
      <p class="dropspot">当你没有打开物理学时，这些碰撞将根据两个<span class="notranslate">objects</span> （掩码在<span class="notranslate">sprite</span> 属性中定义，或者可以在<span class="notranslate">object</span> 属性中独立分配）的掩码以及它们是否重叠来计算。请注意，如果碰撞中的一个或另一个实例没有分配掩码（或者<span class="notranslate">sprite</span> 掩码被设置为无），<em>即使它正在绘制东西</em>，也不会被检测到碰撞。</p>
      <p class="dropspot">如果你打开了<strong>物理学 </strong>，那么碰撞将基于你在物理学属性中为<span class="notranslate">object</span> 的<strong>碰撞形状</strong><em>（Fixture</em>）的类型，以及它对碰撞的反应。这意味着你可能不需要任何代码来处理碰撞，但是这个事件仍然<em>需要至少有一个注释 </em>来检测碰撞。</p>
      <p class="dropspot">最后，应该注意的是，在碰撞事件被触发之前，所有的碰撞将在每个游戏步骤中被计算一次，这样当碰撞事件运行时，所有的碰撞都已经被计算并预先分配了。这意味着，如果你在这个事件中创建了一个实例，然后试图用它来检查碰撞，碰撞将不会被检测到或解决，直到游戏的下一次<a class="glossterm" data-glossterm="迭代" href="#">迭代</a> <span class="notranslate">loop</span> 。</p>
      <p class="dropspot"> </p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#">键盘。</a>  <img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#">敲击键盘。</a>  <img> <a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down14" href="#">键盘释放</a></p>
    <div class="droptext" data-targetname="drop-down14">
      <p class="dropspot">让玩家控制你游戏的不同方面是非常重要的，为此<span data-keyref="GameMaker Name">GameMaker</span>为你提供了一个非常全面的键盘事件列表，可以在三个主要的键盘类别中的任何一个使用。对于一般的键盘类别，只要选定的键被按下，每一步都会被连续触发，而按压和释放类别的事件只会在最初按压或释放键时被触发一次。</p>
      <p class="dropspot">应该注意的是，只要使用一个键，键盘事件实际上会在<span class="notranslate">room</span> 中的所有活动实例中被触发，但只有那些为该特定键定义了事件的实例才会做出反应，你可以在任何<span class="notranslate">object</span> 中创建多个键盘事件，在游戏运行时，该<span class="notranslate">object</span> 的实例会对所有事件做出反应。</p>
      <p class="dropspot">当你添加任何键盘事件到一个<span class="notranslate">object</span> ，你会看到键盘子事件菜单，你可以指定你要检查的键。</p>
      <p class="dropspot"><img>它们中的大多数是相当明显的，但让我们简单地浏览一下这些部分--在顶部我们有方向键，其次是最常用的修改键，然后是键盘的其他部分（分成更多的子部分，这样你可以得到所需的确切的键，如<img> 或<img> ），最后是两个非常特殊的子事件，<strong>无键</strong>和<strong>任意键</strong>。正如它们的名字所暗示的，这些是检查<em>无键 </em>时或<em>任何 </em>键被按下时的子事件。请注意，数字键盘上的按键只有在启用<strong>数字锁时 </strong>才会产生相应的事件。</p>
      <p class="dropspot">键盘的 "<strong>按下 </strong>"和 "<strong>松开 </strong>"事件与常规键盘事件几乎完全相同，只是它们不是连续触发，而是只触发一次。当键盘第一次记录到一个键被按下时，它将产生一个<strong>键盘按下</strong>事件（以及常规的键盘事件），之后第一次不再检测到一个键被按下时，将触发一个<strong>键盘释放</strong>事件。</p>
      <p class="dropspot"> </p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down16" href="#">鼠标</a></p>
    <div class="droptext" data-targetname="drop-down16">
      <p class="dropspot">鼠标类别被分成一系列的事件，可以选择这些事件来给你一个更精确的控制你的游戏中发生的事情。这里你可以看到这些事件到底是什么。</p>
      <p class="dropspot"><img>左<img> 、右<img> 和中<img> 按钮事件（无论是<strong>正常的</strong>、<strong>按下的 </strong>还是<strong>释放的</strong>）都对有该事件的实例的掩码起作用。这意味着<span data-keyref="GameMaker Name">GameMaker</span>会在使用这些按钮时，对照有鼠标事件的实例的碰撞掩码，检查鼠标在<span class="notranslate">room</span> 中的位置。如果与实例的<a class="glossterm" data-glossterm="界限盒" href="#">边界框</a>发生 &quot;碰撞&quot;，那么事件就会被触发，所以要确保任何有这些事件的实例都有一个带有有效碰撞掩码的<span class="notranslate">sprite</span> ，或者<span class="notranslate">object</span> ，在<span class="notranslate">sprite</span> 属性中选择了一个掩码<span class="notranslate">object</span> 。正如它们的名字所暗示的那样，这些事件将在所选择的鼠标按钮第一次按下或释放时被触发一次，或者在按钮保持的每一步中被连续触发。 </p>
      <p class="dropspot">鼠标进入和离开事件也与按钮事件类似，它们也依赖于实例的掩码来工作，但这次它们是在鼠标第一次 &quot;进入&quot;（触摸）实例或鼠标 &quot;离开&quot;（停止触摸）实例时触发的。然而，这些事件不是连续的，每次鼠标进入或离开<span class="notranslate">object</span> ，它们只被触发一次--所以它们是一种理想的方法，例如，创建需要在鼠标悬停时改变的按钮，当鼠标移开时又恢复正常。</p>
      <p class="dropspot">最后，我们有另一个部分的鼠标事件，这被称为<strong>全局鼠标</strong>。在这个子菜单中，你会发现有一些事件是用来记录实例中的鼠标事件的，即使鼠标不在它们上面，甚至不在它们附近。这些事件是为<em>所有 </em>实例生成的，如果有动作或代码为指定的事件定义，那么它将被运行，无论鼠标在游戏中的位置如何<span class="notranslate">room</span> 。</p>
      <p class="dropspot">请注意，在移动或触摸屏设备上，鼠标左键<img> ，也可以用来检查触摸屏上的手指标签，而鼠标右键<img> ，是由双击屏幕触发的（这个行为可以用代码改变）。</p>
      <p class="dropspot"> </p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down18" href="#">手势</a></p>
    <div class="droptext" data-targetname="drop-down18">
      <p class="dropspot">这个事件是由用户触摸屏幕（在手机上）或点击并移动鼠标（在所有其他平台上）而触发的。这些事件类似于鼠标事件，你有常规版本和<em>全局</em>版本。这些事件的常规版本只有在触摸发生在具有<span class="notranslate">sprite</span> （或掩码）的实例上，并且触摸发生在其<a class="glossterm" data-glossterm="界限盒" href="#">边界</a>框内时才会被触发。然而，这些事件的全局版本，将由用户在屏幕上的<em>任何地方 </em>触摸触发。</p>
      <p class="dropspot">手势事件检测的内容如下。</p>
      <ul class="dropspotlist">
        <li class="dropspot"><img> <strong>轻拍 - </strong> 当用户点击/触摸并快速释放时</li>
        <li class="dropspot"><img> <strong>拖动 - </strong> 当用户触摸/点击并保持它然后移动他们的手指/光标时</li>
        <li class="dropspot"><img> 点击<strong>- </strong> 当用户在一个动作中移动并释放触摸/点击时</li>
        <li class="dropspot"><img> <strong>捏 - </strong> 当用户将两个手指放在屏幕上，然后一起/分开移动它们时</li>
        <li class="dropspot"><img> <strong>旋转 - </strong> 当用户在屏幕上有两个手指，然后围绕一个点旋转时</li>
      </ul>
      <p class="dropspot"><img>不同的事件总是包含一个名为&quot;<span class="inline">event_data</span>&quot;的DS地图，它将包含一些键/值对，其中有关于触摸/点击位置和移动的数据。关于所有可用的子事件以及它们如何工作的全部细节，请参见以下章节。</p>
      <ul class="dropspotlist">
        <li class="dropspot"><a href="Gesture_Events.htm">手势事件</a></li>
      </ul>
      <p class="dropspot"> </p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down19" href="#">其他</a></p>
    <div class="droptext" data-targetname="drop-down19">
      <p class="dropspot">在用<span data-keyref="GameMaker Name">GameMaker</span>制作游戏时，有许多特殊的事件，它们大多集中在 "其他事件 "下，当你选择这个时，可以从弹出的子事件菜单中选择。下面是所有这些其他事件的图片。</p>
      <p class="dropspot"><img>有关上述图片中所列的每项活动的更多信息，请参见以下部分。</p>
      <ul class="dropspotlist">
        <li class="dropspot"><a href="Other_Events.htm">其他事件</a></li>
      </ul>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down20" href="#">抽签</a></p>
    <div class="droptext" data-targetname="drop-down20">
      <p class="dropspot">这个事件类别是支配你在运行游戏时在屏幕上看到的东西，它被分成各种不相关的事件。</p>
      <p class="dropspot"><img>正如你所看到的，绘图事件类别有多种不同的事件类型。<strong>绘制开始</strong>、<strong>绘制 </strong>和<strong>绘制结束</strong>是 &quot;标准 &quot;的绘制事件，你可能会最常使用它们。默认情况下，每一个实例都会调用主绘制事件，不管它是否有<span class="notranslate">sprite</span> ，不过如果你把实例<span class="notranslate">flag</span> 为不可见，该事件就不会被触发（所以如果你在不可见的<span class="notranslate">object</span> 的绘制事件中有任何游戏逻辑，请牢记这一点，因为它不会运行）。主绘制事件也是<span data-keyref="GameMaker Name">GameMaker</span>默认绘制实例的地方<span class="notranslate">sprite</span> ，当事件中没有代码或动作时（即：你没有把它添加到事件列表中的<span class="notranslate">object</span> ）。默认绘制使用与该实例相关的<span class="notranslate">sprite</span> ，并将在代码中设置的任何变换或应用的动作中绘制该实例。</p>
      <p class="dropspot">标准绘制事件<em>在 </em> <strong>绘制GUI </strong>事件<em>之前 </em>绘制，并<em>在 </em> <strong>预绘制 </strong>和<strong>后绘制 </strong>事件<em>之间 </em>绘制，这意味着在此事件中绘制的所有东西都在绘制<strong>GUI </strong>事件的下面，而不考虑层数（即：在绘制GUI事件中绘制的任何东西将总是在普通绘制事件中绘制的任何东西之上，而不考虑层数顺序）。</p>
      <p class="dropspot">请注意，以上只是对抽奖活动工作方式的概述，但关于所有可用的子活动的完整细节，请参见以下章节。</p>
      <ul class="dropspotlist">
        <li class="dropspot"><a href="Draw_Events.htm">抽奖活动</a></li>
      </ul>
      <p> </p>
      <p> </p>
      <p class="dropspot"> </p>
    </div>
    <p><img><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down21" href="#">异步</a></p>
    <div class="droptext" data-targetname="drop-down21">
      <p class="dropspot">这个事件类别很特别，因为它所包含的事件不是由<span data-keyref="GameMaker Name">GameMaker</span>默认触发的，而是由其他一些动作结束后触发的，比如加载一个文件，或者来自网络的回复<span class="notranslate">server</span> 。该类别被分成以下事件。</p>
      <p class="dropspot"><img alt="Object Editor Events View" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_Events.png"/></p>
      <p class="dropspot">所以，说你想在<span data-keyref="GameMaker Name">GameMaker</span>中添加一个图像文件。那么，你可以在一个<span class="notranslate">object</span> 的另一个事件（也许是创建事件）中编写这个代码，然后让那个<span class="notranslate">object</span> 在等待时画一个加载条（例如），轮询适当的异步事件，直到<a class="glossterm" data-glossterm="回调" href="#">回调</a>告诉<span data-keyref="GameMaker Name">GameMaker</span>文件已经加载。然后你可以使用这个事件中返回的数据来做其他事情，比如改变<span class="notranslate">room</span> ，或者购买一个物品。</p>
      <p class="dropspot">请注意，以上只是对异步事件如何工作的概述，但关于所有可用的子事件的完整细节，请参见下面的章节。</p>
      <ul class="dropspotlist">
        <li class="dropspot"><a href="Async_Events.htm">异步事件列表</a></li>
      </ul>
      <p class="dropspot"> </p>
    </div>
    <p> </p>
    <p>你还应该注意，你可以给事件命名，或者至少给它们一个简短的描述性文本，在事件编辑器中显示在它们旁边。要做到这一点，只需在事件的代码编辑器的第一行添加以下内容（当使用<span data-keyref="GML_Code">GML代码</span>时）。</p>
    <p class="code">/// @description Your text here</p>
    <p>因此，你可以在--例如--一个<strong>报警 </strong>事件中拥有这样的东西。</p>
    <p class="code">/// @description This is the AI Fight alarm</p>
    <p>现在在你的事件编辑器中你会看到这个。</p>
    <p><img alt="Object Editor Events List" class="center" src="../../assets/Images/Asset_Editors/Editor_Objects_EventList.png"/></p>
    <p>对于<span data-keyref="GML_Visual">GML Visual</span>用户来说，添加注释需要使用<strong>Execute Code</strong>动作，这个动作应该放在事件的动作的最上面，在所有其他动作之前。当你添加这个动作时，你再给它加上上面显示的那行代码，以命名该事件，例如：。</p>
    <p><img>有关上述一些活动的其他信息和一般活动运行顺序，请参见以下章节。</p>
    <ul class="colour">
      <li><a href="Event_Order.htm">活动顺序</a></li>
      <li><a href="Other_Events.htm">其他事件</a></li>
      <li><a href="Draw_Events.htm">抽奖活动</a></li>
      <li><a href="Async_Events.htm">异步事件</a></li>
      <li><a href="Gesture_Events.htm">手势事件</a></li>
    </ul>
    <p> </p>
    <p> </p>
    <p> </p>
    <div class="footer">
      <div class="buttons">
        <div class="clear">
          <div style="float:left">返回。<a href="../Objects.htm"> <span class="notranslate">Object</span> 编辑</a></div>
          <div style="float:right">下一步。父对象</div>
        </div>
      </div>
      <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
    </div>
    <!-- KEYWORDS
Object Events
Named Events
--><!-- TAGS
object_events
--></body>
</html>