<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>JSDoc脚本评论</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how JSDoc Script Comments work" />
  <meta name="rh-index-keywords" content="Code Editor - JSDoc Comments,JSDoc" />
  <meta name="search-keywords" content="JSDoc,JSDoc Comments" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>JSDoc<span class="notranslate">Script</span> 评论</h1>
  <p>如果你希望你的自定义函数有代码自动完成功能，并在代码编辑器中以特定的方式显示所需的参数，那么你需要添加一些<a href="https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html">JSDoc风格的</a>注释。这些注释是用来告诉自动完成功能应该如何在<a href="../Scripts.htm">脚本编辑器</a>中使用和填写该函数。</p>
  <p>一个典型的函数头的格式是：函数名称，函数描述，然后是函数接受的不同参数（参数）的列表，确保每一行以三个反斜线 &quot;<span class="inline">///</span>&quot; 开始，因为这告诉<span data-keyref="GameMaker Name">GameMaker</span>将注释解析为JSDoc风格。你也可以用 <span class="inline">/**</span>... 来包装你的JSDoc注释。<span class="inline">*/</span> <span class="inline">/**</span> ，并将其放在自己的行中。</p>
  <p>评论本身需要被赋予一个标识符（前面是&quot;<span class="inline">@</span>&quot;）和内容，可用的标识符如下。</p>
  <table>
    <colgroup>
      <col style="width: 306px;" />
      <col style="width: 488px;" />
      <col style="width: 487px;" />
    </colgroup>
    <tbody>
      <tr>
        <th>识别器</th>
        <th>内容</th>
        <th>语法</th>
      </tr>
      <tr>
        <td><span class="inline">@function</span> / <span class="inline">@func</span></td>
        <td>完整的函数名称，包括参数</td>
        <td><span class="inline">@func my_func(args)</span></td>
      </tr>
      <tr>
        <td><span class="inline">@description</span> / <span class="inline">@desc</span></td>
        <td>对该功能的一般描述</td>
        <td><span class="inline">@desc &lt;Description goes&gt;</span></td>
      </tr>
      <tr>
        <td><span class="inline">@param</span> / / / <span class="inline">@</span><span class="inline">parameter</span> <span class="inline">@arg</span> <span class="inline">@argument</span></td>
        <td>关于参数的信息，有一个可选的 <a href="Feather_Data_Types.htm"><span class="notranslate">type</span></a></td>
        <td><span class="inline">@param <em>{type}</em> name &lt;Parameter description&gt;</span></td>
      </tr>
      <tr>
        <td><span class="inline">@return / @returns</span></td>
        <td>该函数返回的<a href="Feather_Data_Types.htm">数据类型</a></td>
        <td><span class="inline">@return {type} &lt;Return description&gt;</span></td>
      </tr>
      <tr>
        <th colspan="3">只有<a href="../../Setting_Up_And_Version_Information/IDE_Preferences/Feather_Settings.htm">羽毛</a></th>
      </tr>
      <tr>
        <td><span class="inline">@pure</span></td>
        <td>将该函数标记为<a class="glossterm" data-glossterm="纯粹的" href="#">纯</a>函数</td>
        <td><span class="inline">@pure</span></td>
      </tr>
      <tr>
        <td style=""><span class="inline">@ignore</span></td>
        <td style="">将函数从Feather的自动完成中隐藏起来</td>
        <td><span class="inline">@ignore</span></td>
      </tr>
      <tr>
        <td style=""><span class="inline">@deprecated</span></td>
        <td style="">将该函数标记为已废弃</td>
        <td><span class="inline">@deprecated</span></td>
      </tr>
      <tr>
        <td style=""><span class="inline">@context / @self</span></td>
        <td style="">设置函数的上下文，Feather自动完成使用它来提供上下文信息。可以是一个<span class="notranslate">object</span> ，也可以是一个构造器。</td>
        <td><span class="inline">@self &lt;object&gt;</span></td>
      </tr>
    </tbody>
  </table>
  <p>如果你没有为你的参数或返回值指定一个类型，并且你正在使用<a href="../../Setting_Up_And_Version_Information/IDE_Preferences/Feather_Settings.htm">Feather</a>，它将根据你的函数体自动为它们假设一个数据类型。</p>
  <p>见 <span class="inline">@param</span> 和 <span class="inline">@return</span> 关于<a href="Feather_Data_Types.htm">Feather数据类型</a>的信息。</p>
  <h2>实例</h2>
  <p>为了了解在编写你自己的函数时如何工作，让我们来看看这个基本的例子。</p>
  <p class="code">function is_same_object(_id, _obj)<br />
    {<br />
        if (_id.object_index == _obj)<br />
        {<br />
            return true;<br />
        }<br />
        else return false;<br />
    }</p>
  <p><span class="notranslate">script</span> 这个<span class="notranslate">object</span> ，只是检查一个实例是否与给定的 <span class="inline">object_index</span> ，并且会被简单地调用为。</p>
  <p class="code">if is_same_object(id, obj_Player)<br />
    {<br />
        instance_destroy()<br />
    }</p>
  <p>然而，将其写入代码编辑器会直接显示参数变量名(<span class="inline">_id</span> 和 <span class="inline">_obj</span>)，在大多数情况下，这不是很有描述性。你可以使用JSDoc来定义自定义的参数名称和描述，同时也可以定义函数的信息。</p>
  <p class="code">/// @function                is_same_object(inst_id, object_id)<br />
    /// @description             Check if the given instance belongs to the given object.<br />
    /// @param {Id.Instance}     inst_id    The unique instance ID value of the instance to check.<br />
    /// @param {Asset.GMObject}  object_id  The object index to be checked against.<br />
    /// @return {Bool}<br />
    <br />
    function is_same_object(_inst_id, _object_id)<br />
    {<br />
        return _inst_id.object_index == _object_id;<br />
    }
  </p>
  <p>现在，当在你项目的任何地方调用这个函数时，你会看到在JSDoc注释中输入的新参数名称。</p>
  <p><img>在上面的图片中，上面的部分显示了自动完成中的功能，下面的部分显示了底部的参数帮助器是如何工作的。请注意， <span class="inline">@param</span> 中可选的 &quot;类型 &quot;和必须的 &quot;描述 &quot;部分，在<span class="notranslate">IDE</span> 代码完成中默认不显示，要看到它们，你必须激活<a href="../../Setting_Up_And_Version_Information/IDE_Preferences/GML_Code_Preferences.htm">GML偏好</a>中的选项。</p>
  <p>在使用<a href="../../Setting_Up_And_Version_Information/IDE_Preferences/Feather_Settings.htm">Feather</a>时，当你把鼠标悬停在该功能上时，你会看到关于该功能的详细信息。</p>
  <p><img>你可以用 <span class="inline">[]</span> 大括号包住一个参数名，表示它是可选的。然后，代码编辑器将期望在最小需要的参数和参数总数之间有任何数量的参数。</p>
  <p>例如，请看以下函数。</p>
  <p class="code">/// @function    animate_position(end_x, end_y, start_x, start_y)<br />
    /// @desc        Animates the instance to ending point, from optional starting point<br />
    /// @arg end_x<br />
    /// @arg end_y<br />
    /// @arg [start_x]<br />
    /// @arg [start_y]<br />
    <br />
    function animate_position (x1, y1, x2, y2)<br />
    {<br />
        // Function code<br />
    }
  </p>
  <p> <span class="inline">start_x</span> 和 <span class="inline">start_y</span> 参数被标记为可选的，这意味着代码编辑器现在会期望有2到4个参数，在警告信息中可以看到。</p>
  <p><img alt="JSDoc Example" class="center" height="652" src="../../assets/Images/Scripting_Reference/Additional_Information/JavaDoc_Example.png" width="672" /></p>
  <p class="note"><span class="note">注意</span>如果你在函数声明中使用可选的参数，你会得到同样的行为。更多信息请参见<a href="../../GameMaker_Language/GML_Overview/Script_Functions.htm">脚本函数</a>。</p>
  <p>由于<span class="notranslate">scripts</span> ，其中可以有多个函数，你可以在其声明之前为每个函数添加JSDoc注释。</p>
  <p><img class="center" src="../../assets/Images/Asset_Editors/JSDoc_Feather_Info.png" /></p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">返回。<a href="../Scripts.htm"> <span class="notranslate">Script</span> 编辑</a></div>
        <div style="float:right">下一步。<a data-xref="{title}" href="Feather_Data_Types.htm">羽毛数据类型</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
JSDoc <span class="notranslate">Script</span> Comments
-->
  <!-- TAGS
jsdoc_comments
-->
</body>
</html>